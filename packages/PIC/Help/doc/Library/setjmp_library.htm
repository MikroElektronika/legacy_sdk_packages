
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>

<title>Setjmp Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroelektronika.co.yu">
<link rel="stylesheet" type="text/css" href="css/help_c_PIC.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>


	






<link rel="stylesheet" type="text/css" href="css/print.css" media="print">


<style type="text/css">
#top {
  background:transparent url(template/background_PIC.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">Setjmp Library</div><div class="navigation">&nbsp;&nbsp;<A href="index.htm">mikroC PRO for PIC Libraries</A> &gt; <A href="mikroC_PRO_miscellaneous_libraries.htm">Miscellaneous Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="printout_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="sprint_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">

    <a name="top_of_page"><h2>Setjmp Library</h2></a>

		<p>This library contains functions and types definitions for bypassing the normal
		function call and return discipline. The type declared is <b>jmp_buf</b>
		which is an array type suitable for holding the information needed to restore
		a calling environment.</p>
		
		<p>Type declaration is contained in sejmp16.h and setjmp18.h
		header files for PIC16 and PIC18 family mcus respectively. These headers can be
		found in the include folder of the compiler.
		The implementation of this library is different for PIC16 and PIC18 family mcus.
		For PIC16 family Setjmp and Longjmp are implemented as macros defined in setjmp16.h
		header file and for PIC18 family as functions defined in setjmp library file.<br>

    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">	  
      <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Note :</b>
      Due to PIC16 family specific of not being able to read/write stack pointer,
	    the program execution after Longjmp ivocation occurs depends on the
		  stack content. That is why, for PIC16 family only, implementation of
		  Setjmp and Longjmp functions is not ANSI C standard compliant.
    </div>


    <!-- -->
    
    <h3>Library Routines</h3>

    <ul>
      <li><a href="#setjmp">Setjmp</a></li>
      <li><a href="#longjmp">Longjmp</a></li>
    </ul>

    <!-- -->
    <!-- -->


    <h3 id="setjmp">Setjmp</h3>


    <!-- tabela: setjmp -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>int</b> setjmp(<b>jmp_buf</b> env);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>if the return is from direct invocation it returns 0<br>
               if the return is from  a call to the longjmp it returns nonzero value</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This function saves calling position in jmp_buf for later use by longjmp. The parameter <code>env</code>: array of type (jmp_buf) suitible for holding the information needed for restoring calling environment.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>setjmp(buf);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="longjmp">Longjmp</h3>


    <!-- tabela: Longjmp -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> longjmp(<b>jmp_buf</b>  env, <b>int</b> val);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>longjmp causes setjmp to return val, if val is 0 it will return 1.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Restores calling environment saved in jmp_buf by most recent invocation of setjmp macro. If there has been no such invocation, or function conatinig the invocation of setjmp has terminated in the interim, the behaviour is undefined.Parameter <code>env</code>: array of type (jmp_buf) holding the information saved by corresponding setjmp invocation, <code>val</code>: char value, that will return corresponding setjmp.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Invocation of Longjmp must occur before return from the function in which Setjmp was called encounters.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>longjmp(buf, 2);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->  

<h3>Library Example</h3>

    <p>Example demonstrates function cross calling using setjmp and longjmp functions.
     When called, Setjmp() saves its calling environment in its jmp_buf argument
     for later use by the Longjmp().
     Longjmp(), on the other hand, restores the environment saved by the most
     recent invocation of the Setjmp() with the corresponding jmp_buf argument. The given
     example is for P16.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">#include &#60;setjmp16.h&#62;

jmp_buf buf;             <i>// Note: Program flow diagrams are indexed according</i>
                         <i>//       to the sequence of execution</i>

<b>void</b> func33(){           <i>//  2&#60;----------|</i>
  Delay_ms(1000);        <i>//              |</i>
                         <i>//              |</i>
  <b>asm</b> nop;               <i>//              |</i>
  longjmp(buf, 2);       <i>//  3--------------&#62;|</i>
  <b>asm</b> nop;               <i>//              |   |</i>
                         <i>//              |   |</i>
}                        <i>//              |   |</i>
                         <i>//              |   |</i>
<b>void</b> func(){             <i>//  1&#60;------|   |   |</i>
                         <i>//          |   |   |</i>
  PORTB = 3;             <i>//          |   |   |</i>
  <b>if</b> (setjmp(buf) == 2)  <i>//  3&#60;--------------|</i>
    PORTB = 1;           <i>//  4--&#62;|   |   |</i>
  <b>else</b>                   <i>//      |   |   |</i>
    func33();            <i>//  2----------&#62;|</i>
                         <i>//      |   |</i>
  <b>asm</b> nop;               <i>//  4&#60;--|   |</i>
}                        <i>//  5-------|-------&#62;   depends on stack content</i>
                         <i>//          |</i>
<b>void</b> main() {            <i>//          |</i>
                         <i>//          |</i>
  PORTB = 0;             <i>//          |</i>
  TRISB = 0;             <i>//          |</i>
                         <i>//          |</i>
  <b>asm</b> nop;               <i>//          |</i>
                         <i>//          |</i>
  func();                <i>//  1------&#62;|</i>
                         <i>//</i>
  <b>asm</b> nop;               <i>//</i>
  Delay_ms(1000);
  PORTB = 0xFF;
}</pre>

      <div class="feedback">
      Copyright (c) 2002-2019 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3" target="_blank">Send us feedback!</a>
    </div>

    <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
