
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>

<title>PWM Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroe.com">
<link rel="stylesheet" type="text/css" href="css/help_c_PIC.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>


	








<style type="text/css">
#top {
  background:transparent url(template/background_PIC.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">PWM Library</div><div class="navigation">&nbsp;&nbsp;<A href="index.htm">mikroC PRO for PIC Libraries</A> &gt; <A href="mikroC_PRO_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="ps2_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="pwm_remappable_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">

    <a name="top_of_page"><h2>PWM Library</h2></a>


    <br>
    <p><acronym title="Capture/Compare/PWM">CCP</acronym> module is available with a number of PIC MCUs. mikroC PRO for PIC provides library which simplifies using <acronym title="Pulse-width modulation">PWM</acronym> HW Module.</p>
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">	  
      <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b>
      <ul>
      	<li>Some MCUs have multiple <acronym title="Capture/Compare/PWM">CCP</acronym> modules. In order to use the desired <acronym title="Capture/Compare/PWM">CCP</acronym> library routine, simply change the <code><b>x</b></code> in the prototype with the appropriate module number, i.e. <code>PWM2_Start();</code>.</li>
      </ul>
    </div>
		

    <!-- -->

    <p></p>
    <h3>Library Routines</h3>

    <ul>
      <li><a href="#pwm1_init">PWMx_Init</a></li>
      <li><a href="#pwm1_set_duty">PWMx_Set_Duty</a></li>
      <li><a href="#pwm1_start">PWMx_Start</a></li>
      <li><a href="#pwm1_stop">PWMx_Stop</a></li>
    </ul>


    <!-- -->


    <h3 id="pwm1_init">PWMx_Init</h3>


    <!-- tabela: PWM1_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> PWMx_Init(<b>long</b> freq);</p>
            <i>// For Enhanced Mid-Range Core 145x/150x MCUs</i>
            <p><b>void</b> PWMx_Init(<b>unsigned long</b> PWM_Freq, <b>unsigned int</b> timer_prescaler);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Initializes the <acronym title="Pulse-width modulation">PWM</acronym> module with duty ratio 0. Parameter <code>freq</code> is a desired <acronym title="Pulse-width modulation">PWM</acronym> frequency in Hz (refer to device data sheet for correct values in respect with Fosc).
            <br><code>timer_prescaler</code> parameter represents the timer prescaler and can have following values: 1, 4, 16 and 64.</p>
            <p>This routine needs to be called before using other functions from <acronym title="Pulse-width modulation">PWM</acronym> Library.</p>
<!--               <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
              <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Note :</b>
             <br><br><b>PIC16F170x/171x family specifics :</b>
                <ul>
                	<li>Before using this library, make sure that <a href="peripheral_pin_select_library.htm">Peripheral Pin Select Library</a> is checked in the <a href="library_manager.htm">Library Manager</a>.</li>
                  <li><acronym title="Pulse-width modulation">PWM</acronym>1 module is initialized on the RC1 pin and <acronym title="Pulse-width modulation">PWM</acronym>2 module on RC2 pin.</li>
                </ul>
                <b>PIC18FxxJ94 family specifics :</b>
                <ul>
                	<li>Before using this library, make sure that <a href="peripheral_pin_select_library.htm">Peripheral Pin Select Library</a> is checked in the <a href="library_manager.htm">Library Manager</a>, and that appropriate pins were mapped.</li>
                </ul>
            </div>            -->
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have <acronym title="Capture/Compare/PWM">CCP</acronym> module.</p>
            <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
              <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Note :</b>
              Calculation of the PWM frequency value is carried out by the compiler, as it would produce a relatively large code if performed on the library level. <br>Therefore, compiler needs to know the value of the parameter in the compile time. That is why this parameter needs to be a constant, and not a variable.
            </div>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
            <p>Initialize PWM module at 5KHz:</p>

<pre>
PWM1_Init(5000);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->

    <h3 id="pwm1_set_duty">PWMx_Set_Duty</h3>


    <!-- tabela: PWM1_Set_Duty -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> PWMx_Set_Duty(<b>unsigned short</b> duty_ratio);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets <acronym title="Pulse-width modulation">PWM</acronym> duty ratio. Parameter <code>duty</code> takes values from 0 to 255, where 0 is 0%, 127 is 50%, and 255 is 100% duty ratio. Other specific values for duty ratio can be calculated as <code>(Percent*255)/100</code>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have <acronym title="Capture/Compare/PWM">CCP</acronym> module. <a href="#pwm1_init">PWMx_Init</a> must be called before using this routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
            <p>Set duty ratio to 75%:</p>

<pre>
PWM1_Set_Duty(192);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="pwm1_start">PWMx_Start</h3>


    <!-- tabela: PWM1_Start -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> PWMx_Start(<b>void</b>);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Starts <acronym title="Pulse-width modulation">PWM</acronym>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have <acronym title="Capture/Compare/PWM">CCP</acronym> module. <a href="#pwm1_init">PWMx_Init</a> must be called before using this routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
PWM1_Start();</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="pwm1_stop">PWMx_Stop</h3>


    <!-- tabela: PWM1_Stop -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> PWMx_Stop(<b>void</b>);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Stops <acronym title="Pulse-width modulation">PWM</acronym>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have <acronym title="Capture/Compare/PWM">CCP</acronym> module. 
            	 <a href="#pwm1_init">PWMx_Init</a> must be called before using this routine.
            	 <a href="#pwm1_start">PWMx_Start</a> should be called before using this routine, otherwise it will have no effect as the PWM module is not running.</p>
         </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
PWM1_Stop();</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3>Library Example</h3>

    <p>The example changes <acronym title="Pulse-width modulation">PWM</acronym> duty ratio on RC1 and RC2 pins continually. If LED is connected to these pins, you can observe the gradual change of emitted light.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>unsigned short</b> current_duty, old_duty, current_duty1, old_duty1;

<b>void</b> InitMain() {
  ANSEL  = 0;                         <i>// Configure AN pins as digital</i>
  ANSELH = 0;
  C1ON_bit = 0;                       <i>// Disable comparators</i>
  C2ON_bit = 0;
  
  PORTA = 255;
  TRISA = 255;                        <i>// configure PORTA pins as input</i>
  PORTB = 0;                          <i>// set PORTB to 0</i>
  TRISB = 0;                          <i>// designate PORTB pins as output</i>
  PORTC = 0;                          <i>// set PORTC to 0</i>
  TRISC = 0;                          <i>// designate PORTC pins as output</i>
  PWM1_Init(5000);                    <i>// Initialize PWM1 module at 5KHz</i>
  PWM2_Init(5000);                    <i>// Initialize PWM2 module at 5KHz</i>
}

<b>void</b> main() {
  InitMain();
  current_duty  = 16;                 <i>// initial value for current_duty</i>
  current_duty1 = 16;                 <i>// initial value for current_duty1</i>

  PWM1_Start();                       <i>// start PWM1</i>
  PWM2_Start();                       <i>// start PWM2</i>
  PWM1_Set_Duty(current_duty);        <i>// Set current duty for PWM1</i>
  PWM2_Set_Duty(current_duty1);       <i>// Set current duty for PWM2</i>

  <b>while</b> (1) {                         <i>// endless loop</i>
    <b>if</b> (RA0_bit) {                    <i>// button on RA0 pressed</i>
      Delay_ms(40);
      current_duty++;                 <i>// increment current_duty</i>
      PWM1_Set_Duty(current_duty);
     }

    <b>if</b> (RA1_bit) {                    <i>// button on RA1 pressed</i>
      Delay_ms(40);
      current_duty--;                 <i>// decrement current_duty</i>
      PWM1_Set_Duty(current_duty);
     }

    <b>if</b> (RA2_bit) {                    <i>// button on RA2 pressed</i>
      Delay_ms(40);
      current_duty1++;                <i>// increment current_duty1</i>
      PWM2_Set_Duty(current_duty1);
     }

    <b>if</b> (RA3_bit) {                    <i>// button on RA3 pressed</i>
      Delay_ms(40);
      current_duty1--;                <i>// decrement current_duty1</i>
      PWM2_Set_Duty(current_duty1);
     }

    Delay_ms(5);                      <i>// slow down change pace a little</i>
  }
}
</pre>


    <!-- -->


    <h3>HW Connection</h3>

    <p class="center"><img alt="PWM demonstration" src="img/schemes/scheme_pwm.gif"></p>
    <p class="center small">PWM demonstration</p>


      <div class="feedback">
      Copyright (c) 2002-2019 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3" target="_blank">Send us feedback!</a>
    </div>

    <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
