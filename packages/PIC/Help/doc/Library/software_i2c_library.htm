
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>

<title>Software I2C Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2006.">
<meta name="Author" content="Marko Jovanovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_PIC.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>


	








<style type="text/css">
#top {
  background:transparent url(template/background_PIC.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">Software I2C Library</div><div class="navigation">&nbsp;&nbsp;<A href="index.htm">mikroC PRO for PIC Libraries</A> &gt; <A href="mikroC_PRO_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="rs-485_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="software_spi_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">

    <a name="top_of_page"><h2>Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> Library</h2></a>


    <p>The mikroC PRO for PIC provides routines for implementing Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> communication. These routines are hardware independent and can be used with any MCU. The Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> library enables you to use MCU as Master in <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> communication. Multi-master mode is not supported.</p>
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	    <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b>         
      <ul>
    	  <li>This library implements time-based activities, so interrupts need to be disabled when using Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym>.</li>
    	  <li>All Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> Library functions are blocking-call functions (they are waiting for <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> clock line to become logical one).</li>
    	  <li>The pins used for the Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> communication should be connected to the pull-up resistors. Turning off the LEDs connected to these pins may also be required.</li>
        <li>Every Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> library routine has its own counterpart in Hardware <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> library, except <code>I2C_Repeated_Start</code>. <code>Soft_I2C_Start</code> is used instead of <code>I2C_Repeated_Start</code>.</li>
    	  <li>Working clock frequency of the Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> is 20kHz.</li>
      </ul>
    </div>
    
    <!-- -->

    <p></p>
    <h3>External dependencies of Software I&sup2;C Library</h3>

    <!-- tabela: Ext_depend -->

    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using Software I&sup2;C Library:</th>
          <th width="30%">Description : </th>
          <th width="30%">Example : </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sbit</b> Soft_I2C_Scl;</code></td>
          <td align="left">Soft I&sup2;C Clock line.</td>
          <td align="left"><code><b>sbit</b> Soft_I2C_Scl <b>at</b> RC3_bit;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sbit</b> Soft_I2C_Sda;</code></td>
          <td align="left">Soft I&sup2;C Data line.</td>
          <td align="left"><code><b>sbit</b> Soft_I2C_Sda <b>at</b> RC4_bit;</code></td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sbit</b> Soft_I2C_Scl_Direction;</code></td>
          <td align="left">Direction of the Soft I&sup2;C Clock pin.</td>
          <td align="left"><code><b>sbit</b> Soft_I2C_Scl_Direction <b>at</b> TRISC3_bit;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sbit</b> Soft_I2C_Sda_Direction;</code></td>
          <td align="left">Direction of the Soft I&sup2;C Data pin.</td>
          <td align="left"><code><b>sbit</b> Soft_I2C_Sda_Direction <b>at</b> TRISC4_bit;</code></td>
        </tr>
 
      </tbody>

    </table>


    <!-- kraj tabele -->

    <h3>Library Routines</h3>

    <ul>
      <li><a href="#soft_i2c_init">Soft_I2C_Init</a></li>
      <li><a href="#soft_i2c_start">Soft_I2C_Start</a></li>
      <li><a href="#soft_i2c_read">Soft_I2C_Read</a></li>
      <li><a href="#soft_i2c_write">Soft_I2C_Write</a></li>
      <li><a href="#soft_i2c_stop">Soft_I2C_Stop</a></li>
      <li><a href="#soft_i2c_break">Soft_I2C_Break</a></li>
    </ul>

    <!-- -->


    <h3 id="soft_i2c_init">Soft_I2C_Init</h3>


    <!-- tabela: Soft_I2C_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Soft_I2C_Init();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures the software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
          Global variables :
          <ul>  
            <li><code>Soft_I2C_Scl</code>: Soft I&sup2;C clock line</li>
            <li><code>Soft_I2C_Sda</code>: Soft I&sup2;C data line</li>
            <li><code>Soft_I2C_Scl_Pin_Direction</code>: Direction of the Soft I&sup2;C clock pin</li>
            <li><code>Soft_I2C_Sda_Pin_Direction</code>: Direction of the Soft I&sup2;C data pin</li>
          </ul>
          must be defined before using this function. 
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// Software I2C connections</i>
<b>sbit</b> Soft_I2C_Scl           <b>at</b> RC3_bit;
<b>sbit</b> Soft_I2C_Sda           <b>at</b> RC4_bit;
<b>sbit</b> Soft_I2C_Scl_Direction <b>at</b> TRISC3_bit;
<b>sbit</b> Soft_I2C_Sda_Direction <b>at</b> TRISC4_bit;
<i>// End Software I2C connections</i>

...
Soft_I2C_Init();</i></pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="soft_i2c_start">Soft_I2C_Start</h3>


    <!-- tabela: Soft_I2C_Start -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Soft_I2C_Start(<b>void</b>);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Determines if the <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> bus is free and issues START signal.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> must be configured before using this function. See <a href="#soft_i2c_init">Soft_I2C_Init</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
         <td valign="top">

<pre>
<i>// Issue START signal</i>
Soft_I2C_Start();</pre>

          </td>
       </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="soft_i2c_read">Soft_I2C_Read</h3>


    <!-- tabela: Soft_I2C_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned short</b> Soft_I2C_Read(<b>unsigned int</b> ack);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>One byte from the Slave.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one byte from the slave.</p>
            <p>Parameters :
            	<ul>
              	<li><code>ack:</code> acknowledge signal parameter. If the <code>ack==0</code> <em>not acknowledge</em> signal will be sent after reading, otherwise the <em>acknowledge</em> signal will be sent.</li>
              </ul>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Soft <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> must be configured before using this function. See <a href="#soft_i2c_init">Soft_I2C_Init</a> routine.</p>
            <p>Also, START signal needs to be issued in order to use this function. See <a href="#soft_i2c_start">Soft_I2C_Start</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>unsigned short</b> take;
...
<i>// Read data and send the not_acknowledge signal</i>
take = Soft_I2C_Read(0);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="soft_i2c_write">Soft_I2C_Write</h3>


    <!-- tabela: Soft_I2C_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned short</b> Soft_I2C_Write(<b>unsigned short</b> data_);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
           <p>
           	  <ul>
           	    <li> <code>0</code> if there were no errors.</li>
           	    <li> <code>1</code> if write collision was detected on the <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> bus.</li>
           	  </ul>
           </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sends data byte via the <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> bus.</p>
            <p>Parameters :
            	<ul>
              	<li><code>data_:</code> data to be sent</li>
              </ul>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Soft <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> must be configured before using this function. See <a href="#soft_i2c_init">Soft_I2C_Init</a> routine.</p>
            <p>Also, START signal needs to be issued in order to use this function. See <a href="#soft_i2c_start">Soft_I2C_Start</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><b>unsigned short</b> data_, error;
<i>...</i>
error = Soft_I2C_Write(data_);
error = Soft_I2C_Write(0xA3);</pre>


          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="soft_i2c_stop">Soft_I2C_Stop</h3>


    <!-- tabela: Soft_I2C_Stop -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Soft_I2C_Stop(<b>void</b>);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Issues STOP signal.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Soft <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> must be configured before using this function. See <a href="#soft_i2c_init">Soft_I2C_Init</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// Issue STOP signal</i>
Soft_I2C_Stop();</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="soft_i2c_break">Soft_I2C_Break</h3>


    <!-- tabela: Soft_I2C_Break -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Soft_I2C_Break(<b>void</b>);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>All Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> Library functions can block the program flow (see note at the top of this page). Calling this routine from interrupt will unblock the program execution. This mechanism is similar to <acronym title="Watch Dog Timer">WDT</acronym>.</p>
            <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">	  
              <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Note :</b>
              Interrupts should be disabled before using Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> routines again (see note at the top of this page).
            </div>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            Nothing.
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>

<i>// Software I2C connections</i>
<b>sbit</b> Soft_I2C_Scl           <b>at</b> RC0_bit;
<b>sbit</b> Soft_I2C_Sda           <b>at</b> RC1_bit;
<b>sbit</b> Soft_I2C_Scl_Direction <b>at</b> TRISC0_bit;
<b>sbit</b> Soft_I2C_Sda_Direction <b>at</b> TRISC1_bit;
<i>// End Software I2C connections</i>

<b>char</b> counter = 0;

<b>void</b> interrupt {

  <b>if</b> (INTCON.T0IF) {
    <b>if</b> (counter &#62;= 20) {
      Soft_I2C_Break();
      counter = 0;              <i>// reset counter</i>
    }
    <b>else</b>
      counter++;                <i>// increment counter</i>
  
    INTCON.T0IF = 0;            <i>// Clear Timer0 overflow interrupt flag</i>

    }
}

<b>void</b> main() {

  OPTION_REG = 0x04;            <i>// TMR0 prescaler set to 1:32</i>

  ...

  <i>// try Soft_I2C_Init with blocking prevention mechanism</i>
  INTCON.GIE = 1;               <i>// Global interrupt enable</i>
  INTCON.T0IE = 1;              <i>// Enable Timer0 overflow interrupt</i>
  Soft_I2C_Init();
  INTCON.GIE = 0;               <i>// Global interrupt disable</i>

  ...
}</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3>Library Example</h3>

    <p>The example demonstrates Software <acronym title="Inter-Integrated Circuit">I&sup2;C</acronym> Library routines usage. The PIC <acronym title="MicroController Unit">MCU</acronym> is connected (SCL, SDA pins) to PCF8583 RTC (real-time clock). Program reads date and time are read from the RTC and prints it on Lcd.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<i>// Software I2C connections</i>
<b>sbit</b> Soft_I2C_Scl           <b>at</b> RC3_bit;
<b>sbit</b> Soft_I2C_Sda           <b>at</b> RC4_bit;
<b>sbit</b> Soft_I2C_Scl_Direction <b>at</b> TRISC3_bit;
<b>sbit</b> Soft_I2C_Sda_Direction <b>at</b> TRISC4_bit;
<i>// End Software I2C connections</i>

<i>// LCD module connections</i>
<b>sbit</b> LCD_RS <b>at</b> RB4_bit;
<b>sbit</b> LCD_EN <b>at</b> RB5_bit;
<b>sbit</b> LCD_D4 <b>at</b> RB0_bit;
<b>sbit</b> LCD_D5 <b>at</b> RB1_bit;
<b>sbit</b> LCD_D6 <b>at</b> RB2_bit;
<b>sbit</b> LCD_D7 <b>at</b> RB3_bit;

<b>sbit</b> LCD_RS_Direction <b>at</b> TRISB4_bit;
<b>sbit</b> LCD_EN_Direction <b>at</b> TRISB5_bit;
<b>sbit</b> LCD_D4_Direction <b>at</b> TRISB0_bit;
<b>sbit</b> LCD_D5_Direction <b>at</b> TRISB1_bit;
<b>sbit</b> LCD_D6_Direction <b>at</b> TRISB2_bit;
<b>sbit</b> LCD_D7_Direction <b>at</b> TRISB3_bit;
<i>// End LCD module connections</i>

<b>char</b> seconds, minutes, hours, day, month, year; <i>// Global date/time variables</i>

<i>//--------------------- Reads time and date information from RTC (PCF8583)</i>
<b>void</b> Read_Time() {

  Soft_I2C_Start();               <i>// Issue start signal</i>
  Soft_I2C_Write(0xA0);           <i>// Address PCF8583, see PCF8583 datasheet</i>
  Soft_I2C_Write(2);              <i>// Start from address 2</i>
  Soft_I2C_Start();               <i>// Issue repeated start signal</i>
  Soft_I2C_Write(0xA1);           <i>// Address PCF8583 for reading R/W=1</i>
  
  seconds = Soft_I2C_Read(1);     <i>// Read seconds byte</i>
  minutes = Soft_I2C_Read(1);     <i>// Read minutes byte</i>
  hours = Soft_I2C_Read(1);       <i>// Read hours byte</i>
  day = Soft_I2C_Read(1);         <i>// Read year/day byte</i>
  month = Soft_I2C_Read(0);       <i>// Read weekday/month byte</i>
  Soft_I2C_Stop();                <i>// Issue stop signal</i>
  
}

<i>//-------------------- Formats date and time</i>
<b>void</b> Transform_Time() {
  seconds  =  ((seconds &#38; 0xF0) &#62;&#62; 4)*10 + (seconds &#38; 0x0F);  <i>// Transform seconds</i>
  minutes  =  ((minutes &#38; 0xF0) &#62;&#62; 4)*10 + (minutes &#38; 0x0F);  <i>// Transform months</i>
  hours    =  ((hours &#38; 0xF0)  &#62;&#62; 4)*10  + (hours &#38; 0x0F);    <i>// Transform hours</i>
  year     =   (day &#38; 0xC0) &#62;&#62; 6;                             <i>// Transform year</i>
  day      =  ((day &#38; 0x30) &#62;&#62; 4)*10    + (day &#38; 0x0F);       <i>// Transform day</i>
  month    =  ((month &#38; 0x10)  &#62;&#62; 4)*10 + (month &#38; 0x0F);     <i>// Transform month</i>
}

<i>//-------------------- Output values to LCD</i>
<b>void</b> Display_Time() {

   Lcd_Chr(1, 6, (day / 10)   + 48);    <i>// Print tens digit of day variable</i>
   Lcd_Chr(1, 7, (day % 10)   + 48);    <i>// Print oness digit of day variable</i>
   Lcd_Chr(1, 9, (month / 10) + 48);
   Lcd_Chr(1,10, (month % 10) + 48);
   Lcd_Chr(1,15,  year        + 48);    <i>// Print year variable  (start from year 2010)</i>


   Lcd_Chr(2, 6, (hours / 10)   + 48);
   Lcd_Chr(2, 7, (hours % 10)   + 48);
   Lcd_Chr(2, 9, (minutes / 10) + 48);
   Lcd_Chr(2,10, (minutes % 10) + 48);
   Lcd_Chr(2,12, (seconds / 10) + 48);
   Lcd_Chr(2,13, (seconds % 10) + 48);
}


<i>//------------------ Performs project-wide init</i>
<b>void</b> Init_Main() {

  TRISB = 0;
  PORTB = 0xFF;
  TRISB = 0xff;
  ANSEL  = 0;                <i>// Configure AN pins as digital I/O</i>
  ANSELH = 0;
  C1ON_bit = 0;              <i>// Disable comparators</i>
  C2ON_bit = 0;
  
  Soft_I2C_Init();           <i>// Initialize Soft I2C communication</i>
  Lcd_Init();                <i>// Initialize LCD</i>
  Lcd_Cmd(_LCD_CLEAR);       <i>// Clear LCD display</i>
  Lcd_Cmd(_LCD_CURSOR_OFF);  <i>// Turn cursor off</i>

  Lcd_Out(1,1,&#34;Date:&#34;);      <i>// Prepare and output static text on LCD</i>
  Lcd_Chr(1,8,'.');
  Lcd_Chr(1,11,'.');
  Lcd_Chr(1,16,'.');
  Lcd_Out(2,1,&#34;Time:&#34;);
  Lcd_Chr(2,8,':');
  Lcd_Chr(2,11,':');
  Lcd_Out(1,12,&#34;201&#34;);       <i>// start from year 2010</i>
}

<i>//----------------- Main procedure</i>
<b>void</b> main() {
  Delay_ms(500);
   
  Init_Main();               <i>// Perform initialization</i>

  <b>while</b> (1) {                <i>// Endless loop</i>
    Read_Time();             <i>// Read time from RTC(PCF8583)</i>
    Transform_Time();        <i>// Format date and time</i>
    Display_Time();          <i>// Prepare and display on LCD</i>
  }
}
</pre>


      <div class="feedback">
      Copyright (c) 2002-2019 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3" target="_blank">Send us feedback!</a>
    </div>

    <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
