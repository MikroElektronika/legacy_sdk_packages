
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>

<title>SPI Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_AVR.css">

<script defer type="text/javascript" src="css/pngfix.js"></script>


	






<link rel="stylesheet" type="text/css" href="css/print.css" media="print">


<style type="text/css">
#top {
  background:transparent url(template/c_avr.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
  PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">SPI Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_PRO_libraries.htm">mikroC PRO for AVR Libraries</A> &gt; <A href="mikroC_PRO_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="sound_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="spi_ethernet_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	





  <div id="main">


    <a name="top_of_page"><h2><acronym title="Serial Peripheral Interface">SPI</acronym> Library</h2></a>


    <p>mikroC PRO for AVR provides a library for comfortable work with <acronym title="Serial Peripheral Interface">SPI</acronym> module in Master mode. 
    The AVR <acronym title="MicroController Unit">MCU</acronym> can easily communicate with other devices via <acronym title="Serial Peripheral Interface">SPI</acronym>: A/D converters, D/A converters, MAX7219, LTC1290, etc.</p>
    <!-- -->

    <h3>Library Routines</h3>

    <ul>
      <li><a href="#spi1_init">SPI1_Init</a></li>
      <li><a href="#spi1_init_advanced">SPI1_Init_Advanced</a></li>
      <li><a href="#spi1_read">SPI1_Read</a></li>
      <li><a href="#spi1_write">SPI1_Write</a></li>
      <li><a href="#spi_set_active">SPI_Set_Active</a></li>  
    </ul>

    <h4>Generic Routines</h4>

    <ul>
      <li><a href="#spi_read_gen">SPI_Read</a></li>  
      <li><a href="#spi_write_gen">SPI_Write</a></li>    
    </ul>

    <!-- -->

    <h3 id="spi1_init">SPI1_Init</h3>


    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI1_Init();</p>
            <i>// for XMEGA family of MCUs</i>
            <p><b>void</b> SPIx_Init();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This routine configures and enables <acronym title="Serial Peripheral Interface">SPI</acronym> module with the following settings:</p>
            	<ul>
            		<li>master mode</li> 
            		<li>8 bit data transfer</li>
            		<li>most significant bit sent first</li>
            		<li>serial clock low when idle</li> 
            		<li>data sampled on leading edge</li>
            		<li>serial clock = fosc/4</li>  
            	</ul>
              <p>For XMEGA family of MCUs change the <b>X</b> in the routine prototype with <b>C</b>, <b>D</b>, <b>E</b> or <b>F</b>.</p>
              <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	              <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Note :</b>
                Bear in mind when using MCU's with alternate SPI ports, that this routine will activate standard SPI port. Please, consult the appropriate datasheet.
              </div>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// Initialize the SPI1 module with default settings</i>
SPI1_Init();</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi1_init_advanced">SPI1_Init_Advanced</h3>


    <!-- tabela: SPI1_Init_Advanced -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <i>// for MCUs without alternate SPI ports</i><br>   
            <p><b>void</b> SPI1_Init_Advanced(<b>char</b> mode, <b>char</b> fcy_div, <b>char</b> clock_and_edge);</p>
          
            <i>// for MCUs with alternate SPI ports</i><br>
            <p><b>void</b> SPI1_Init_Advanced(<b>char</b> mode, <b>char</b> fcy_div, <b>char</b> clock_and_edge, <b>char</b> alt_pinout);</p>

            <i>// for XMEGA family of MCUs</i>
            <p><b>void</b> SPIx_Init_Advanced(<b>char</b> mode, <b>char</b> fcy_div, <b>char</b> clock_and_edge);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <ul>
            <li>Configures and initializes <acronym title="Serial Peripheral Interface">SPI</acronym>. <code>SPI1_Init_Advanced</code> or <code>SPI1_Init</code> needs to be called before using other functions of <acronym title="Serial Peripheral Interface">SPI</acronym> Library.</li>
            <li>For XMEGA family of MCUs change the <b>X</b> in the routine prototype with <b>C</b>, <b>D</b>, <b>E</b> or <b>F</b>.</li>
            <li>Parameters <code>mode</code>, <code>fcy_div</code>, <code>clock_and_edge</code> and <code>alt_port</code> determine the work mode for SPI, and can have the following values:</li>
            	<ul>
                <table>
                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>

								  <tr align="center">                  	
                  	<td colspan=2><b>SPI mode constants:</b></td>
                  </tr>
             
                  <tr align="center">
										<td><code>Master mode</code></td>
										<td><code>_SPI_MASTER</code></td>
                  </tr>
             
                  <tr align="center">
										<td><code>Slave mode</code></td>
										<td><code>_SPI_SLAVE</code></td>
                  </tr>
                  
                  <tr align="center">	
										<td colspan=2><b>Clock rate select constants:</b></td>
                  </tr>
									
									<tr align="center">
										<td><code>Sck = Fosc/4, Master mode</code></td>
										<td><code>_SPI_FCY_DIV4</code></td>
                  </tr>
									
									<tr align="center">
										<td><code>Sck = Fosc/16, Master mode</code></td>
										<td><code>_SPI_FCY_DIV16</code></td>
                  </tr>
									
									<tr align="center">
										<td><code>Sck = Fosc/64, Master mode</code></td>
										<td><code>_SPI_FCY_DIV64</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Sck = Fosc/128, Master mode</code></td>
										<td><code>_SPI_FCY_DIV128</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Sck = Fosc/2, Master mode</code></td>
										<td><code>_SPI_FCY_DIV2</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Sck = Fosc/8, Master mode</code></td>
										<td><code>_SPI_FCY_DIV8</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Sck = Fosc/32, Master mode</code></td>
										<td><code>_SPI_FCY_DIV32</code></td>
                  </tr>
                  
                  <tr align="center">	
                  	<td colspan=2><b>SPI clock polarity and phase constants:</b></td>
                  </tr>
									
									<tr align="center">
										<td><code>Clock idle level is low, sample on rising edge</code></td>
										<td><code>_SPI_CLK_LO_LEADING</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Clock idle level is low, sample on falling edge</code></td>
										<td><code>_SPI_CLK_LO_TRAILING</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Clock idle level is high, sample on rising edge</td>
										<td><code>_SPI_CLK_HI_LEADING</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Clock idle level is high, sample on falling edge</code></td>
										<td><code>_SPI_CLK_HI_TRAILING</code></td>
                  </tr>


                  <tr align="center">	
                  	<td colspan=2><b>Alternate SPI port settings:</b></td>
                  </tr>
									
									<tr align="center">
										<td><code>Set standard SPI port as active</code></td>
										<td><code>_SPI_STD_PINOUT</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Set alternate SPI port as active</code></td>
										<td><code>_SPI_ALT_PINOUT</code></td>
                  </tr>
                  
                </table> 
              </ul>
              <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	              <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Note :</b>
              <ul>
                <li>Some SPI clock speeds are not supported by all AVR MCUs and these are: <code>Fosc/2</code>, <code>Fosc/8</code>, <code>Fosc/32</code>. Please consult appropriate datasheet.</li>
                <li>For alternate SPI port function and use, please consult appropriate datasheet.</li>
              </ul>        
              </div>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<i>// Set SPI to the Master Mode, clock = Fosc/32 , clock idle level is high, data sampled on falling edge:</i>
SPI1_Init_Advanced(_SPI_MASTER, _SPI_FCY_DIV32, _SPI_CLK_HI_TRAILING);

<i>// Set SPI to the Master Mode, clock = Fosc/4 , clock idle level is low, data sampled on rising edge, alternate SPI port selected:</i>
SPI1_Init_Advanced(_SPI_MASTER, _SPI_FCY_DIV4, _SPI_CLK_LO_LEADING, _SPI_ALT_PINOUT);
</pre>										 
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi1_read">SPI1_Read</h3>


    <!-- tabela: SPI1_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned short</b> SPI1_Read(<b>unsigned short</b> buffer);</p>
            <i>// for XMEGA family of MCUs</i>
            <p><b>unsigned short</b> SPIx_Read(<b>unsigned short</b> buffer);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Returns the received data.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one byte from the SPI bus.</p>
            <p>Parameters : 
            	<ul>
            		<li><code>buffer:</code> dummy data for clock generation (see device Datasheet for SPI modules implementation details)</li>
            	</ul>
            <p>For XMEGA family of MCUs change the <b>X</b> in the routine prototype with <b>C</b>, <b>D</b>, <b>E</b> or <b>F</b>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See  
            	<a href="#spi1_init">SPI1_Init</a> and <a href="#spi1_init_advanced">SPI1_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// read a byte from the SPI bus</i> 
<b>char</b> take, dummy1;
...
take = SPI1_Read(dummy1);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi1_write">SPI1_Write</h3>


    <!-- tabela: SPI1_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI1_Write(<b>unsigned short</b> data_);</p>
            <i>// for XMEGA family of MCUs</i>
            <p><b>void</b> SPIx_Write(<b>unsigned short</b> data_);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Writes byte via the SPI bus.</p>
            <p>Parameters :</p>
            	<ul>
            		<li><code>data_:</code> data to be sent</li>
            	</ul>
            <p>For XMEGA family of MCUs change the <b>X</b> in the routine prototype with <b>C</b>, <b>D</b>, <b>E</b> or <b>F</b>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See <a href="#spi1_init">SPI1_Init</a> and <a href="#spi1_init_advanced">SPI1_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// write a byte to the SPI bus</i>
<b>char</b> buffer;
...
SPI1_Write(buffer);</pre>

          </td>
        </tr>

      </tbody>

    </table>



    <!-- kraj tabele -->

    <!-- -->

    <h3 id="spi_set_active">SPI_Set_Active</h3>


    <!-- tabela: Spi_Set_Active -->

    <table class="routine" width="100%">


      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Set_Active(<b>char</b> (*read_ptr)(<b>char</b>), <b>void</b>(*write_ptr)(<b>char</b>))</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets the active SPI module which will be used by the <acronym title="Serial Peripheral Interface">SPI</acronym> routines.</p>
            <p>Parameters : 
            	<ul>
            		<li><code>read_ptr:</code> <a href="#spi1_read">SPI1_Read</a> handler</li>
            		<li><code>write_ptr:</code> <a href="#spi1_write">SPI1_Write</a> handler</li>
            	</ul>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
          	<p>Routine is available only for MCUs with multiple SPI modules.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the 
            	<a href="#spi1_init">SPI1_Init</a>, <a href="#spi1_init_advanced">SPI1_Init_Advanced</a><p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
SPI_Set_Active(&SPI2_Read, &SPI2_Write); <i>// Sets the SPI2 module active</i> </pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- -->


    <h3 id="spi_read_gen">SPI_Read</h3>


    <!-- tabela: SPI_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned short</b> SPI_Read(<b>unsigned short</b> buffer);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Returns the received data.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one byte from the SPI bus.</p>
            <p>This is a generic routine which uses the active SPI module previously activated by the <a href="#spi_set_active">SPI_Set_Active</a> routine.</p>
            <p>Parameters : 
            	<ul>
            		<li><code>buffer:</code> dummy data for clock generation (see device Datasheet for SPI modules implementation details)</li>
            	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See  
            	<a href="#spi1_init">SPI1_Init</a> and <a href="#spi1_init_advanced">SPI1_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// read a byte from the SPI bus</i> 
<b>char</b> take, dummy1;
...
take = SPI_Read(dummy1);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_write_gen">SPI_Write</h3>


    <!-- tabela: SPI_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Write(<b>unsigned short</b> data_);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Writes byte via the SPI bus.</p>
            <p>This is a generic routine which uses the active SPI module previously activated by the <a href="#spi_set_active">SPI_Set_Active</a> routine.</p>
            <p>Parameters :</p>
            	<ul>
            		<li><code>data_:</code> data to be sent</li>
            	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See <a href="#spi1_init">SPI1_Init</a> and <a href="#spi1_init_advanced">SPI1_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// write a byte to the SPI bus</i>
<b>char</b> buffer;
...
SPI_Write(buffer);</pre>

          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele --> 

    <h3>Library Example</h3>

    <p>The code demonstrates how to use <acronym title="Serial Peripheral Interface">SPI</acronym> library functions for communication between SPI module of the MCU and Microchip's MCP4921 12-bit D/A converter</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<i>// DAC module connections</i>
<b>sbit</b> Chip_Select <b>at</b> PORTB0_bit;
<b>sbit</b> Chip_Select_Direction <b>at</b> DDB0_bit;
<i>// End DAC module connections</i>

<b>unsigned int</b> value;                     

<b>void</b> InitMain() {
  DDA0_bit = 0;                           <i>// Set PA0 pin as input</i>
  DDA1_bit = 0;                           <i>// Set PA1 pin as input</i>
  Chip_Select = 1;                        <i>// Deselect DAC</i>
  Chip_Select_Direction = 1;              <i>// Set CS# pin as Output</i>
  SPI1_Init();                            <i>// Initialize SPI1 module</i>
}

<i>// DAC increments (0..4095) --&#62; output voltage (0..Vref)</i>
<b>void</b> DAC_Output(<b>unsigned int</b> valueDAC) {
  <b>char</b> temp;
 
  Chip_Select = 0;                        <i>// Select DAC chip</i>
  
  <i>// Send High Byte                                         </i>
  temp = (valueDAC &#62;&#62; 8) &#38; 0x0F;          <i>// Store valueDAC[11..8] to temp[3..0]</i>
  temp |= 0x30;                           <i>// Define DAC setting, see MCP4921 datasheet</i>
  SPI1_Write(temp);                       <i>// Send high byte via SPI</i>
  
  <i>// Send Low Byte</i>
  temp = valueDAC;                        <i>// Store valueDAC[7..0] to temp[7..0]</i>
  SPI1_Write(temp);                       <i>// Send low byte via SPI</i>
  
  Chip_Select = 1;                        <i>// Deselect DAC chip</i>
}

<b>void</b> main() {

  InitMain();                             <i>// Perform main initialization</i>

  value = 2048;                           <i>// When program starts, DAC gives</i>
                                          <i>//   the output in the mid-range</i>
                                          
  <b>while</b> (1) {                             <i>// Endless loop</i>

    <b>if</b> ((PINA0_bit) &#38;&#38; (value &#60; 4095)) {  <i>// If PA0 button is pressed</i>
      value++;                            <i>//   increment value</i>
      }
    <b>else</b> {
      <b>if</b> ((PINA1_bit) &#38;&#38; (value &#62; 0)) {   <i>// If PA1 button is pressed</i>
        value--;                          <i>//   decrement value</i>
        }
      }

    DAC_Output(value);                    <i>// Send value to DAC chip</i>
    Delay_ms(1);                          <i>// Slow down key repeat pace</i>
  }
}</pre>


    <h3>HW Connection</h3>

    <p class="center"><img alt="SPI connection" src="img/schemes/scheme_spi.gif"></p>
    <p class="center small">SPI HW connection</p>


      <div class="feedback">
      Copyright (c) 2002-2017 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="http://www.mikroe.com/en/support/">Send us feedback!</a>
    </div>

    <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
