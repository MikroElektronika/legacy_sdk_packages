
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>

<title>CANSPI Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2007.">
<meta name="Author" content="Marko Jovanovic & Marko Zivanovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_dspic.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>




	




<link rel="stylesheet" type="text/css" href="css/print.css" media="print">


<style type="text/css">
#top {
  background:transparent url(template/background_C_dsPIC.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">CANSPI Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_libraries.htm">mikroC PRO for dsPIC30/33 and PIC24 Libraries</A> &gt; <A href="mikroC_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="can_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="compact_flash_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">


    <a name="top_of_page"><h2><acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Library</h2></a>


    <p>The <acronym title="Serial Peripheral Interface">SPI</acronym> module is available with a number of the dsPIC30/33 and PIC24 MCUs. The mikroC PRO for dsPIC30/33 and PIC24 provides a library (driver) for working with  mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Add-on boards (with MCP2515 or MCP2510) via <acronym title="Serial Peripheral Interface">SPI</acronym> interface.</p>
    <p>In the mikroC PRO for dsPIC30/33 and PIC24, each routine of the <acronym title="Controller Area Network">CAN</acronym> library has its own <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> counterpart with identical syntax. For more information on Controller Area Network, consult the <a href="can_library.htm">CAN Library</a>. Note that an effective communication speed depends on <acronym title="Serial Peripheral Interface">SPI</acronym> and certainly is slower than "real" <acronym title="Controller Area Network">CAN</acronym>.</p>
    <p> Data transfer rates depend on distance. For example, 1 Mbit/s can be achieved at network lengths below 40m while 250 Kbit/s can be achieved at network lengths below 250m. The greater distance the lower maximum bitrate that can be achieved. The lowest bitrate defined by the standard is 200Kbit/s.
 Cables used are shielded twisted pairs.</p>
    <p><acronym title="Controller Area Network">CAN</acronym> supports two message formats:</p>
    <ul>
      <li>Standard format, with 11 identifier bits and</li>
      <li>Extended format, with 29 identifier bits</li>
    </ul>
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">	  
	    <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b>
      <ul>
      	<li>Consult the <acronym title="Controller Area Network">CAN</acronym> standard about <acronym title="Controller Area Network">CAN</acronym> bus termination resistance.</li>
      	<li>An effective <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> communication speed depends on <acronym title="Serial Peripheral Interface">SPI</acronym> and certainly is slower than &#8220;real&#8221; <acronym title="Controller Area Network">CAN</acronym>.</li>
	    	<li>The library uses the <acronym title="Serial Peripheral Interface">SPI</acronym> module for communication. User must initialize appropriate <acronym title="Serial Peripheral Interface">SPI</acronym> module before using the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Library.</li>
        <li>For MCUs with multiple <acronym title="Serial Peripheral Interface">SPI</acronym> modules it is possible to initialize both of them and then switch by using the <a href="spi_library.htm#spi_set_active">SPI_Set_Active</a> routine.</li>		
      <li>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
        <li><acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module refers to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Add-on board connected to <acronym title="Serial Peripheral Interface">SPI</acronym> module of <acronym title="MicroController Unit">MCU</acronym>.</li>

      </ul>
    </div>

    <p></p>
    <h3>Library Dependency Tree</h3>
    <p></p>
    <img alt="CANSPI Library Dependency Tree" src="img/dependencies/canspi_dependency.gif">  

    <p></p>
    <h3>External dependencies of <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Library</h3>

    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Library:</th>
          <th width="30%">Description : </th>
          <th width="30%">Example : </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> CanSpi_CS;</code></td>
          <td align="left">Chip Select line.</td>
          <td align="left"><code><b>sbit</b> CanSpi_CS <b>at</b> RF0_bit;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> CanSpi_Rst;</code></td>
          <td align="left">Reset line.</td>
          <td align="left"><code><b>sbit</b> CanSpi_Rst <b>at</b> RF1_bit;</code></td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> CanSpi_CS_Direction;</code></td>
          <td align="left">Direction of the Chip Select pin.</td>
          <td align="left"><code><b>sbit</b> CanSpi_CS_Direction <b>at</b> TRISF0_bit;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> CanSpi_Rst_Direction;</code></td>
          <td align="left">Direction of the Reset pin.</td>
          <td align="left"><code><b>sbit</b> CanSpi_Rst_Direction <b>at</b> TRISF1_bit;</code></td>
        </tr>
        
      </tbody>

    </table>

    <!-- kraj tabele -->
    
    <h3>Library Routines</h3>

    <ul>
      <li><a href="#canspi1setoperationmode">CANSPISetOperationMode</a></li>
      <li><a href="#canspi1getoperationmode">CANSPIGetOperationMode</a></li>
      <li><a href="#canspi1init">CANSPIInitialize</a></li>
      <li><a href="#canspi1setbaudrate">CANSPISetBaudRate</a></li>
      <li><a href="#canspi1setmask">CANSPISetMask</a></li>
      <li><a href="#canspi1setfilter">CANSPISetFilter</a></li>
      <li><a href="#canspi1read">CANSPIRead</a></li>
      <li><a href="#canspi1write">CANSPIWrite</a></li>
    </ul>


    <!-- -->


    <h3 id="canspi1setoperationmode">CANSPISetOperationMode</h3>


    <!-- tabela: CANSPISetOperationMode -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANSPISetOperationMode(<b>char</b> mode, <b>char</b> WAIT);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module to requested mode.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            	<ul>
              	<li><code>mode:</code> <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module operation mode. Valid values: <code>CANSPI_OP_MODE</code> constants.  See <a href="#canspi_op_mode">CANSPI_OP_MODE</a> constants.</li>
              	<li><code>WAIT:</code> <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> mode switching verification request. If <code>WAIT == 0</code>, the call is non-blocking. The function does not verify if the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module is switched to requested mode or not. Caller must use <code>CANSPIGetOperationMode</code> to verify correct operation mode before performing mode specific operation. If <code>WAIT != 0</code>, the call is blocking &#8211; the function won&#8217;t &#8220;return&#8221; until the requested mode is set.</li>
              </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// set the CANSPI module into configuration mode (wait inside CANSPISetOperationMode until this mode is set)</i>
CANSPISetOperationMode(_CANSPI_MODE_CONFIG, 0xFF);
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1getoperationmode">CANSPIGetOperationMode</h3>


    <!-- tabela: CANSPIGetOperationMode -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>char</b> CANSPIGetOperationMode();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>The function returns current operation mode of the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module.
						   Check <a href="#canspi_op_mode">CANSPI_OP_MODE</a> constants or device datasheet for operation mode codes.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Current operation mode.</p>
          </td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// check whether the CANSPI module is in Normal mode and if it is do something.</i>
<b>if</b> (CANSPIGetOperationMode() == _CANSPI_MODE_NORMAL) {
  ...
}</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1init">CANSPIInitialize</h3>


    <!-- tabela: CANSPIInit -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANSPIInitialize(<b>char</b> SJW, <b>char</b> BRP, <b>char</b> PHSEG1, <b>char</b> PHSEG2, <b>char</b> PROPSEG, <b>char</b> CANSPI_CONFIG_FLAGS);</p>
          </td>
        </tr>
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Initializes the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module.</p>
            <p>Stand-Alone <acronym title="Controller Area Network">CAN</acronym> controller in the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module is set to:
              <ul>
              	<li> Disable CAN capture</li>
              	<li> Continue CAN operation in Idle mode</li>
              	<li> Do not abort pending transmissions</li>
                <li> Fcan clock : 4*Tcy (Fosc)</li>
                <li> Baud rate is set according to given parameters</li>
                <li> CAN mode : Normal</li>
                <li> Filter and mask registers IDs are set to zero</li>
                <li> Filter and mask message frame type is set according to <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> value</li>
              </ul>
            </p>
            <p><code>SAM</code>, <code>SEG2PHTS</code>, <code>WAKFIL</code> and <code>DBEN</code> bits are set according to <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> value.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>SJW</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>BRP</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>PHSEG1</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>PHSEG2</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>PROPSEG</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>CANSPI_CONFIG_FLAGS</code> is formed from predefined constants. See <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>External dependencies of the library from the top of the page must be defined before using this function.</p>
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p>The <acronym title="Serial Peripheral Interface">SPI</acronym> module needs to be initialized. See the <a href="spi_library.htm#spi_init">SPIx_Init</a> and <a href="spi_library.htm#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
            <p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<i>// CANSPI module connections</i>
<b>sbit</b> CanSpi_CS  <b>at</b>  RF0_bit;
<b>sbit</b> CanSpi_CS_Direction  <b>at</b>  TRISF0_bit;
<b>sbit</b> CanSpi_Rst <b>at</b>  RF1_bit;
<b>sbit</b> CanSpi_Rst_Direction <b>at</b>  TRISF1_bit;
<i>// End CANSPI module connections</i>

<i>// initialize the CANSPI module with the appropriate baud rate and message acceptance flags along with the sampling rules</i>
<b>char</b> CANSPI_Init_Flags;
  ...  
  CANSPI_Init_Flags = _CANSPI_CONFIG_SAMPLE_THRICE &#38;  <i>// form value to be used</i>
                      _CANSPI_CONFIG_PHSEG2_PRG_ON &#38;  <i>// with CANSPIInitialize</i>
                      _CANSPI_CONFIG_XTD_MSG &#38;
                      _CANSPI_CONFIG_DBL_BUFFER_ON &#38;
                      _CANSPI_CONFIG_VALID_XTD_MSG;
  ...
  SPI1_Init();                               <i>// initialize SPI1 module</i>
  CANSPIInitialize(1,3,3,3,1,CANSPI_Init_Flags);   <i>// initialize external CANSPI module</i></pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <ul>
              <li><acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> mode NORMAL will be set on exit.</li>
            </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1setbaudrate">CANSPISetBaudRate</h3>


    <!-- tabela: CANSPISetBaudRate -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>
      	
      	<tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANSPISetBaudRate(<b>char</b> SJW, <b>char</b> BRP, <b>char</b> PHSEG1, <b>char</b> PHSEG2, <b>char</b> PROPSEG, <b>char</b> CANSPI_CONFIG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module baud rate. Due to complexity of the <acronym title="Controller Area Network">CAN</acronym> protocol, you can not simply force a bps value. Instead, use this function when the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module is in Config mode.</p>
            <p><code>SAM</code>, <code>SEG2PHTS</code> and <code>WAKFIL</code> bits are set according to <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> value. Refer to datasheet for details.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>SJW</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>BRP</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>PHSEG1</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>PHSEG2</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>PROPSEG</code> as defined in MCU's datasheet (CAN Module)</li>
              <li><code>CANSPI_CONFIG_FLAGS</code> is formed from predefined constants. See <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module must be in Config mode, otherwise the function will be ignored. See <a href="#canspi1setoperationmode">CANSPISetOperationMode</a>.</p>
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// set required baud rate and sampling rules</i>
<b>char</b> CANSPI_CONFIG_FLAGS;
...  
CANSPISetOperationMode(_CANSPI_MODE_CONFIG,0xFF);           <i>// set CONFIGURATION mode (CANSPI module must be in config mode for baud rate settings)</i>
CANSPI_CONFIG_FLAGS = _CANSPI_CONFIG_SAMPLE_THRICE &#38;
                   _CANSPI_CONFIG_PHSEG2_PRG_ON &#38;
                   _CANSPI_CONFIG_STD_MSG       &#38;
                   _CANSPI_CONFIG_DBL_BUFFER_ON &#38;
                   _CANSPI_CONFIG_VALID_XTD_MSG &#38;
                   _CANSPI_CONFIG_LINE_FILTER_OFF;
CANSPISetBaudRate(1, 1, 3, 3, 1, CANSPI_CONFIG_FLAGS);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1setmask">CANSPISetMask</h3>


    <!-- tabela: CANSPISetMask -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANSPISetMask(<b>unsigned short</b> CANSPI_MASK, <b>long</b> value, <b>unsigned short</b> CANSPI_CONFIG_FLAGS);</p>
          </td>
        </tr>


        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures mask for advanced filtering of messages. The parameter <code>value</code> is bit-adjusted to the appropriate mask registers.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>CANSPI_MASK:</code> CAN module mask number. Valid values: <code>CANSPI_MASK</code> constants. See <a href="#canspi_mask">CANSPI_MASK</a> constants.</li>
              <li><code>val:</code> mask register value. This value is bit-adjusted to appropriate buffer mask registers</li>
              <li><code>CANSPI_CONFIG_FLAGS:</code> selects type of message to filter. Valid values: 
              	    <ul>
              	         <li><code>_CANSPI_CONFIG_ALL_VALID_MSG</code>,</li>
              	         <li><code>_CANSPI_CONFIG_MATCH_MSG_TYPE &#38; _CANSPI_CONFIG_STD_MSG</code>,</li>
              	         <li><code>_CANSPI_CONFIG_MATCH_MSG_TYPE &#38; _CANSPI_CONFIG_XTD_MSG</code>.</li>
              	    </ul>     	
              	   See <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> constants.
              </li>	    
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module must be in Config mode, otherwise the function will be ignored. See <a href="#canspi1setoperationmode">CANSPISetOperationMode</a>.</p>
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// set the appropriate filter mask and message type value</i>
CANSPISetOperationMode(_CANSPI_MODE_CONFIG,0xFF);              <i>// set CONFIGURATION mode (CANSPI module must be in config mode for mask settings)</i>

<i>// Set all B1 mask bits to 1 (all filtered bits are relevant):
// Note that -1 is just a cheaper way to write 0xFFFFFFFF.
// Complement will do the trick and fill it up with ones.</i>
CANSPISetMask(_CANSPI_MASK_B1, -1, _CANSPI_CONFIG_MATCH_MSG_TYPE &#38; _CANSPI_CONFIG_XTD_MSG);
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1setfilter">CANSPISetFilter</h3>


    <!-- tabela: CANSPISetFilter -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANSPISetFilter(<b>unsigned short</b> CANSPI_FILTER, <b>long</b> value, <b>unsigned short</b> CANSPI_CONFIG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures message filter. The parameter <code>value</code> is bit-adjusted to the appropriate filter registers.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>CANSPI_FILTER:</code> CAN module filter number. Valid values: <code>CANSPI_FILTER</code> constants. See <a href="#canspi_filter">CANSPI_FILTER</a> constants.</li>
              <li><code>val:</code> filter register value. This value is bit-adjusted to appropriate filter registers </li>
              <li><code>CANSPI_CONFIG_FLAGS:</code> selects type of message to filter. Valid values: <code>_CANSPI_CONFIG_STD_MSG</code> and <code>_CANSPI_CONFIG_XTD_MSG</code>. See <a href="#canspi_config_flags">CANSPI_CONFIG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module must be in Config mode, otherwise the function will be ignored. See <a href="#canspi1setoperationmode">CANSPISetOperationMode</a>.</p>
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// set the appropriate filter value and message type</i>
CANSPISetOperationMode(_CANSPI_MODE_CONFIG,0xFF);                  <i>// set CONFIGURATION mode (CANSPI module must be in config mode for filter settings)</i>

<i>// Set id of filter B1_F1 to 3 :</i>
CANSPISetFilter(_CANSPI_FILTER_B1_F1, 3, _CANSPI_CONFIG_XTD_MSG);
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1read">CANSPIRead</h3>


    <!-- tabela: CANSPIRead -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned short</b> CANSPIRead(<b>long</b> *id, <b>unsigned short</b> *data, <b>unsigned short</b> *datalen, <b>unsigned short</b> *CANSPI_RX_MSG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>If at least one full Receive Buffer is found, it will be processed in the following way:
            	<ul>
            		<li> Message ID is retrieved  and stored to location provided by the <code>id</code> parameter</li>
            		<li> Message data is retrieved  and stored to a buffer provided by the <code>data</code> parameter</li>
            		<li> Message length is retrieved  and stored to location provided by the <code>dataLen</code> parameter</li>
            		<li> Message flags are retrieved  and stored to location provided by the <code>CANSPI_RX_MSG_FLAGS</code> parameter</li>
            	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>id:</code> message identifier address</li>
              <li><code>data:</code> an array of bytes up to 8 bytes in length</li>
              <li><code>dataLen:</code> data length address</li>
              <li><code>CANSPI_RX_MSG_FLAGS:</code> message flags address. For message receive flags format refer to <code>CANSPI_RX_MSG_FLAGS</code> constants. See <a href="#canspi_rx_msg_flag">CANSPI_RX_MSG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>
            	<ul>
                <li><code>0</code> if nothing is received</li>
                <li><code>0xFFFF</code> if one of the Receive Buffers is full (message received)</li>
              </ul>
            </p>  
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module must be in a mode in which receiving is possible.  See <a href="#canspi1setoperationmode">CANSPISetOperationMode</a>.</p>
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// check the CANSPI module for received messages. If any was received do something.</i> 
<b>unsigned short</b> msg_rcvd, rx_flags, data_len;
<b>char</b> data[8];
<b>unsigned long</b> msg_id;
...
CANSPISetOperationMode(_CANSPI_MODE_NORMAL,0xFF);                  <i>// set NORMAL mode (CANSPI module must be in mode in which receive is possible)</i>
...
rx_flags = 0;                                                <i>// clear message flags</i>
if (msg_rcvd = CANSPIRead(msg_id, data, data_len, rx_flags)) {
  ...
}
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi1write">CANSPIWrite</h3>


    <!-- tabela: CANSPIWrite -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned short</b> CANSPIWrite(<b>long</b> id, <b>unsigned short</b> *data, <b>unsigned short</b> datalen, <b>unsigned short</b> CANSPI_TX_MSG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>If at least one empty Transmit Buffer is found, the function sends message in the queue for transmission.</p>
   
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>id:</code> CAN message identifier. Valid values: 11 or 29 bit values, depending on message type (standard or extended)</li>
              <li><code>Data:</code> data to be sent</li>
              <li><code>DataLen:</code> data length. Valid values: <code>0..8</code></li>
              <li><code>CANSPI_TX_MSG_FLAGS:</code> message flags. Valid values: <code>CANSPI_TX_MSG_FLAGS</code> constants. See <a href="#canspi_tx_msg_flag">CANSPI_TX_MSG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>
            	<ul>
                <li><code>0</code> if all Transmit Buffers are busy</li>
                <li><code>0xFFFF</code> if at least one Transmit Buffer is available</li>
              </ul>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module must be in mode in which transmission is possible.  See <a href="#canspi1setoperationmode">CANSPISetOperationMode</a>.</p>
            <p>The <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> routines are supported only by <acronym title="MicroController Unit">MCU</acronym>s with the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> has to be properly connected to mikroElektronika's <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Extra Board or similar hardware. See connection example at the bottom of this page.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// send message extended CAN message with the appropriate ID and data</i>
<b>unsigned short</b> tx_flags;
<b>char</b> data[8];
<b>long</b> msg_id;
...
CANSPISetOperationMode(CANSPI_MODE_NORMAL,0xFF);                  <i>// set NORMAL mode (CANSPI must be in mode in which transmission is possible)</i>

tx_flags = _CANSPI_TX_PRIORITY_0 &#38; _CANSPI_TX_XTD_FRAME;   <i>// set message flags</i>
CANSPIWrite(msg_id, data, 2, tx_flags);
</pre>

          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>
      
      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="canspi_constants"><acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Constants</h3>
    <p>There is a number of constants predefined in the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> library. You need to be familiar with them in order to be able to use the library effectively. Check the example at the end of the chapter.</p>

    <h4 id="canspi_op_mode">CANSPI_OP_MODE Constants</h4>
    <p>The <code>CANSPI_OP_MODE</code> constants define <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> operation mode. Function <a href="#canspi1setoperationmode">CANSPISetOperationMode</a> expects one of these as it's argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CANSPI_MODE_BITS   = 0xE0,   <i>// Use this to access opmode  bits</i>
    _CANSPI_MODE_NORMAL = 0x00,
    _CANSPI_MODE_SLEEP  = 0x20,
    _CANSPI_MODE_LOOP   = 0x40,
    _CANSPI_MODE_LISTEN = 0x60,
    _CANSPI_MODE_CONFIG = 0x80;</pre>


    <p></p>
    <h4 id="canspi_config_flags">CANSPI_CONFIG_FLAGS Constants</h4>
    <p>The <code>CANSPI_CONFIG_FLAGS</code> constants define flags related to the <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> module configuration. The functions <a href="#canspi1init">CANSPIInit</a>, <a href="#canspi1setbaudrate">CANSPISetBaudRate</a>,  <a href="#canspi1setmask">CANSPISetMask</a> and <a href="#canspi1setfilter">CANSPISetFilter</a> expect one of these (or a bitwise combination) as their argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CANSPI_CONFIG_DEFAULT        = 0xFF,   <i>// 11111111</i>

    _CANSPI_CONFIG_PHSEG2_PRG_BIT = 0x01,
    _CANSPI_CONFIG_PHSEG2_PRG_ON  = 0xFF,   <i>// XXXXXXX1</i>
    _CANSPI_CONFIG_PHSEG2_PRG_OFF = 0xFE,   <i>// XXXXXXX0</i>

    _CANSPI_CONFIG_LINE_FILTER_BIT = 0x02,
    _CANSPI_CONFIG_LINE_FILTER_ON  = 0xFF,   <i>// XXXXXX1X</i>
    _CANSPI_CONFIG_LINE_FILTER_OFF = 0xFD,   <i>// XXXXXX0X</i>

    _CANSPI_CONFIG_SAMPLE_BIT      = 0x04,
    _CANSPI_CONFIG_SAMPLE_ONCE     = 0xFF,   <i>// XXXXX1XX</i>
    _CANSPI_CONFIG_SAMPLE_THRICE   = 0xFB,   <i>// XXXXX0XX</i>

    _CANSPI_CONFIG_MSG_TYPE_BIT    = 0x08,
    _CANSPI_CONFIG_STD_MSG         = 0xFF,   <i>// XXXX1XXX</i>
    _CANSPI_CONFIG_XTD_MSG         = 0xF7,   <i>// XXXX0XXX</i>

    _CANSPI_CONFIG_DBL_BUFFER_BIT  = 0x10,
    _CANSPI_CONFIG_DBL_BUFFER_ON   = 0xFF,   <i>// XXX1XXXX</i>
    _CANSPI_CONFIG_DBL_BUFFER_OFF  = 0xEF,   <i>// XXX0XXXX</i>

    _CANSPI_CONFIG_MSG_BITS        = 0x60,
    _CANSPI_CONFIG_ALL_MSG         = 0xFF,   <i>// X11XXXXX</i>
    _CANSPI_CONFIG_VALID_XTD_MSG   = 0xDF,   <i>// X10XXXXX</i>
    _CANSPI_CONFIG_VALID_STD_MSG   = 0xBF,   <i>// X01XXXXX</i>
    _CANSPI_CONFIG_ALL_VALID_MSG   = 0x9F;   <i>// X00XXXXX</i></pre>

    <p>You may use bitwise AND (<code>&#38;</code>) to form config byte out of these values. For example:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
init = _CANSPI_CONFIG_SAMPLE_THRICE &#38;
       _CANSPI_CONFIG_PHSEG2_PRG_ON &#38;
       _CANSPI_CONFIG_STD_MSG       &#38;
       _CANSPI_CONFIG_DBL_BUFFER_ON &#38;
       _CANSPI_CONFIG_VALID_XTD_MSG &#38;
       _CANSPI_CONFIG_LINE_FILTER_OFF;
...
CANSPIInit(1, 1, 3, 3, 1, init);   <i>// initialize <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym></i></pre>


    <h4 id="canspi_tx_msg_flag">CANSPI_TX_MSG_FLAGS Constants</h4>
    <p><code>CANSPI_TX_MSG_FLAGS</code> are flags related to transmission of a <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> message:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CANSPI_TX_PRIORITY_BITS = 0x03,
    _CANSPI_TX_PRIORITY_0    = 0xFC,   <i>// XXXXXX00</i>
    _CANSPI_TX_PRIORITY_1    = 0xFD,   <i>// XXXXXX01</i>
    _CANSPI_TX_PRIORITY_2    = 0xFE,   <i>// XXXXXX10</i>
    _CANSPI_TX_PRIORITY_3    = 0xFF,   <i>// XXXXXX11</i>

    _CANSPI_TX_FRAME_BIT     = 0x08,
    _CANSPI_TX_STD_FRAME     = 0xFF,    <i>// XXXXX1XX</i>
    _CANSPI_TX_XTD_FRAME     = 0xF7,    <i>// XXXXX0XX</i>

    _CANSPI_TX_RTR_BIT       = 0x40,
    _CANSPI_TX_NO_RTR_FRAME  = 0xFF,    <i>// X1XXXXXX</i>
    _CANSPI_TX_RTR_FRAME     = 0xBF;    <i>// X0XXXXXX</i></pre>

    <p>You may use bitwise AND (<code>&#38;</code>) to adjust the appropriate flags. For example:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<i>// form value to be used as sending message flag :</i>
send_config = _CANSPI_TX_PRIORITY_0 &#38;
              _CANSPI_TX_XTD_FRAME  &#38;
              _CANSPI_TX_NO_RTR_FRAME;
...
CANSPIWrite(id, data, 1, send_config);</pre>

    <h4 id="canspi_rx_msg_flag">CANSPI_RX_MSG_FLAGS Constants</h4>
    <p><code>CANSPI_RX_MSG_FLAGS</code> are flags related to reception of <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> message. If a particular bit is set then corresponding meaning is TRUE or else it will be FALSE.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CANSPI_RX_FILTER_BITS  = 0x07,   <i>// Use this to access filter bits</i>
    _CANSPI_RX_FILTER_1     = 0x00,
    _CANSPI_RX_FILTER_2     = 0x01,
    _CANSPI_RX_FILTER_3     = 0x02,
    _CANSPI_RX_FILTER_4     = 0x03,
    _CANSPI_RX_FILTER_5     = 0x04,
    _CANSPI_RX_FILTER_6     = 0x05,

    _CANSPI_RX_OVERFLOW     = 0x08,   <i>// Set if Overflowed else cleared</i>
    _CANSPI_RX_INVALID_MSG  = 0x10,   <i>// Set if invalid else cleared</i>
    _CANSPI_RX_XTD_FRAME    = 0x20,   <i>// Set if XTD message else cleared</i>
    _CANSPI_RX_RTR_FRAME    = 0x40,  <i>// Set if RTR message else cleared</i>
    _CANSPI_RX_DBL_BUFFERED = 0x80;  <i>// Set if this message was hardware double-buffered</i>
</pre>

    <p>You may use bitwise AND (<code>&#38;</code>) to adjust the appropriate flags. For example:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>if</b> (MsgFlag &#38; _CANSPI_RX_OVERFLOW != 0) {
  ...
  <i>// Receiver overflow has occurred.
  // We have lost our previous message.</i>
}</pre>

    <h4 id="canspi_mask">CANSPI_MASK Constants</h4>
    <p>The <code>CANSPI_MASK</code> constants define mask codes. Function <a href="#canspi1setmask">CANSPISetMask</a> expects one of these as it's argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CANSPI_MASK_B1 = 0,
    _CANSPI_MASK_B2 = 1;</pre>

    <p></p>
    <h4 id="canspi_filter">CANSPI_FILTER Constants</h4>
    <p>The <code>CANSPI_FILTER</code> constants  define filter codes.  Functions
    <a  href="#canspi1setfilter">CANSPISetFilter</a>   expects one  of  these as
    it's argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CANSPI_FILTER_B1_F1 = 0,
    _CANSPI_FILTER_B1_F2 = 1,
    _CANSPI_FILTER_B2_F1 = 2,
    _CANSPI_FILTER_B2_F2 = 3,
    _CANSPI_FILTER_B2_F3 = 4,
    _CANSPI_FILTER_B2_F4 = 5;</pre>

    <!-- -->

    <p></p>
    <h3>Library Example</h3>

    <p>This is a simple demonstration of <acronym title="Controller Area Network via Serial Peripheral Interface">CANSPI</acronym> Library routines usage.
    	 First node initiates the communication with the second node by sending some data to its address. The second node responds by sending back the data 
    	 incremented by 1. First node then does the same and sends incremented data back to second node, etc.</p>

    <p>Code for the first CANSPI node:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>sbit</b> CanSpi_CS <b>at</b> RF0_bit;                                <i>// Chip select line</i>
<b>sbit</b> CanSpi_Rst <b>at</b> RF1_bit;                               <i>// Reset line</i>
<b>sbit</b> CanSpi_CS_Direction <b>at</b> TRISF0_bit;                   <i>// Direction of the Chip Select pin</i>
<b>sbit</b> CanSpi_Rst_Direction <b>at</b> TRISF1_bit;                  <i>// Direction of the Reset pin</i>

<b>unsigned int</b> Can_Init_Flags, Can_Send_Flags, Can_Rcv_Flags;  <i>// Can flags</i>
<b>unsigned int</b> Rx_Data_Len;                                    <i>// Received data length in bytes</i>
<b>char</b> RxTx_Data[8];                                           <i>// Can rx/tx data buffer</i>
<b>char</b> Msg_Rcvd;                                               <i>// Reception flag</i>
<b>unsigned long</b> Tx_ID, Rx_ID;                                  <i>// Can rx and tx ID</i>

<b>void</b> main() {
  ADPCFG = 0xFFFF;
  PORTB = 0;
  TRISB = 0;

  Can_Init_Flags = 0;                              <i>//</i>
  Can_Send_Flags = 0;                              <i>// Clear flags</i>
  Can_Rcv_Flags  = 0;                              <i>//</i>
  
  Can_Send_Flags = _CANSPI_TX_PRIORITY_0 &#38;         <i>// Form value to be used</i>
                   _CANSPI_TX_XTD_FRAME &#38;          <i>//  with CANSPI1Write</i>
                   _CANSPI_TX_NO_RTR_FRAME;
                   
  Can_Init_Flags = _CANSPI_CONFIG_SAMPLE_THRICE &#38;  <i>// Form value to be used</i>
                   _CANSPI_CONFIG_PHSEG2_PRG_ON &#38;  <i>//  with CANSPI1Init</i>
                   _CANSPI_CONFIG_XTD_MSG &#38;
                   _CANSPI_CONFIG_DBL_BUFFER_ON &#38;
                   _CANSPI_CONFIG_VALID_XTD_MSG;

  SPI1_Init();                                                     <i>// Initialize SPI1 module</i>
  CANSPIInitialize(1,3,3,3,1,Can_Init_Flags);                      <i>// Initialize external CANSPI module</i>

  CANSPISetOperationMode(_CANSPI_MODE_CONFIG,0xFF);                <i>// Set CONFIGURATION mode</i>

  CANSPISetMask(_CANSPI_MASK_B1,-1,_CANSPI_CONFIG_XTD_MSG);        <i>// Set all mask1 bits to ones</i>
  CANSPISetMask(_CANSPI_MASK_B2,-1,_CANSPI_CONFIG_XTD_MSG);        <i>// Set all mask2 bits to ones</i>
  CANSPISetFilter(_CANSPI_FILTER_B2_F4,3,_CANSPI_CONFIG_XTD_MSG);  <i>// Set id of filter B1_F1 to 3</i>
  
  CANSPISetOperationMode(_CANSPI_MODE_NORMAL,0xFF);                <i>// Set NORMAL mode</i>

  RxTx_Data[0] = 9;                                                <i>// Set initial data to be sent</i>
  
  Tx_ID = 12111;                                                   <i>// Set transmit ID</i>
  
  CANSPIWrite(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                <i>// Send initial message</i>
  
  <b>while</b>(1) {                                                                   <i>// Endless loop</i>
    Msg_Rcvd = CANSPIRead(&#38;Rx_ID , RxTx_Data , &#38;Rx_Data_Len, &#38;Can_Rcv_Flags);  <i>// Receive message</i>
    <b>if</b> ((Rx_ID == 3u) &#38;&#38; Msg_Rcvd) {                                           <i>// If message received check id</i>
      PORTB = RxTx_Data[0];                                                    <i>// Id correct, output data at PORTB</i>
      RxTx_Data[0]++;                                                         <i>// Increment received data</i>
      Delay_ms(10);
      CANSPIWrite(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                        <i>// Send incremented data back</i>
    }
  }
}
</pre>		

    <p>Code for the second CANSPI node:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>sbit</b> CanSpi_CS <b>at</b> RF0_bit;                                <i>// Chip select line</i>
<b>sbit</b> CanSpi_Rst <b>at</b> RF1_bit;                               <i>// Reset line</i>
<b>sbit</b> CanSpi_CS_Direction <b>at</b> TRISF0_bit;                   <i>// Direction of the Chip Select pin</i>
<b>sbit</b> CanSpi_Rst_Direction <b>at</b> TRISF1_bit;                  <i>// Direction of the Reset pin</i>

<b>unsigned int</b> Can_Init_Flags, Can_Send_Flags, Can_Rcv_Flags;  <i>// Can flags</i>
<b>unsigned int</b> Rx_Data_Len;                                    <i>// Received data length in bytes</i>
<b>char</b> RxTx_Data[8];                                           <i>// Can rx/tx data buffer</i>
<b>char</b> Msg_Rcvd;                                               <i>// Reception flag</i>
<b>unsigned long</b> Tx_ID, Rx_ID;                                  <i>// Can rx and tx ID</i>

<b>void</b> main() {
  ADPCFG = 0xFFFF;
  PORTB = 0;
  TRISB = 0;

  Can_Init_Flags = 0;                              <i>//</i>
  Can_Send_Flags = 0;                              <i>// Clear flags</i>
  Can_Rcv_Flags  = 0;                              <i>//</i>
  
  Can_Send_Flags = _CANSPI_TX_PRIORITY_0 &#38;         <i>// Form value to be used</i>
                   _CANSPI_TX_XTD_FRAME &#38;          <i>//  with CANSPI1Write</i>
                   _CANSPI_TX_NO_RTR_FRAME;
                   
  Can_Init_Flags = _CANSPI_CONFIG_SAMPLE_THRICE &#38;  <i>// Form value to be used</i>
                   _CANSPI_CONFIG_PHSEG2_PRG_ON &#38;  <i>//  with CANSPI1Init</i>
                   _CANSPI_CONFIG_XTD_MSG &#38;
                   _CANSPI_CONFIG_DBL_BUFFER_ON &#38;
                   _CANSPI_CONFIG_VALID_XTD_MSG &#38;
                   _CANSPI_CONFIG_LINE_FILTER_OFF;

  SPI1_Init();                                                        <i>// Initialize SPI1 module</i>
  CANSPIInitialize(1,3,3,3,1,Can_Init_Flags);                         <i>// Initialize CANSPI module</i>

  CANSPISetOperationMode(_CANSPI_MODE_CONFIG,0xFF);                   <i>// Set CONFIGURATION mode</i>

  CANSPISetMask(_CANSPI_MASK_B1,-1,_CANSPI_CONFIG_XTD_MSG);           <i>// Set all mask1 bits to ones</i>
  CANSPISetMask(_CANSPI_MASK_B2,-1,_CANSPI_CONFIG_XTD_MSG);           <i>// Set all mask2 bits to ones</i>
  CANSPISetFilter(_CANSPI_FILTER_B2_F3,12111,_CANSPI_CONFIG_XTD_MSG); <i>// Set id of filter B1_F1 to 3</i>
  
  CANSPISetOperationMode(_CANSPI_MODE_NORMAL,0xFF);                   <i>// Set NORMAL mode</i>
  
  Tx_ID = 3;                                                          <i>// Set tx ID</i>
  
  <b>while</b> (1) {                                                                  <i>// Endless loop</i>
    Msg_Rcvd = CANSPIRead(&#38;Rx_ID , RxTx_Data , &#38;Rx_Data_Len, &#38;Can_Rcv_Flags);  <i>// Receive message</i>
    <b>if</b> ((Rx_ID == 12111u) &#38;&#38; Msg_Rcvd) {                                       <i>// If message received check id</i>
      PORTB = RxTx_Data[0];                                                    <i>// Id correct, output data at PORTB</i>
      RxTx_Data[0]++;                                                         <i>// Increment received data</i>
      CANSPIWrite(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                        <i>// Send incremented data back</i>
    }
  }
}
</pre>	
		<!-- -->
		
    <h3>HW Connection</h3>

    <p class="center"><img alt="Example of interfacing CAN transceiver MCP2510 with MCU and bus" src="img/Schemes/scheme_canspi.gif"></p>
    <p class="center small">Example of interfacing CAN transceiver MCP2510 with MCU via <acronym title="Serial Peripheral Interface">SPI</acronym> interface</p>


    <div class="feedback">
      Copyright (c) 2002-2018 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3">Send us feedback!</a>
    </div>

      <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
