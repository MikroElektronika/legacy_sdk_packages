
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>

<title>CAN Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroelektronika.co.yu">

<link rel="stylesheet" type="text/css" href="css/help_c_dspic.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>




	




<link rel="stylesheet" type="text/css" href="css/print.css" media="print">


<style type="text/css">
#top {
  background:transparent url(template/background_C_dsPIC.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">CAN Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_libraries.htm">mikroC PRO for dsPIC30/33 and PIC24 Libraries</A> &gt; <A href="mikroC_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="adc_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="canspi_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">


    <a name="top_of_page"><h2><acronym title="Controller Area Network">CAN</acronym> Library</h2></a>


    <p>The mikroC PRO for dsPIC30/33 and PIC24 provides a library (driver) for working with the dsPIC30F <acronym title="Controller Area Network">CAN</acronym> module.</p>
    <p>The <acronym title="Controller Area Network">CAN</acronym> is a very robust protocol that has error detection and signalization, selfâ€“checking and fault confinement. Faulty <acronym title="Controller Area Network">CAN</acronym> data and remote frames are re-transmitted automatically, similar to the Ethernet.</p>
    <p> Data transfer rates depend on distance. For example, 1 Mbit/s can be achieved at network lengths below 40m while 250 Kbit/s can be achieved at network lengths below 250m. The greater distance the lower maximum bitrate that can be achieved. The lowest bitrate defined by the standard is 200Kbit/s. Cables used are shielded twisted pairs.</p>
    <p><acronym title="Controller Area Network">CAN</acronym> supports two message formats:</p>
    <ul>
      <li>Standard format, with 11 identifier bits and</li>
      <li>Extended format, with 29 identifier bits</li>
    </ul>
    
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">	  
      <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b>
      <ul>
        <li>Consult the <acronym title="Controller Area Network">CAN</acronym> standard about <acronym title="Controller Area Network">CAN</acronym> bus termination resistance.</li>    
    	  <li><acronym title="Controller Area Network">CAN</acronym> library routines require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	  <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
      </ul>
    </div>

    <!-- -->

    <p></p>
    <h3>Library Routines</h3>

    <ul>
      <li><a href="#can1setoperationmode">CANxSetOperationMode</a></li>
      <li><a href="#can1getoperationmode">CANxGetOperationMode</a></li>
      <li><a href="#can1initialize">CANxInitialize</a></li>
      <li><a href="#can1setbaudrate">CANxSetBaudRate</a></li>
      <li><a href="#can1setmask">CANxSetMask</a></li>
      <li><a href="#can1setfilter">CANxSetFilter</a></li>
      <li><a href="#can1read">CANxRead</a></li>
      <li><a href="#can1write">CANxWrite</a></li>
    </ul>
    

    <!-- -->


    <h3 id="can1setoperationmode">CANxSetOperationMode</h3>


    <!-- tabela: CANxSetOperationMode -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANxSetOperationMode(<b>unsigned int</b> mode, <b>unsigned int</b> WAIT);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets the <acronym title="Controller Area Network">CAN</acronym> module to requested mode.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
         	  <ul>
              <li><code>mode:</code> <acronym title="Controller Area Network">CAN</acronym> module operation mode. Valid values: <code>CAN_OP_MODE</code> constants. See <a href="#can_op_mode">CAN_OP_MODE</a> constants.</li>
              <li><code>WAIT:</code> <acronym title="Controller Area Network">CAN</acronym> mode switching verification request. If <code>WAIT == 0</code>, the call is non-blocking. The function does not verify if the <acronym title="Controller Area Network">CAN</acronym> module is switched to requested mode or not. Caller must use <a href="#can1getoperationmode">CANxGetOperationMode</a> to verify correct operation mode before performing mode specific operation. If <code>WAIT != 0</code>, the call is blocking &#8211; the function won&#8217;t &#8220;return&#8221; until the requested mode is set.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// set the CAN1 module into configuration mode (wait inside CAN1SetOperationMode until this mode is set)</i>
CAN1SetOperationMode(_CAN_MODE_CONFIG, 0xFF);</pre>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1getoperationmode">CANxGetOperationMode</h3>


    <!-- tabela: CANxGetOperationMode -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> CANxGetOperationMode();</p>
          </td>
        </tr>
 
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>The function returns current operation mode of the <acronym title="Controller Area Network">CAN</acronym> module. See <a href="#can_op_mode">CAN_OP_MODE</a> constants or device datasheet for operation mode codes.</p>
          </td>
        </tr>
 
         <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>
 
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Current operation mode.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// check whether the CAN1 module is in Normal mode and if it is then do something.</i>
<b>if</b> (CAN1GetOperationMode() == _CAN_MODE_NORMAL) {
  ...
}</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1initialize">CANxInitialize</h3>


    <!-- tabela: CANxInitialize -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANxInitialize(<b>unsigned int</b> SJW, <b>unsigned int</b> BRP, <b>unsigned int</b> PHSEG1, <b>unsigned int</b> PHSEG2, <b>unsigned int</b> PROPSEG, <b>unsigned int</b> CAN_CONFIG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Initializes the <acronym title="Controller Area Network">CAN</acronym> module.</p>
            <p>The internal dsPIC30F <acronym title="Controller Area Network">CAN</acronym> module is set to :</p>
              <ul>
              	<li> Disable <acronym title="Controller Area Network">CAN</acronym> capture</li>
              	<li> Continue <acronym title="Controller Area Network">CAN</acronym> operation in Idle mode</li>
              	<li> Do not abort pending transmissions</li>
                <li> Fcan clock : 4*Tcy (Fosc)</li>
                <li> Baud rate is set according to given parameters</li>
                <li> <acronym title="Controller Area Network">CAN</acronym> mode is set to Normal</li>
                <li> Filter and mask registers IDs are set to zero</li>
                <li> Filter and mask message frame type is set according to <code>CAN_CONFIG_FLAGS</code> value</li>
              </ul>
            <p><code>SAM</code>, <code>SEG2PHTS</code>, <code>WAKFIL</code> and <code>DBEN</code> bits are set according to <code>CAN_CONFIG_FLAGS</code> value.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>SJW</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>BRP</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>PHSEG1</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>PHSEG2</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>PROPSEG</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>CAN_CONFIG_FLAGS</code> is formed from predefined constants. See <a href="#can_config_flag">CAN_CONFIG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// initialize the CAN1 module with appropriate baud rate and message acceptance flags along with the sampling rules</i>
<b>unsigned int</b> can_config_flags;
...  
can_config_flags = _CAN_CONFIG_SAMPLE_THRICE &#38;            <i>// Form value to be used</i>
                   _CAN_CONFIG_PHSEG2_PRG_ON &#38;            <i>// with CAN1Initialize</i>
                   _CAN_CONFIG_STD_MSG &#38;
                   _CAN_CONFIG_DBL_BUFFER_ON &#38;
                   _CAN_CONFIG_MATCH_MSG_TYPE &#38;
                   _CAN_CONFIG_LINE_FILTER_OFF;

CAN1Initialize(1,3,3,3,1,can_config_flags);              <i>// initialize the CAN1 module</i></pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
            <li><acronym title="Controller Area Network">CAN</acronym> mode NORMAL will be set on exit.</li>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1setbaudrate">CANxSetBaudRate</h3>


    <!-- tabela: CANxSetBaudRate -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANxSetBaudRate(<b>unsigned int</b> SJW, <b>unsigned int</b> BRP, <b>unsigned int</b> PHSEG1, <b>unsigned int</b> PHSEG2, <b>unsigned int</b> PROPSEG, <b>unsigned int</b> CAN_CONFIG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets <acronym title="Controller Area Network">CAN</acronym> baud rate. Due to complexity of the <acronym title="Controller Area Network">CAN</acronym> protocol, you can not simply force a bps value. Instead, use this function when <acronym title="Controller Area Network">CAN</acronym> is in Config mode. Refer to datasheet for details.</p>
            <p><code>SAM</code>, <code>SEG2PHTS</code> and <code>WAKFIL</code> bits are set according to <code>CAN_CONFIG_FLAGS</code> value. Refer to datasheet for details.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>SJW</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>BRP</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>PHSEG1</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>PHSEG2</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>PROPSEG</code> as defined in MCU's datasheet (<acronym title="Controller Area Network">CAN</acronym> Module)</li>
              <li><code>CAN_CONFIG_FLAGS</code> is formed from predefined constants. See <a href="#can_config_flag">CAN_CONFIG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
						<p><acronym title="Controller Area Network">CAN</acronym> must be in Config mode, otherwise the function will be ignored. See <a href="#can1setoperationmode">CANxSetOperationMode</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// set required baud rate and sampling rules</i>
<b>unsigned int</b> can_config_flags;
...  
CAN1SetOperationMode(_CAN_MODE_CONFIG,0xFF);              <i>// set CONFIGURATION mode (CAN1 module must be in config mode for baud rate settings)</i>

can_config_flags = _CAN_CONFIG_SAMPLE_THRICE &#38;            <i>// Form value to be used</i>
                   _CAN_CONFIG_PHSEG2_PRG_ON &#38;            <i>// with CAN1SetBaudRate</i>
                   _CAN_CONFIG_STD_MSG &#38;
                   _CAN_CONFIG_DBL_BUFFER_ON &#38;
                   _CAN_CONFIG_MATCH_MSG_TYPE &#38;
                   _CAN_CONFIG_LINE_FILTER_OFF;

CAN1SetBaudRate(1,3,3,3,1,can_config_flags);             <i>// set the CAN1 module baud rate</i></pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1setmask">CANxSetMask</h3>


    <!-- tabela: CANxSetMask -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANxSetMask(<b>unsigned int</b> CAN_MASK, <b>long</b> val, <b>unsigned int</b> CAN_CONFIG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Function sets mask for advanced filtering of messages. Given <code>value</code> is bit adjusted to appropriate buffer mask registers.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>CAN_MASK:</code> <acronym title="Controller Area Network">CAN</acronym> module mask number. Valid values: <code>CAN_MASK</code> constants. See <a href="#can_mask">CAN_MASK</a> constants.</li>
              <li><code>val:</code> mask register value. This value is bit-adjusted to appropriate buffer mask registers</li>
              <li><code>CAN_CONFIG_FLAGS:</code> selects type of message to filter. Valid values: 
                <ul>
              	  <li><code>_CAN_CONFIG_ALL_VALID_MSG</code>,</li>
              	  <li><code>_CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_STD_MSG</code>,</li>
              	  <li><code>_CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_XTD_MSG</code>.</li>
              	</ul>     	
              	See <a href="#can_config_flag">CAN_CONFIG_FLAGS</a> constants.
              </li>	    
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
						<p><acronym title="Controller Area Network">CAN</acronym> must be in Config mode, otherwise the function will be ignored. See <a href="#can1setoperationmode">CANxSetOperationMode</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// set appropriate filter mask and message type value</i>
CAN1SetOperationMode(_CAN_MODE_CONFIG,0xFF);              <i>// set CONFIGURATION mode (CAN1 module must be in config mode for mask settings)</i>

<i>// Set all B1 mask bits to 1 (all filtered bits are relevant):
// Note that -1 is just a cheaper way to write 0xFFFFFFFF.
// Complement will do the trick and fill it up with ones.</i>
CAN1SetMask(_CAN_MASK_B1, -1, _CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_XTD_MSG);
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1setfilter">CANxSetFilter</h3>


    <!-- tabela: CANxSetFilter -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> CANxSetFilter(<b>unsigned int</b> CAN_FILTER, <b>long</b> val, <b>unsigned int</b> CAN_CONFIG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Function sets message filter. Given <code>value</code> is bit adjusted to appropriate buffer mask registers.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>CAN_FILTER:</code> <acronym title="Controller Area Network">CAN</acronym> module filter number. Valid values: <code>CAN_FILTER</code> constants. See <a href="#can_filter">CAN_FILTER</a> constants.</li>
              <li><code>val:</code> filter register value. This value is bit-adjusted to appropriate filter registers </li>
              <li><code>CAN_CONFIG_FLAGS:</code> selects type of message to filter. Valid values: <code>_CAN_CONFIG_STD_MSG</code> and <code>_CAN_CONFIG_XTD_MSG</code>. See <a href="#can_config_flag">CAN_CONFIG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
						<p><acronym title="Controller Area Network">CAN</acronym> must be in Config mode, otherwise the function will be ignored. See <a href="#can1setoperationmode">CANxSetOperationMode</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// set appropriate filter value and message type</i>
CAN1SetOperationMode(_CAN_MODE_CONFIG,0xFF);                  <i>// set CONFIGURATION mode (CAN1 module must be in config mode for filter settings)</i>

<i>// Set id of filter B1_F1 to 3</i>
CAN1SetFilter(_CAN_FILTER_B1_F1, 3, _CAN_CONFIG_XTD_MSG);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1read">CANxRead</h3>


    <!-- tabela: CANxRead -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> CANxRead(<b>unsigned long</b> *id, <b>char</b> *data_, <b>unsigned int</b> *dataLen, <b>unsigned int</b> *CAN_RX_MSG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>If at least one full Receive Buffer is found, it will be processed in the following way :</p>
            	<ul>
            		<li>Message ID is retrieved and stored to location pointed by <code>id</code> pointer</li>
            		<li>Message data is retrieved and stored to array pointed by <code>data</code> pointer</li>
            		<li>Message length is retrieved and stored to location pointed by <code>dataLen</code> pointer</li>
            		<li>Message flags are retrieved and stored to location pointed by <code>CAN_RX_MSG_FLAGS</code> pointer</li>
            	</ul>		
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>id:</code> message identifier address</li>
              <li><code>data:</code> an array of bytes up to 8 bytes in length</li>
              <li><code>dataLen:</code> data length address</li>
              <li><code>CAN_RX_MSG_FLAGS:</code> message flags address. For message receive flags format refer to <code>CAN_RX_MSG_FLAGS</code> constants. See <a href="#can_rx_msg_flag">CAN_RX_MSG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>
   
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
              <li><code>0</code> if nothing is received</li>
              <li><code>0xFFFF</code> if one of the Receive Buffers is full (message received)</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
            <p>The <acronym title="Controller Area Network">CAN</acronym> module must be in a mode in which receiving is possible. See <a href="#can1setoperationmode">CANxSetOperationMode</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// check the CAN1 module for received messages. If any was received do something.</i> 
<b>unsigned int</b> msg_rcvd, rx_flags, data_len;
<b>char</b> data[8];
<b>unsigned long</b> msg_id;
...
CAN1SetOperationMode(_CAN_MODE_NORMAL,0xFF);                  <i>// set NORMAL mode (CAN1 module must be in mode in which receive is possible)</i>
...
rx_flags = 0;                                                <i>// clear message flags</i>
if (msg_rcvd = CAN1Read(&msg_id, data, &data_len, &rx_flags)) {
  ...
}</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can1write">CANxWrite</h3>


    <!-- tabela: CANxWrite -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> CANxWrite(<b>long</b> id, <b>char</b> *data_, <b>unsigned int</b> DataLen, <b>unsigned int</b> CAN_TX_MSG_FLAGS);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>If at least one empty Transmit Buffer is found, the function sends message in the queue for transmission.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>id:</code> <acronym title="Controller Area Network">CAN</acronym> message identifier. Valid values: 11 or 29 bit values, depending on message type (standard or extended)</li>
              <li><code>Data:</code> data to be sent</li>
              <li><code>DataLen:</code> data length. Valid values: <code>0..8</code></li>
              <li><code>CAN_TX_MSG_FLAGS:</code> message flags. Valid values: <code>CAN_TX_MSG_FLAGS</code> constants. See <a href="#can_tx_msg_flag">CAN_TX_MSG_FLAGS</a> constants.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
              <li><code>0</code> if all Transmit Buffers are busy</li>
              <li><code>0xFFFF</code> if at least one Transmit Buffer is available</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>MCU with the <acronym title="Controller Area Network">CAN</acronym> module.</p>
						<p><acronym title="MicroController Unit">MCU</acronym> must be connected to the <acronym title="Controller Area Network">CAN</acronym> transceiver (MCP2551 or similar) which is connected to the <acronym title="Controller Area Network">CAN</acronym> bus.</p>
            <p>The <acronym title="Controller Area Network">CAN</acronym> module must be in mode in which transmission is possible. See <a href="#can1setoperationmode">CANxSetOperationMode</a>.</p>
					</td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre><i>// send message extended CAN message with appropriate ID and data</i>
<b>unsigned int</b> tx_flags;
<b>char</b> data[8];
<b>unsigned long</b> msg_id;
...
CAN1SetOperationMode(_CAN_MODE_NORMAL,0xFF);                  <i>// set NORMAL mode (CAN1 must be in mode in which transmission is possible)</i>

tx_flags = _CAN_TX_PRIORITY_0 &#38;            
           _CAN_TX_XTD_FRAME &#38;             
           _CAN_TX_NO_RTR_FRAME;                       <i>// set message flags</i>
CAN1Write(msg_id, data, 1, tx_flags);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
          <ul>
        	  <li><acronym title="Controller Area Network">CAN</acronym> library routine require you to specify the module you want to use. To use the desired <acronym title="Controller Area Network">CAN</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>2</b>.</li>
    	      <li>Number of <acronym title="Controller Area Network">CAN</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
          </ul>
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="can_constants"><acronym title="Controller Area Network">CAN</acronym> Constants</h3>
    <p>There is a number of constants predefined in <acronym title="Controller Area Network">CAN</acronym> library. To be able to use the library effectively, you need to be familiar with these. You might want to check the example at the end of the chapter.</p>

    <h4 id="can_op_mode">CAN_OP_MODE Constants</h4>
    <p><code>CAN_OP_MODE</code> constants define <acronym title="Controller Area Network">CAN</acronym> operation mode. Function <a href="#can1setoperationmode">CANxSetOperationMode</a> expects one of these as its argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CAN_MODE_BITS   = 0xE0,   <i>// Use this to access opmode  bits</i>
    _CAN_MODE_NORMAL = 0x00,
    _CAN_MODE_SLEEP  = 0x20,
    _CAN_MODE_LOOP   = 0x40,
    _CAN_MODE_LISTEN = 0x60,
    _CAN_MODE_CONFIG = 0x80;</pre>

    <p></p>
    <h4 id="can_config_flag">CAN_CONFIG_FLAGS Constants</h4>
    <p><code>CAN_CONFIG_FLAGS</code> constants define flags related to <acronym title="Controller Area Network">CAN</acronym> module configuration. Functions <a href="#can1initialize">CANxInitialize</a> and <a href="#can1setbaudrate">CANxSetBaudRate</a> expect one of these (or a bitwise combination) as their argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CAN_CONFIG_DEFAULT         = 0xFF,   <i>// 11111111</i>

    _CAN_CONFIG_PHSEG2_PRG_BIT  = 0x01,
    _CAN_CONFIG_PHSEG2_PRG_ON   = 0xFF,   <i>// XXXXXXX1</i>
    _CAN_CONFIG_PHSEG2_PRG_OFF  = 0xFE,   <i>// XXXXXXX0</i>

    _CAN_CONFIG_LINE_FILTER_BIT = 0x02,
    _CAN_CONFIG_LINE_FILTER_ON  = 0xFF,   <i>// XXXXXX1X</i>
    _CAN_CONFIG_LINE_FILTER_OFF = 0xFD,   <i>// XXXXXX0X</i>

    _CAN_CONFIG_SAMPLE_BIT      = 0x04,
    _CAN_CONFIG_SAMPLE_ONCE     = 0xFF,   <i>// XXXXX1XX</i>
    _CAN_CONFIG_SAMPLE_THRICE   = 0xFB,   <i>// XXXXX0XX</i>

    _CAN_CONFIG_MSG_TYPE_BIT    = 0x08,
    _CAN_CONFIG_STD_MSG         = 0xFF,   <i>// XXXX1XXX</i>
    _CAN_CONFIG_XTD_MSG         = 0xF7,   <i>// XXXX0XXX</i>

    _CAN_CONFIG_DBL_BUFFER_BIT  = 0x10,
    _CAN_CONFIG_DBL_BUFFER_ON   = 0xFF,   <i>// XXX1XXXX</i>
    _CAN_CONFIG_DBL_BUFFER_OFF  = 0xEF,   <i>// XXX0XXXX</i>

    _CAN_CONFIG_MSG_BITS        = 0x60,
    _CAN_CONFIG_ALL_MSG         = 0xFF,   <i>// X11XXXXX</i>
    _CAN_CONFIG_VALID_XTD_MSG   = 0xDF,   <i>// X10XXXXX</i>
    _CAN_CONFIG_VALID_STD_MSG   = 0xBF,   <i>// X01XXXXX</i>
    _CAN_CONFIG_ALL_VALID_MSG   = 0x9F;   <i>// X00XXXXX</i></pre>

    <p>You may use bitwise AND (<code>&#38;</code>) to form config byte out of these values. For example:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
init = _CAN_CONFIG_SAMPLE_THRICE &#38;
       _CAN_CONFIG_PHSEG2_PRG_ON &#38;
       _CAN_CONFIG_STD_MSG       &#38;
       _CAN_CONFIG_DBL_BUFFER_ON &#38;
       _CAN_CONFIG_VALID_XTD_MSG &#38;
       _CAN_CONFIG_LINE_FILTER_OFF;
...
CANInitialize(1, 1, 3, 3, 1, init);   <i>// initialize CAN</i></pre>


    <h4 id="can_tx_msg_flag">CAN_TX_MSG_FLAGS Constants</h4>
    <p><code>CAN_TX_MSG_FLAGS</code> are flags related to transmission of a <acronym title="Controller Area Network">CAN</acronym> message:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CAN_TX_PRIORITY_BITS = 0x03,
    _CAN_TX_PRIORITY_0    = 0xFC,   <i>// XXXXXX00</i>
    _CAN_TX_PRIORITY_1    = 0xFD,   <i>// XXXXXX01</i>
    _CAN_TX_PRIORITY_2    = 0xFE,   <i>// XXXXXX10</i>
    _CAN_TX_PRIORITY_3    = 0xFF,   <i>// XXXXXX11</i>

    _CAN_TX_FRAME_BIT     = 0x08,
    _CAN_TX_STD_FRAME     = 0xFF,   <i>// XXXXX1XX</i>
    _CAN_TX_XTD_FRAME     = 0xF7,   <i>// XXXXX0XX</i>

    _CAN_TX_RTR_BIT       = 0x40,
    _CAN_TX_NO_RTR_FRAME  = 0xFF,   <i>// X1XXXXXX</i>
    _CAN_TX_RTR_FRAME     = 0xBF;   <i>// X0XXXXXX</i></pre>

    <p>You may use bitwise AND (<code>&#38;</code>) to adjust the appropriate flags. For example:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<i>// form value to be used with CANSendMessage:</i>
send_config = _CAN_TX_PRIORITY_0 &#38;
              _CAN_TX_XTD_FRAME  &#38;
              _CAN_TX_NO_RTR_FRAME;
...
CANSendMessage(id, data, 1, send_config);</pre>

    <h4 id="can_rx_msg_flag">CAN_RX_MSG_FLAGS Constants</h4>
    <p><code>CAN_RX_MSG_FLAGS</code> are flags related to reception of <acronym title="Controller Area Network">CAN</acronym> message. If a particular bit is set; corresponding meaning is TRUE or else it will be FALSE.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CAN_RX_FILTER_BITS  = 0x07,  <i>// Use this to access filter bits</i>
    _CAN_RX_FILTER_1     = 0x00,
    _CAN_RX_FILTER_2     = 0x01,
    _CAN_RX_FILTER_3     = 0x02,
    _CAN_RX_FILTER_4     = 0x03,
    _CAN_RX_FILTER_5     = 0x04,
    _CAN_RX_FILTER_6     = 0x05,
    _CAN_RX_OVERFLOW     = 0x08,  <i>// Set if Overflowed else cleared</i>
    _CAN_RX_INVALID_MSG  = 0x10,  <i>// Set if invalid else cleared</i>
    _CAN_RX_XTD_FRAME    = 0x20,  <i>// Set if XTD message else cleared</i>
    _CAN_RX_RTR_FRAME    = 0x40,  <i>// Set if RTR message else cleared</i>
    _CAN_RX_DBL_BUFFERED = 0x80;  <i>// Set if this message was hardware double-buffered</i></pre>

    <p>You may use bitwise AND (<code>&#38;</code>) to adjust the appropriate flags. For example:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>if</b> (MsgFlag &#38; _CAN_RX_OVERFLOW != 0) {
  ...
  <i>// Receiver overflow has occurred.
  // We have lost our previous message.</i>
}</pre>

    <h4 id="can_mask">CAN_MASK Constants</h4>
    <p><code>CAN_MASK</code> constants define mask codes. Function <a href="#can1setmask">CANxSetMask</a> expects one of these as its argument:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CAN_MASK_B1 = 0,
    _CAN_MASK_B2 = 1;</pre>

    <p></p>
    <h4 id="can_filter">CAN_FILTER Constants</h4>
    <p><code>CAN_FILTER</code> constants define filter codes. Function <a href="#can1setfilter">CANxSetFilter</a> expects one of these as its argument:</p>
<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>const unsigned int</b>
    _CAN_FILTER_B1_F1 = 0,
    _CAN_FILTER_B1_F2 = 1,
    _CAN_FILTER_B2_F1 = 2,
    _CAN_FILTER_B2_F2 = 3,
    _CAN_FILTER_B2_F3 = 4,
    _CAN_FILTER_B2_F4 = 5;</pre>


    <h3>Library Example</h3>

    <p>The example demonstrates <acronym title="Controller Area Network">CAN</acronym> protocol. The 1st node initiates the communication with the 2nd node by sending some
      data to its address. The 2nd node responds by sending back the data incremented by 1. The 1st node then does the same and sends incremented data
      back to the 2nd node, etc.</p>

    <p>Code for the first CAN node:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>unsigned int</b> Can_Init_Flags, Can_Send_Flags, Can_Rcv_Flags;  <i>// can flags</i>
<b>unsigned int</b> Rx_Data_Len;                                    <i>// received data length in bytes</i>
<b>char</b> RxTx_Data[8];                                           <i>// can rx/tx data buffer</i>
<b>char</b> Msg_Rcvd;                                               <i>// reception flag</i>
<b>unsigned long</b> Tx_ID, Rx_ID;                                  <i>// can rx and tx ID</i>

<b>void</b> main() {

  ADPCFG = 0xFFFF;
  PORTB = 0;
  TRISB = 0;

  Can_Init_Flags = 0;                            <i>//</i>
  Can_Send_Flags = 0;                            <i>// clear flags</i>
  Can_Rcv_Flags  = 0;                            <i>//</i>

  Can_Send_Flags = _CAN_TX_PRIORITY_0 &#38;           <i>// Form value to be used</i>
                   _CAN_TX_XTD_FRAME &#38;            <i>//  with CAN2Write</i>
                   _CAN_TX_NO_RTR_FRAME;

  Can_Init_Flags = _CAN_CONFIG_SAMPLE_THRICE &#38;    <i>// Form value to be used</i>
                   _CAN_CONFIG_PHSEG2_PRG_ON &#38;    <i>//  with CAN2Initialize</i>
                   _CAN_CONFIG_XTD_MSG &#38;
                   _CAN_CONFIG_DBL_BUFFER_ON &#38;
                   _CAN_CONFIG_MATCH_MSG_TYPE &#38;
                   _CAN_CONFIG_LINE_FILTER_OFF;

  RxTx_Data[0] = 9;                              <i>// set initial data to be sent</i>
  CAN2Initialize(1,3,3,3,1,Can_Init_Flags);      <i>// initialize CAN2</i>
  
  CAN2SetOperationMode(_CAN_MODE_CONFIG,0xFF);    <i>// set CONFIGURATION mode</i>

  CAN2SetMask(_CAN_MASK_B1,-1,_CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_XTD_MSG);   <i>// set all mask1 bits to ones</i>
  CAN2SetMask(_CAN_MASK_B2,-1,_CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_XTD_MSG);   <i>// set all mask2 bits to ones</i>
  CAN2SetFilter(_CAN_FILTER_B2_F3,3,_CAN_CONFIG_XTD_MSG);                         <i>// set id of filter B1_F1 to 3</i>
  
  CAN2SetOperationMode(_CAN_MODE_NORMAL,0xFF);                                   <i>// set NORMAL mode</i>
  
  Tx_ID = 12111;                                                                <i>// set transmit ID</i>
  
  CAN2Write(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                               <i>// send initial message</i>
  
  <b>while</b>(1) {                                                                    <i>// endless loop</i>
    Msg_Rcvd = CAN2Read(&#38;Rx_ID , RxTx_Data , &#38;Rx_Data_Len, &#38;Can_Rcv_Flags);     <i>// receive message</i>
    <b>if</b> ((Rx_ID == 3u) &#38;&#38; Msg_Rcvd) {                                            <i>// if message received check id</i>
      PORTB = RxTx_Data[0];                                                     <i>// id correct, output data at PORTB</i>
      RxTx_Data[0]++;                                                          <i>// increment received data</i>
      Delay_ms(10);
      CAN2Write(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                           <i>// send incremented data back</i>
    }
  }
}
</pre>

    <p>Code for the second CAN node:</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<b>unsigned int</b> Can_Init_Flags, Can_Send_Flags, Can_Rcv_Flags;  <i>// can flags</i>
<b>unsigned int</b> Rx_Data_Len;                                    <i>// received data length in bytes</i>
<b>char</b> RxTx_Data[8];                                           <i>// can rx/tx data buffer</i>
<b>char</b> Msg_Rcvd;                                               <i>// reception flag</i>
<b>unsigned long</b> Tx_ID, Rx_ID;                                  <i>// can rx and tx ID</i>


<b>void</b> main() {

  ADPCFG = 0xFFFF;
  PORTB = 0;
  TRISB = 0;

  Can_Init_Flags = 0;                              <i>//</i>
  Can_Send_Flags = 0;                              <i>// clear flags</i>
  Can_Rcv_Flags  = 0;                              <i>//</i>

  Can_Send_Flags = _CAN_TX_PRIORITY_0 &#38;             <i>// Form value to be used</i>
                   _CAN_TX_XTD_FRAME &#38;              <i>//  with CAN2Write</i>
                   _CAN_TX_NO_RTR_FRAME;

  Can_Init_Flags = _CAN_CONFIG_SAMPLE_THRICE &#38;      <i>// Form value to be used</i>
                   _CAN_CONFIG_PHSEG2_PRG_ON &#38;      <i>//  with CAN2Initialize</i>
                   _CAN_CONFIG_XTD_MSG &#38;
                   _CAN_CONFIG_DBL_BUFFER_ON &#38;
                   _CAN_CONFIG_MATCH_MSG_TYPE &#38;
                   _CAN_CONFIG_LINE_FILTER_OFF;

  CAN2Initialize(1,3,3,3,1,Can_Init_Flags);        <i>// initialize CAN2</i>
  
  CAN2SetOperationMode(_CAN_MODE_CONFIG,0xFF);      <i>// set CONFIGURATION mode</i>

  CAN2SetMask(_CAN_MASK_B1,-1,_CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_XTD_MSG);   <i>// set all mask1 bits to ones</i>
  CAN2SetMask(_CAN_MASK_B2,-1,_CAN_CONFIG_MATCH_MSG_TYPE &#38; _CAN_CONFIG_XTD_MSG);   <i>// set all mask2 bits to ones</i>
  CAN2SetFilter(_CAN_FILTER_B1_F1,12111,_CAN_CONFIG_XTD_MSG);                     <i>// set id of filter B1_F1 to 12111</i>

  CAN2SetOperationMode(_CAN_MODE_NORMAL,0xFF);                                   <i>// set NORMAL mode</i>

  Tx_ID = 3;                                                                    <i>// set tx ID</i>

  <b>while</b>(1) {                                                                    <i>// endless loop</i>
    Msg_Rcvd = CAN2Read(&#38;Rx_ID , RxTx_Data , &#38;Rx_Data_Len, &#38;Can_Rcv_Flags);     <i>// receive message</i>
    <b>if</b> ((Rx_ID == 12111u) &#38;&#38; Msg_Rcvd) {                                        <i>// if message received check id</i>
      PORTB = RxTx_Data[0];                                                     <i>// id correct, output data at PORTB</i>
      RxTx_Data[0]++;                                                          <i>// increment received data</i>
      CAN2Write(Tx_ID, RxTx_Data, 1, Can_Send_Flags);                           <i>// send incremented data back</i>
    }
  }
}
</pre>
    <!-- -->


    <h3>HW Connection</h3>

    <p class="center"><img alt="Example of interfacing CAN transceiver with MCU and bus" src="img/Schemes/scheme_can.gif"></p>
    <p class="center small">Example of interfacing <acronym title="Controller Area Network">CAN</acronym> transceiver with MCU and <acronym title="Controller Area Network">CAN</acronym> bus</p>


    <div class="feedback">
      Copyright (c) 2002-2018 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3">Send us feedback!</a>
    </div>

      <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
