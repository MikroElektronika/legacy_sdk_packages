
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>

<title>SPI Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_dspic.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>




	




<link rel="stylesheet" type="text/css" href="css/print.css" media="print">


<style type="text/css">
#top {
  background:transparent url(template/background_C_dsPIC.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">SPI Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_libraries.htm">mikroC PRO for dsPIC30/33 and PIC24 Libraries</A> &gt; <A href="mikroC_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="sound_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="spi_ethernet_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">


    <a name="top_of_page"><h2><acronym title="Serial Peripheral Interface">SPI</acronym> Library</h2></a>


    <p>The <acronym title="Serial Peripheral Interface">SPI</acronym> module is available with all dsPIC30/33 and PIC24 MCUs. 
    	mikroC PRO for dsPIC30/33 and PIC24 provides a library for initializing the Slave mode and initializing and comfortable work with the Master mode. 
    	The dsPIC30/33 and PIC24 can easily communicate with other devices via <acronym title="Serial Peripheral Interface">SPI</acronym>: 
    	A/D converters, D/A converters, MAX7219, LTC1290, etc. </p>
    
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	    <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b> 
      <ul>
    	  <li><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</li>
    	  <li>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
    	  <li>Switching between the <acronym title="Serial Peripheral Interface">SPI</acronym> modules in the <acronym title="Serial Peripheral Interface">SPI</acronym> library is done by the <a href="#spi_set_active">SPI_Set_Active</a> function (both <acronym title="Serial Peripheral Interface">SPI</acronym> modules have to be previously initialized).</li>
      </ul>
    </div> 
    <p></p>
          
    <!-- -->

    <h3>Library Routines</h3>

    <ul>
      <li><a href="#spi_init">SPIx_Init</a></li>
      <li><a href="#spi_init_advanced">SPIx_Init_Advanced</a></li>
      <li><a href="#spi_read">SPIx_Read</a></li>  
      <li><a href="#spi_write">SPIx_Write</a></li>    
      <li><a href="#spi_set_active">SPI_Set_Active</a></li>
    </ul>

    <h4>Generic Routines</h4>

    <ul>
      <li><a href="#spi_read_gen">SPI_Read</a></li>  
      <li><a href="#spi_write_gen">SPI_Write</a></li>    
    </ul>

    <!-- -->


    <h3 id="spi_init">SPIx_Init</h3>


    <!-- tabela: SPIx_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

     <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPIx_Init();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures and initializes the <acronym title="Serial Peripheral Interface">SPI</acronym> module with default settings.</p>
            <p>Default settings: 
            	<ul>
            		<li>Master mode</li>
            		<li>8-bit data mode</li>
            		<li>secondary prescaler 1:1</li>
           	  	<li>primary prescaler 64:1</li>
           		  <li>Slave Select disabled</li>
           	   	<li>input data sampled in  the middle of interval</li>
           	   	<li>clock idle state low</li>
           	  	<li>Serial output data changes on transition from active clock state to idle clock state </li>
              </ul>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have the <acronym title="Serial Peripheral Interface">SPI</acronym>1 module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// Initialize the SPI1 module with default settings</i>
SPI1_Init();</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
    	      <p>Switching between the <acronym title="Serial Peripheral Interface">SPI</acronym> modules in the <acronym title="Serial Peripheral Interface">SPI</acronym> library is done by the <a href="#spi_set_active">SPI_Set_Active</a> function (both <acronym title="Serial Peripheral Interface">SPI</acronym> modules have to be previously initialized).</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_init_advanced">SPIx_Init_Advanced </h3>


    <!-- tabela: SPIx_Init_Advanced -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPIx_Init_Advanced(<b>unsigned</b> master_mode, <b>unsigned</b> mode16, <b>unsigned</b> sec_prescaler, <b>unsigned</b> pri_prescaler, <b>unsigned</b> slave_select, <b>unsigned</b> data_sample, <b>unsigned</b> clock_idle, <b>unsigned</b> edge);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures and initializes the <acronym title="Serial Peripheral Interface">SPI</acronym> module with user defined settings.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>Parameters <code>master_mode</code>, <code>mode16</code>, <code>sec_prescaler</code>, <code>pri_prescaler</code>, <code>slave_select</code>, <code>data_sample</code>, <code>clock_idle</code> and determine the working mode for <acronym title="Serial Peripheral Interface">SPI</acronym>.</p>
               The master_mode parameter determines the working mode for <acronym title="Serial Peripheral Interface">SPI</acronym> module.

                <table>			
									<tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Master/Slave mode</b></td>
                  </tr>

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	
									
									<tr align="center">
										<td><code>Master mode</code></td>
										<td><code>_SPI_MASTER</code></td>
                  </tr>
									
									<tr align="center">
										<td><code>Slave mode</code></td>
										<td><code>_SPI_SLAVE</code></td>
                  </tr>
                </table>

                The parameter <code>mode16</code> determines the data length mode, which can be 8-bits (per transmitions cycle) or 16-bits.
              
                <table>	
									<tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Data Length Mode</b></td>
                  </tr>

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>16-bit mode</code></td>
										<td><code>_SPI_16_BIT</code></td>
                  </tr>

									<tr align="center">
										<td><code>8-bit mode</code></td>
										<td><code>_SPI_8_BIT</code></td>
                  </tr>
                </table>
 
                The parameter <code>sec_prescaler</code> determines the value of the <b>secondary</b> SPI clock prescaler. Used only in the Master Mode.                
                
                <table>                				
									<tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Secondary SPI Clock Prescaler Value</b></td>
                  </tr>

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>										
									
									<tr align="center">
										<td><code>Secondary Prescaler 1:1</code></td>
										<td><code>_SPI_PRESCALE_SEC_1</code></td>
                  </tr>

									<tr align="center">
										<td><code>Secondary Prescaler 1:2</code></td>
										<td><code>_SPI_PRESCALE_SEC_2</code></td>
                  </tr>

									<tr align="center">
										<td><code>Secondary Prescaler 1:3</code></td>
										<td><code>_SPI_PRESCALE_SEC_3</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Secondary Prescaler 1:4</code></td>
										<td><code>_SPI_PRESCALE_SEC_4</code></td>
                  </tr>

									<tr align="center">
										<td><code>Secondary Prescaler 1:5</code></td>
										<td><code>_SPI_PRESCALE_SEC_5</code></td>
                  </tr>

									<tr align="center">
										<td><code>Secondary Prescaler 1:6</code></td>
										<td><code>_SPI_PRESCALE_SEC_6</code></td>
                  </tr>
									
									<tr align="center">
										<td><code>Secondary Prescaler 1:7</code></td>
										<td><code>_SPI_PRESCALE_SEC_7</code></td>
                  </tr>
                  
                  <tr align="center">
										<td><code>Secondary Prescaler 1:8</code></td>
										<td><code>_SPI_PRESCALE_SEC_8</code></td>
                  </tr>
                </table>

                The parameter <code>pri_prescaler</code> determines the value of the <b>primary</b> SPI clock prescaler. Used only in the Master Mode.

                <table>           			
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Primary SPI Clock Prescaler Value</b></td>
                  </tr>

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>Primary Prescaler 1:1</code></td>
										<td><code>_SPI_PRESCALE_PRI_1</code></td>
                  </tr>    

									<tr align="center">
										<td><code>Primary Prescaler 4:1</code></td>
										<td><code>_SPI_PRESCALE_PRI_4</code></td>
                  </tr>  

									<tr align="center">
										<td><code>Primary Prescaler 16:1</code></td>
										<td><code>_SPI_PRESCALE_PRI_16</code></td>
                  </tr>    

									<tr align="center">
										<td><code>Primary Prescaler 64:1</code></td>
										<td><code>_SPI_PRESCALE_PRI_64</code></td>
                  </tr> 
                </table>

                  The parameter <code>slave_select</code> determines whether the Slave Select (SS) pin is used in communication. Valid in the Slave Mode only.

                <table> 				
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Slave Select Enable/Disable</b></td>
                  </tr>  

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>SS used for the Slave mode</code></td>
										<td><code>_SPI_SS_ENABLE</code></td>
                  </tr>    

									<tr align="center">
										<td><code>SS not used for the Slave mode</code></td>
										<td><code>_SPI_SS_DISABLE</code></td>
                  </tr>  
                </table> 
                
                The parameter <code>data_sample</code> determines the sample moment (phase) of input data.
                
                <table> 				
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Data Sampling Moment</b></td>
                  </tr>                

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>Data sampled in the middle of data output time</code></td>
										<td><code>_SPI_DATA_SAMPLE_MIDDLE</code></td>
                  </tr>    

									<tr align="center">
										<td><code>Data sampled at end of data output time</code></td>
										<td><code>_SPI_DATA_SAMPLE_END</code></td>
                  </tr> 
                </table> 

                The parameter <code>clock_idle</code> determines the behaviour of the SPI clock (CLK) line in IDLE phase.

                <table> 				
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Clock Polarity</b></td>
                  </tr>                

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>IDLE state is Lo, ACTIVE state is Hi</code></td>
										<td><code>_SPI_CLK_IDLE_LOW</code></td>
                  </tr>    

									<tr align="center">
										<td><code>IDLE state is Hi, ACTIVE state is Lo</code></td>
										<td><code>_SPI_CLK_IDLE_HIGH</code></td>
                  </tr> 
                </table> 

                The parameter <code>edge</code> determines on which clock edge data is considered to be valid.

                <table> 
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Clock Edge</b></td>
                  </tr>                
                
                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	
								
									<tr align="center">
										<td><code>Data is valid on ACTIVE-to-IDLE transition</code></td>
										<td><code>_SPI_ACTIVE_2_IDLE</code></td>
                  </tr>    

									<tr align="center">
										<td><code>Data is valid on IDLE-to-ACTIVE transition</code></td>
										<td><code>_SPI_IDLE_2_ACTIVE</code></td>
                  </tr> 
                </table> 
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<i>// Set SPI1 to the Master Mode, data length is 16-bit, clock = Fcy (no clock scaling), data sampled in the middle of interval, clock IDLE state high and data transmitted at low to high clock edge:</i>
SPI1_Init_Advanced(_SPI_MASTER, _SPI_16_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);
</pre>										 
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_read">SPIx_Read</h3>


    <!-- tabela: SPIx_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned</b> SPIx_Read(<b>unsigned</b> buffer);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one word or byte (depending on mode set by init routines) from the SPI bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>data_out:</code> dummy data for clock generation (see device Datasheet for SPI modules implementation details)</li>
           	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Received data.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the 
            	<a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// read a byte from the SPI bus</i> 
<b>char</b> take, buffer;
...
take = SPI1_Read(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_write">SPIx_Write</h3>


    <!-- tabela: SPIx_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPIx_Write(<b>unsigned</b> data_out);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Writes one word or byte (depending on mode set by init routines) via the SPI bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>data_out:</code> data to be sent</li>
          	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the <a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// write a byte to the SPI bus</i>
<b>char</b> buffer;
...
SPI1_Write(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->


    <h3 id="spi_set_active">SPI_Set_Active</h3>


    <!-- tabela: SPI_Set_Active -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Set_Active(<b>unsigned</b> (*read_ptr)(<b>unsigned</b>), <b>void</b>(*write_ptr)(<b>unsigned</b>));</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets the active SPI module which will be used by the <a href="#spi_read">SPIx_Read</a> and <a href="#spi_write">SPIx_Write</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>Parameters :</p> 
            	<ul>
            		<li><code>read_ptr:</code> <a href="#spi1_read">SPI1_Read</a> handler</li>
            		<li><code>write_ptr:</code> <a href="#spi1_write">SPI1_Write</a> handler</li>
            	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
          	<p>Routine is available only for MCUs with multiple SPI modules.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the  
            	<a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
SPI_Set_Active(SPI1_Read, SPI1_Write); <i>// Sets the SPI1 module active</i></pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->    

    <!-- -->

    <h3 id="spi_read_gen">SPI_Read</h3>


    <!-- tabela: SPI_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned</b> SPI_Read(<b>unsigned</b> buffer);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one word or byte (depending on mode set by init routines) from the SPI bus.</p>
            <p>This is a generic routine which uses the active SPI module previously activated by the <a href="#spi_set_active">SPI_Set_Active</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>data_out:</code> dummy data for clock generation (see device Datasheet for SPI modules implementation details)</li>
           	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Received data.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the 
            	<a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// read a byte from the SPI bus</i> 
<b>char</b> take, buffer;
...
take = SPI_Read(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_write_gen">SPI_Write</h3>


    <!-- tabela: SPI_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Write(<b>unsigned</b> data_out);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Writes one word or byte (depending on mode set by init routines) via the SPI bus.</p>
            <p>This is a generic routine which uses the active SPI module previously activated by the <a href="#spi_set_active">SPI_Set_Active</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>data_out:</code> data to be sent</li>
          	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the <a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// write a byte to the SPI bus</i>
<b>char</b> buffer;
...
SPI_Write(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->

    <h3>Library Example</h3>

    <p>The code demonstrates how to use <acronym title="Serial Peripheral Interface">SPI</acronym> library functions for communication between SPI2 module of the MCU and MCP4921 DAC chip.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.png" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<i>// DAC module connections</i>
<b>sbit</b> Chip_Select <b>at</b> LATF0_bit;
<b>sbit</b> Chip_Select_Direction <b>at</b> TRISF0_bit;
<i>// End DAC module connections</i>

<b>unsigned int</b> value;                     

<b>void</b> InitMain() {
  TRISB0_bit = 1;                        <i>// Set RB0 pin as input</i>
  TRISB1_bit = 1;                        <i>// Set RB1 pin as input</i>
  Chip_Select = 1;                       <i>// Deselect DAC</i>
  Chip_Select_Direction = 0;             <i>// Set CS# pin as Output</i>
  SPI1_Init();                           <i>// Initialize SPI module</i>
}

<i>// DAC increments (0..4095) --&#62; output voltage (0..Vref)</i>
<b>void</b> DAC_Output(<b>unsigned int</b> valueDAC) {
  <b>char</b> temp;
 
  Chip_Select = 0;                       <i>// Select DAC chip</i>
  
  <i>// Send High Byte                                         </i>
  temp = (valueDAC &#62;&#62; 8) &#38; 0x0F;         <i>// Store valueDAC[11..8] to temp[3..0]</i>
  temp |= 0x30;                          <i>// Define DAC setting, see MCP4921 datasheet</i>
  SPI1_Write(temp);                      <i>// Send high byte via SPI</i>
  
  <i>// Send Low Byte</i>
  temp = valueDAC;                       <i>// Store valueDAC[7..0] to temp[7..0]</i>
  SPI1_Write(temp);                      <i>// Send low byte via SPI</i>
  
  Chip_Select = 1;                       <i>// Deselect DAC chip</i>
}

<b>void</b> main() {

  ADPCFG = 0xFFFF;                        <i>// Configure AN pins as digital</i>

  InitMain();                            <i>// Perform main initialization</i>

  value = 2048;                          <i>// When program starts, DAC gives</i>
                                         <i>//   the output in the mid-range</i>
                                          
 <b>while</b> (1) {                             <i>// Endless loop</i>

    <b>if</b> ((RB0_bit) &#38;&#38; (value &#60; 4095)) {   <i>// If RB0 button is pressed</i>
      value++;                           <i>//   increment value</i>
      }
    <b>else</b> {
      <b>if</b> ((RB1_bit) &#38;&#38; (value &#62; 0)) {    <i>// If RB1 button is pressed</i>
        value--;                         <i>//   decrement value</i>
        }
      }
    DAC_Output(value);                   <i>// Send value to DAC chip</i>
    Delay_ms(1);                         <i>// Slow down key repeat pace</i>
  }
}
</pre>

    <h3>HW Connection</h3>

    <p class="center"><img alt="SPI connection" src="img/Schemes/scheme_spi.gif"></p>
    <p class="center small">SPI HW connection</p>

    <div class="feedback">
      Copyright (c) 2002-2018 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3">Send us feedback!</a>
    </div>

      <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
