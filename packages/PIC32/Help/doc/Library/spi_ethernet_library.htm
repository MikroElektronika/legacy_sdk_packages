
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>

<title>SPI Ethernet Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2007.">
<meta name="Author" content="Marko Jovanovic & Marko Zivanovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_pic32.css">

<script defer type="text/javascript" src="css/pngfix.js"></script>


	






<style type="text/css">
#top {
  background:transparent url(template/background_c_PIC32.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
    padding-left: 15px;
    padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">SPI Ethernet Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_libraries.htm">mikroC PRO for PIC32 Libraries</A> &gt; <A href="mikroC_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="spi_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="spi_ethernet_24j600_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">


    <a name="top_of_page"><h2>SPI Ethernet Library</h2></a>

		<p>The <code>ENC28J60</code> is a stand-alone Ethernet controller with an industry standard Serial Peripheral Interface (SPI). 
		  It is designed to serve as an Ethernet network interface for any controller equipped with <acronym title="Serial Peripheral Interface">SPI</acronym>. </p>
		<p>The <code>ENC28J60</code> meets all of the <acronym title="Institute of Electrical and Electronics Engineers">IEEE</acronym> 802.3 specifications. It incorporates a number of packet filtering
			schemes to limit incoming packets. It also provides an internal <acronym title="Direct Memory Access">DMA</acronym> module for fast data throughput and hardware
			assisted <acronym title="Internet Protocol">IP</acronym> checksum calculations. Communication with the host controller is implemented via two interrupt pins and the <acronym title="Serial Peripheral Interface">SPI</acronym>, with data rates of up to 10 Mb/s. Two dedicated pins are used for <acronym title="Light Emitting Diode">LED</acronym> link and network activity indication.</p>
			
    <p>This library is designed to simplify handling of the underlying hardware (<code>ENC28J60</code>). It works with any PIC32 with  
    	 integrated <acronym title="Serial Peripheral Interface">SPI</acronym> and more than 4 Kb ROM memory. 38 to 40 MHz clock is recommended to get from 8 to 10 Mhz <acronym title="Serial Peripheral Interface">SPI</acronym> 
    	 clock, otherwise PIC32 should be clocked by <code>ENC28J60</code> clock output due to its silicon bug in <acronym title="Serial Peripheral Interface">SPI</acronym> hardware. If you try 
    	 lower PIC32 clock speed, there might be board hang or miss some requests.</p> 
    
    <p>
    	SPI Ethernet library supports:    
    	<ul>
    		<li>IPv4 protocol.</li>
    		<li><acronym title="Address Resolution Protocol">ARP</acronym> requests.</li>
    		<li><acronym title="Internet Control Message Protocol">ICMP</acronym> echo requests.</li>
    		<li><acronym title="User Datagram Protocol">UDP</acronym> requests.</li>
    		<li><acronym title="Transmission Control Protocol">TCP</acronym> requests (no stack, no packet reconstruction).</li>
    		<li><acronym title="Address Resolution Protocol">ARP</acronym> client with cache.</li>
    		<li><acronym title="Domain Name Server">DNS</acronym> client.</li>
    		<li><acronym title="User Datagram Protocol">UDP</acronym> client.</li>
    		<li><acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> client.</li>
    		<li>packet fragmentation is <b>NOT</b> supported.</li>
      </ul>
    </p>
 
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	    <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b>      
      <ul>
      	<li>Global library variable <code>SPI_Ethernet_userTimerSec</code> is used to keep track of time for all client implementations (<acronym title="Address Resolution Protocol">ARP</acronym>, <acronym title="Domain Name Server">DNS</acronym>, <acronym title="User Datagram Protocol">UDP</acronym> and <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym>). It is user responsibility to increment this variable each second in it's code if any of the clients is used.</li>
      	<li>For advanced users there are header files (<code>"eth_enc28j60LibDef.h"</code> and <code>"eth_enc28j60LibPrivate.h"</code>) in Uses folder of the compiler with description of all routines and global variables, relevant to the user, implemented in the SPI Ethernet Library.</li>
      	<li>The appropriate hardware <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using any of the SPI Ethernet library routines. Refer to <a href="spi_library.htm">SPI Library</a>.</li>
      	<li>For MCUs with multiple SPI modules it is possible to initialize them and then switch by using the <code>SPI_Set_Active()</code> routine.</li>
      </ul>
    </div> 


    <p></p>
    <h3>Library Dependency Tree</h3>
    <p></p>
    <img alt="SPI Ethernet Library Dependency Tree" src="img/dependencies/spiethernet_dependency.gif">  
    <p></p>

    <p></p>
    <h3>External dependencies of SPI Ethernet Library</h3>


    <!-- tabela: Ext_depend -->

    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using SPI Ethernet Library:</th>
          <th width="30%">Description: </th>
          <th width="30%">Examples : </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td><code><b>extern sfr atomic sbit</b> SPI_Ethernet_CS;<code></td>
          <td>ENC28J60 chip select pin.</td>
          <td><code><b>sbit</b> SPI_Ethernet_CS <b>at</b> LATF1_bit;</code></td>
        </tr>
 
         <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td><code><b>extern sfr atomic sbit</b> SPI_Ethernet_RST;</code></td>
          <td>ENC28J60 reset pin.</td>
          <td><code><b>sbit</b> SPI_Ethernet_Rst <b>at</b> LATF0_bit;</code></td>
        </tr>
             
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td><code><b>extern sfr atomic sbit</b> SPI_Ethernet_CS_Direction;<code></td>
          <td>Direction of the ENC28J60 chip select pin.</td>
          <td><code><b>sbit</b> SPI_Ethernet_CS_Direction <b>at</b> TRISF1_bit;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td><code><b>extern sfr atomic sbit</b> SPI_Ethernet_RST_Direction;</code></td>
          <td>Direction of the ENC28J60 reset pin.</td>
          <td><code><b>sbit</b> SPI_Ethernet_Rst_Direction <b>at</b> TRISF0_bit;</code></td>
        </tr>
        
      </tbody>

    </table>

    <table class="Dependencies" width="75%" >

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following routines must be defined in all project using SPI Ethernet Library:</th>
          <th width="30%">Description: </th>
          <th width="30%">Examples : </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
      		<td><code><b>unsigned int</b> SPI_Ethernet_UserTCP(<b>unsigned char</b> *remoteHost,
                               <b>unsigned int</b> remotePort,
                               <b>unsigned int</b> localPort,
                               <b>unsigned int</b> reqLength,
                               <b>TEthPktFlags</b> *flags);</code></td>
          <td>TCP request handler.</td>
          <td>Refer to the library example at the bottom of this page for code implementation.</td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td><code><b>unsigned int</b> SPI_Ethernet_UserUDP(<b>unsigned char</b> *remoteHost,
                                  <b>unsigned int</b> remotePort,
                                  <b>unsigned int</b> localPort,
                                  <b>unsigned int</b> reqLength,
                                  <b>TEthPktFlags</b> *flags);</code></td>
          <td>UDP request handler.</td>
          <td>Refer to the library example at the bottom of this page for code implementation.</td>
        </tr>
        
      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3>Library Routines</h3>
	    <ul>
	    	<li><a href="#spi_ethernet_init">SPI_Ethernet_Init</a></li>
	    	<li><a href="#spi_ethernet_enable">SPI_Ethernet_Enable</a></li>
	    	<li><a href="#spi_ethernet_disable">SPI_Ethernet_Disable</a></li>
	    	<li><a href="#spi_ethernet_dopacket">SPI_Ethernet_doPacket</a></li>
	    	<li><a href="#spi_ethernet_putbyte">SPI_Ethernet_putByte</a></li>		
	    	<li><a href="#spi_ethernet_putbytes">SPI_Ethernet_putBytes</a></li>
	    	<li><a href="#spi_ethernet_putstring">SPI_Ethernet_putString</a></li>
	    	<li><a href="#spi_ethernet_putconststring">SPI_Ethernet_putConstString</a></li>
	    	<li><a href="#spi_ethernet_putconstbytes">SPI_Ethernet_putConstBytes</a></li>
	    	<li><a href="#spi_ethernet_getbyte">SPI_Ethernet_getByte</a></li>	
	    	<li><a href="#spi_ethernet_getbytes">SPI_Ethernet_getBytes</a></li>	
	    	<li><a href="#spi_ethernet_usertcp">SPI_Ethernet_UserTCP</a></li>	
	    	<li><a href="#spi_ethernet_userudp">SPI_Ethernet_UserUDP</a></li>			
	    	<li><a href="#spi_ethernet_getipaddress">SPI_Ethernet_getIpAddress</a></li>
	    	<li><a href="#spi_ethernet_getgwipaddress">SPI_Ethernet_getGwIpAddress</a></li>
	    	<li><a href="#spi_ethernet_getdnsipaddress">SPI_Ethernet_getDnsIpAddress</a></li>
	    	<li><a href="#spi_ethernet_getipmask">SPI_Ethernet_getIpMask</a></li>
	    	<li><a href="#spi_ethernet_confnetwork">SPI_Ethernet_confNetwork</a></li>
	    	<li><a href="#spi_ethernet_arpresolve">SPI_Ethernet_arpResolve</a></li>
	    	<li><a href="#spi_ethernet_sendudp">SPI_Ethernet_sendUDP</a></li>
	    	<li><a href="#spi_ethernet_dnsresolve">SPI_Ethernet_dnsResolve</a></li>		
	    	<li><a href="#spi_ethernet_initdhcp">SPI_Ethernet_initDHCP</a></li>
	    	<li><a href="#spi_ethernet_dodhcpleasetime">SPI_Ethernet_doDHCPLeaseTime</a></li>
	    	<li><a href="#spi_ethernet_renewdhcp">SPI_Ethernet_renewDHCP</a></li>
	    </ul>	

    <!-- -->
    
    <h3 id="spi_ethernet_init">SPI_Ethernet_Init</h3>


    <!-- tabela: SPI_Ethernet_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Ethernet_Init(<b>unsigned char</b> *mac, <b>unsigned char</b> *ip, <b>unsigned char</b> fullDuplex);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It initializes <code>ENC28J60</code> controller. This function is internaly splited into 2 parts to help linker when coming short of memory.</p>
            	<code>ENC28J60</code> controller settings (parameters not mentioned here are set to default):
            	<ul>
            		<li>receive buffer start address : <code>0x0000</code>.</li> 
            		<li>receive buffer end address	 : <code>0x19AD</code>.</li> 
            		<li>transmit buffer start address: <code>0x19AE</code>.</li> 
            		<li>transmit buffer end address	 : <code>0x1FFF</code>.</li> 
            		<li><acronym title="Random Access Memory">RAM</acronym> buffer read/write pointers in auto-increment mode.</li> 
            		<li>receive filters set to default: <acronym title="Cyclic Redundancy Check">CRC</acronym> + <acronym title="Media Access Control">MAC</acronym> Unicast + <acronym title="Media Access Control">MAC</acronym> Broadcast in OR mode.</li> 
            		<li>flow control with TX and RX pause frames in full duplex mode.</li> 
            		<li>frames are padded to <code>60</code> bytes + <acronym title="Cyclic Redundancy Check">CRC</acronym>.</li> 
            		<li>maximum packet size is set to <code>1518</code>.</li> 
            		<li>Back-to-Back Inter-Packet Gap: <code>0x15</code> in full duplex mode; <code>0x12</code> in half duplex mode.</li> 
            		<li>Non-Back-to-Back Inter-Packet Gap: <code>0x0012</code> in full duplex mode; <code>0x0C12</code> in half duplex mode.</li> 
            		<li>Collision window is set to <code>63</code> in half duplex mode to accomodate some <code>ENC28J60</code> revisions silicon bugs.</li> 
            		<li>CLKOUT output is disabled to reduce EMI generation.</li> 
            		<li>half duplex loopback disabled.</li> 
            		<li><acronym title="Light Emitting Diode">LED</acronym> configuration: default (LEDA-link status, LEDB-link activity).</li> 
              </ul>	
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>mac:</code> <acronym title="Random Access Memory">RAM</acronym> buffer containing valid <acronym title="Media Access Control">MAC</acronym> address.</li>
	  	      	<li><code>ip:</code> <acronym title="Random Access Memory">RAM</acronym> buffer containing valid <acronym title="Internet Protocol">IP</acronym> address.</li>
	  		    	<li><code>fullDuplex:</code> ethernet duplex mode switch. Valid values: <code>0</code> (half duplex mode) and <code>1</code> (full duplex mode).</li> 
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            Global variables :
          	<ul>
          	  <li><code>SPI_Ethernet_CS</code>: Chip Select line</li>
              <li><code>SPI_Ethernet_CS_Direction</code>: Direction of the Chip Select pin</li>
          	  <li><code>SPI_Ethernet_RST</code>: Reset line</li>
              <li><code>SPI_Ethernet_RST_Direction</code>: Direction of the Reset pin</li>
            </ul>

          	must be defined before using this function.
            <p><br>The <acronym title="Serial Peripheral Interface">SPI</acronym> module needs to be initialized. See the <a href="spi_library.htm#spi_init">SPIx_Init</a> and <a href="spi_library.htm#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>        
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
#<b>define</b> SPI_Ethernet_HALFDUPLEX     0
#<b>define</b> SPI_Ethernet_FULLDUPLEX     1

<i>// mE ethernet NIC pinout</i>
<b>sfr sbit</b> SPI_Ethernet_Rst <b>at</b> RF0_bit;
<b>sfr sbit</b> SPI_Ethernet_CS  <b>at</b> RF1_bit;
<b>sfr sbit</b> SPI_Ethernet_Rst_Direction <b>at</b> TRISF0_bit;
<b>sfr sbit</b> SPI_Ethernet_CS_Direction  <b>at</b> TRISF1_bit;
<i>// end ethernet NIC definitions</i>

<b>unsigned char</b> myMacAddr[6] = {0x00, 0x14, 0xA5, 0x76, 0x19, 0x3f}; <i>// my MAC address</i>	
<b>unsigned char</b> myIpAddr     = {192, 168,   1, 60 };  <i>// my IP addr</i>

SPI1_Init();	
SPI_Ethernet_Init(myMacAddr, myIpAddr, SPI_Ethernet_FULLDUPLEX);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>    

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->

    <h3 id="spi_ethernet_enable">SPI_Ethernet_Enable</h3>


    <!-- tabela: SPI_Ethernet_Enable -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Ethernet_Enable(<b>unsigned char</b> enFlt);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. This routine enables appropriate network traffic on the <code>ENC28J60</code> module
            	 by the means of it's receive filters (unicast, multicast, broadcast, crc). Specific type of network traffic will be enabled if a corresponding bit of this routine's input parameter is set.
            	 Therefore, more than one type of network traffic can be enabled at the same time.
            	 For this purpose, predefined library constants (see the table below) can be ORed to form appropriate input value.
              <p>Advanced filtering available in the <code>ENC28J60</code> module such as <code>Pattern Match</code>, <code>Magic Packet</code> and <code>Hash Table</code> can not be enabled by this routine. Additionaly, all filters, except <acronym title="Cyclic Redundancy Check">CRC</acronym>, enabled with this routine will work in OR mode, which means that packet will be received if any of the enabled filters accepts it.</p>
              <p>This routine will change receive filter configuration on-the-fly. It will not, in any way, mess with enabling/disabling receive/transmit logic or any other part of the <code>ENC28J60</code> module. The <code>ENC28J60</code> module should be properly cofigured by the means of <a href="#spi_ethernet_init">SPI_Ethernet_Init</a> routine.</p>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>enFlt:</code> network traffic/receive filter flags. Each bit corresponds to the appropriate network traffic/receive filter:</li>
							<table>
                <tr align="center">
                	<td><b>Bit</b></td>
						  		<td><b>Mask</b></td>
							  	<td><b>Description</b></td>
							  	<td><b>Predefined library const</b></td>
                </tr>
						
							  <tr align="center">
                	<td>0</td>
								  <td>0x01</td>
								  <td><acronym title="Media Access Control">MAC</acronym> Broadcast traffic/receive filter flag. When set, <acronym title="Media Access Control">MAC</acronym> broadcast traffic will be enabled. </td>
								  <td><code>_SPI_Ethernet_BROADCAST</code></td>
                  </tr>
						
							  <tr align="center">
                	<td>1</td>
								  <td>0x02</td>
								  <td><acronym title="Media Access Control">MAC</acronym> Multicast traffic/receive filter flag. When set, <acronym title="Media Access Control">MAC</acronym> multicast traffic will be enabled. </td>
								  <td><code>_SPI_Ethernet_MULTICAST</code></td>
                </tr>
						
							  <tr align="center">
                	<td>2</td>
								  <td>0x04</td>
								  <td>not used</td>
								  <td>none</td>
                </tr>
						
							  <tr align="center">
                 	<td>3</td>
								  <td>0x08</td>
								  <td>not used</td>
								  <td>none</td>
                </tr>
						
							  <tr align="center">
               	  <td>4</td>
								  <td>0x10</td>
								  <td>not used</td>
								  <td>none</td>
                </tr>
						
							  <tr align="center">
               	  <td>5</td>
								  <td>0x20</td>
								  <td><acronym title="Cyclic Redundancy Check">CRC</acronym> check flag. When set, packets with invalid <acronym title="Cyclic Redundancy Check">CRC</acronym> field will be discarded.</td>
								  <td><code>_SPI_Ethernet_CRC</code></td>
                </tr>
						
							  <tr align="center">
               	  <td>6</td>
								  <td>0x40</td>
								  <td>not used</td>
								  <td>none</td>
                </tr>
						
							  <tr align="center">
                	<td>7</td>
								  <td>0x80</td>
								  <td><acronym title="Media Access Control">MAC</acronym> Unicast traffic/receive filter flag. When set, <acronym title="Media Access Control">MAC</acronym> unicast traffic will be enabled. </td>
								  <td><code>_SPI_Ethernet_UNICAST</code></td>
                </tr>   
              </table>
            </ul>          
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
SPI_Ethernet_Enable(_SPI_Ethernet_CRC | _SPI_Ethernet_UNICAST); <i>// enable CRC checking and Unicast traffic</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>Advanced filtering available in the <code>ENC28J60</code> module such as <code>Pattern Match</code>, <code>Magic Packet</code> and <code>Hash Table</code> can not be enabled by this routine. Additionaly, all filters, except <acronym title="Cyclic Redundancy Check">CRC</acronym>, enabled with this routine will work in OR mode, which means that packet will be received if any of the enabled filters accepts it.</p>
            <p>This routine will change receive filter configuration on-the-fly. It will not, in any way, mess with enabling/disabling receive/transmit logic or any other part of the <code>ENC28J60</code> module. The <code>ENC28J60</code> module should be properly cofigured by the means of <a href="#spi_ethernet_init">SPI_Ethernet_Init</a> routine.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->

    <h3 id="spi_ethernet_disable">SPI_Ethernet_Disable</h3>


    <!-- tabela: SPI_Ethernet_Disable -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Ethernet_Disable(<b>unsigned char</b> disFlt);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. This routine disables appropriate network traffic on the <code>ENC28J60</code> module
            	 by the means of it's receive filters (unicast, multicast, broadcast, crc). Specific type of network traffic will be disabled if a corresponding bit of this routine's input parameter is set.
            	 Therefore, more than one type of network traffic can be disabled at the same time.
            	 For this purpose, predefined library constants (see the table below) can be ORed to form appropriate input value.
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>disFlt:</code> network traffic/receive filter flags. Each bit corresponds to the appropriate network traffic/receive filter:</li>
							<table>
                <tr align="center">
                	<td><b>Bit</b></td>
							  	<td><b>Mask</b></td>
							  	<td><b>Description</b></td>
							  	<td><b>Predefined library const</b></td>
                </tr>

						  	<tr align="center">
                	<td>0</td>
							  	<td>0x01</td>
							  	<td><acronym title="Media Access Control">MAC</acronym> Broadcast traffic/receive filter flag. When set, <acronym title="Media Access Control">MAC</acronym> broadcast traffic will be disabled. </td>
							  	<td><code>_SPI_Ethernet_BROADCAST</code></td>
                </tr>

							  <tr align="center">
                	<td>1</td>
							  	<td>0x02</td>
							  	<td><acronym title="Media Access Control">MAC</acronym> Multicast traffic/receive filter flag. When set, <acronym title="Media Access Control">MAC</acronym> multicast traffic will be disabled. </td>
							  	<td><code>_SPI_Ethernet_MULTICAST</code></td>
                </tr>

						  	<tr align="center">
                	<td>2</td>
						  		<td>0x04</td>
						  		<td>not used</td>
						  		<td>none</td>
                </tr>

						  	<tr align="center">
                	<td>3</td>
						  		<td>0x08</td>
						  		<td>not used</td>
						  		<td>none</td>
                </tr>

						  	<tr align="center">
                	<td>4</td>
							  	<td>0x10</td>
							  	<td>not used</td>
							  	<td>none</td>
                </tr>

						  	<tr align="center">
                	<td>5</td>
						  		<td>0x20</td>
						  		<td><acronym title="Cyclic Redundancy Check">CRC</acronym> check flag. When set, <acronym title="Cyclic Redundancy Check">CRC</acronym> check will be disabled and packets with invalid <acronym title="Cyclic Redundancy Check">CRC</acronym> field will be accepted.</td>
						  		<td><code>_SPI_Ethernet_CRC</code></td>
                </tr>

						  	<tr align="center">
                	<td>6</td>
						  		<td>0x40</td>
						  		<td>not used</td>
						  		<td>none</td>
                </tr>

						  	<tr align="center">
                	<td>7</td>
						  		<td>0x80</td>
							  	<td><acronym title="Media Access Control">MAC</acronym> Unicast traffic/receive filter flag. When set, <acronym title="Media Access Control">MAC</acronym> unicast traffic will be disabled. </td>
							  	<td><code>_SPI_Ethernet_UNICAST</code></td>
                </tr>
              </table>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>
            	Nothing.</li>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
SPI_Ethernet_Disable(_SPI_Ethernet_CRC | _SPI_Ethernet_UNICAST); <i>// disable CRC checking and Unicast traffic</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>Advanced filtering available in the <code>ENC28J60</code> module such as <code>Pattern Match</code>, <code>Magic Packet</code> and <code>Hash Table</code> can not be disabled by this routine.</p>
            <p>This routine will change receive filter configuration on-the-fly. It will not, in any way, mess with enabling/disabling receive/transmit logic or any other part of the <code>ENC28J60</code> module. The <code>ENC28J60</code> module should be properly cofigured by the means of <a href="#spi_ethernet_init">SPI_Ethernet_Init</a> routine.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->    
    
    <!-- -->

    <h3 id="spi_ethernet_dopacket">SPI_Ethernet_doPacket</h3>


    <!-- tabela: SPI_Ethernet_doPacket -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> SPI_Ethernet_doPacket();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It processes next received packet if such exists. Packets are processed in the following manner:</p>
            <ul>
              <li><acronym title="Address Resolution Protocol">ARP</acronym> & <acronym title="Internet Control Message Protocol">ICMP</acronym> requests are replied automatically.</li>
              <li>upon <acronym title="Transmission Control Protocol">TCP</acronym> request the <a href="#spi_ethernet_usertcp">SPI_Ethernet_UserTCP</a> function is called for further processing.</li>
              <li>upon <acronym title="User Datagram Protocol">UDP</acronym> request the <a href="#spi_ethernet_userudp">SPI_Ethernet_UserUDP</a> function is called for further processing.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
           		<li><code>0</code> - upon successful packet processing (zero packets received or received packet processed successfully).</li>
           		<li><code>1</code> - upon reception error or receive buffer corruption. <code>ENC28J60</code> controller needs to be restarted.</li>
           		<li><code>2</code> - received packet was not sent to us (not our <acronym title="Internet Protocol">IP</acronym>, nor <acronym title="Internet Protocol">IP</acronym> broadcast address).</li>
           		<li><code>3</code> - received <acronym title="Internet Protocol">IP</acronym> packet was not IPv4.</li>
           		<li><code>4</code> - received packet was of type unknown to the library.</li>
            </ul>		
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>if</b> (SPI_Ethernet_doPacket() == 0)(1) {  <i>// process received packets</i>
  ...
}</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p><code>SPI_Ethernet_doPacket</code> must be called as often as possible in user's code.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->  

    <h3 id="spi_ethernet_putbyte">SPI_Ethernet_putByte</h3>


    <!-- tabela: SPI_Ethernet_putByte -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Ethernet_putByte(<b>unsigned char</b> v);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It stores one byte to address pointed by the current <code>ENC28J60</code> write pointer (<code>EWRPT</code>).</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>v:</code> value to store</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>char</b> data_;
...
SPI_Ethernet_putByte(data);<i> // put an byte into ENC28J60 buffer</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>
  
    <!-- kraj tabele -->

    <!-- -->  

    <h3 id="spi_ethernet_putbytes">SPI_Ethernet_putBytes</h3>


    <!-- tabela: SPI_Ethernet_putBytes -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>void</b> SPI_Ethernet_putBytes(<b>unsigned char</b> *ptr, <b>unsigned int</b> n);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It stores requested number of bytes into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym> starting from current <code>ENC28J60</code> write pointer (<code>EWRPT</code>) location.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ptr:</code> <acronym title="Random Access Memory">RAM</acronym> buffer containing bytes to be written into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</li>
			  			<li><code>n:</code> number of bytes to be written.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>char</b> *buffer =  "mikroElektronika";	 
...
SPI_Ethernet_putBytes(buffer, 16); <i>// put an RAM array into ENC28J60 buffer</i></pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->    
    
    <!-- -->  

    <h3 id="spi_ethernet_putconstbytes">SPI_Ethernet_putConstBytes</h3>


    <!-- tabela: SPI_Ethernet_putConstBytes -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>void</b> SPI_Ethernet_putConstBytes(<b>const unsigned char</b> *ptr, <b>unsigned int</b> n);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It stores requested number of const bytes into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym> starting from current <code>ENC28J60</code> write pointer (<code>EWRPT</code>) location.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ptr:</code> const buffer containing bytes to be written into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</li>
			  			<li><code>n:</code> number of bytes to be written.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>const char</b> *buffer =  "mikroElektronika";	 
...
SPI_Ethernet_putConstBytes(buffer, 16); <i>// put a const array into ENC28J60 buffer</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->    
    
		<!-- -->  

    <h3 id="spi_ethernet_putstring">SPI_Ethernet_putString</h3>


    <!-- tabela: SPI_Ethernet_putString -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned int</b> SPI_Ethernet_putString(<b>unsigned char</b> *ptr);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It stores whole string (excluding null termination) into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym> starting from current <code>ENC28J60</code> write pointer (<code>EWRPT</code>) location.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ptr:</code> string to be written into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Number of bytes written into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>char</b> *buffer =  "mikroElektronika";	 
...
SPI_Ethernet_putString(buffer); <i>// put a RAM string into ENC28J60 buffer</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->    

        
		<!-- -->  

    <h3 id="spi_ethernet_putconststring">SPI_Ethernet_putConstString</h3>


    <!-- tabela: SPI_Ethernet_putConstString -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned int</b> SPI_Ethernet_putConstString(<b>const unsigned char</b> *ptr);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It stores whole const string (excluding null termination) into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym> starting from current <code>ENC28J60</code> write pointer (<code>EWRPT</code>) location.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ptr:</code> const string to be written into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Number of bytes written into <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>const char</b> *buffer =  "mikroElektronika"; 
...
SPI_Ethernet_putConstString(buffer); <i>// put a const string into ENC28J60 buffer</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->       

		<!-- -->  

    <h3 id="spi_ethernet_getbyte">SPI_Ethernet_getByte</h3>


    <!-- tabela: SPI_Ethernet_getByte -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> SPI_Ethernet_getByte();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It fetches a byte from address pointed to by current <code>ENC28J60</code> read pointer (<code>ERDPT</code>).</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Byte read from <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>char</b> buffer; 
...
buffer = SPI_Ethernet_getByte(); <i>// read a byte from <code>ENC28J60</code> buffer</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->
    
    <!-- -->  

    <h3 id="spi_ethernet_getbytes">SPI_Ethernet_getBytes</h3>


    <!-- tabela: SPI_Ethernet_putBytes -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>void</b> SPI_Ethernet_getBytes(<b>unsigned char</b> *ptr, <b>unsigned int</b> addr, <b>unsigned int</b> n);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Media Access Control">MAC</acronym> module routine. It fetches equested number of bytes from <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym> starting from given address. If value of <code>0xFFFF</code> is passed as the address parameter, the reading will start from current <code>ENC28J60</code> read pointer (<code>ERDPT</code>) location.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ptr:</code> buffer for storing bytes read from <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym>.</li>
              <li><code>addr:</code> <code>ENC28J60</code> <acronym title="Random Access Memory">RAM</acronym> start address. Valid values: <code>0</code>..<code>8192</code>.</li>
			  			<li><code>n:</code> number of bytes to be read.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>char</b> buffer[16];	 
...
SPI_Ethernet_getBytes(buffer, 0x100, 16); <i>// read 16 bytes, starting from address 0x100</i>
</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->        

    <!-- -->
    
    <h3 id="spi_ethernet_usertcp">SPI_Ethernet_UserTCP</h3>


    <!-- tabela: SPI_Ethernet_UserTCP -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> SPI_Ethernet_UserTCP(<b>unsigned char</b> *remoteHost, <b>unsigned int</b> remotePort, <b>unsigned int</b> localPort, <b>unsigned int</b> reqLength, <b>TEthPktFlags</b> *flags);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Transmission Control Protocol">TCP</acronym> module routine. It is internally called by the library. The user accesses to the <acronym title="Transmission Control Protocol">TCP</acronym> request by using some of the 
						   SPI_Ethernet_get routines. The user puts data in the transmit buffer by using some of the SPI_Ethernet_put routines.
						   The function must return the length in bytes of the <acronym title="Transmission Control Protocol">TCP</acronym> reply, or 0 if there is nothing to transmit. 
						   If there is no need to reply to the <acronym title="Transmission Control Protocol">TCP</acronym> requests, just define this function with return(0) as a single 
						   statement.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>remoteHost:</code> client's <acronym title="Internet Protocol">IP</acronym> address.</li>
              <li><code>remotePort:</code> client's <acronym title="Transmission Control Protocol">TCP</acronym> port.</li>
              <li><code>localPort:</code> port to which the request is sent.</li>
              <li><code>reqLength:</code> <acronym title="Transmission Control Protocol">TCP</acronym> request data field length.</li>
              <li><code>flags:</code> structure consisted of two bit fields : 

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program"><b>typedef struct</b> {
  <b>unsigned</b> canCloseTCP: 1;  <i>// flag which closes socket</i>
  <b>unsigned</b> isBroadcast: 1;  <i>// flag which denotes that the IP package has been received via subnet broadcast address</i>
} TEthPktFlags;
</pre>
              	</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
					  <ul>
						  <li><code>0</code> - there should not be a reply to the request.</li>
							<li>Length of <acronym title="Transmission Control Protocol">TCP</acronym> reply data field - otherwise.</li>
            </ul>						
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<p>This function is internally called by the library and should not be called by the user's code.</p>

          </td>
        </tr>  


        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>The function source code is provided with appropriate example projects. The code should be adjusted by the user to achieve desired reply.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->         
    
    <h3 id="spi_ethernet_userudp">SPI_Ethernet_UserUDP</h3>


    <!-- tabela: SPI_Ethernet_UserUDP -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> SPI_Ethernet_UserUDP(<b>unsigned char</b> *remoteHost, <b>unsigned int</b> remotePort, <b>unsigned int</b> localPort, <b>unsigned int</b> reqLength, <b>TEthPktFlags</b> *flags);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="User Datagram Protocol">UDP</acronym> module routine. It is internally called by the library. The user accesses to the <acronym title="User Datagram Protocol">UDP</acronym> request by using some of the 
						   SPI_Ethernet_get routines. The user puts data in the transmit buffer by using some of the SPI_Ethernet_put routines.
						   The function must return the length in bytes of the <acronym title="User Datagram Protocol">UDP</acronym> reply, or 0 if nothing to transmit. 
						   If you don't need to reply to the <acronym title="User Datagram Protocol">UDP</acronym> requests, just define this function with a return(0) as single 
						   statement.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>remoteHost:</code> client's <acronym title="Internet Protocol">IP</acronym> address.</li>
              <li><code>remotePort:</code> client's port.</li>
              <li><code>localPort:</code> port to which the request is sent.</li>
              <li><code>reqLength:</code> <acronym title="User Datagram Protocol">UDP</acronym> request data field length.</li>
              <li><code>flags:</code> structure consisted of two bit fields : 

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program"><b>typedef struct</b> {
  <b>unsigned</b> canCloseTCP: 1;  <i>// flag which closes TCP socket (not relevant to UDP)</i>
  <b>unsigned</b> isBroadcast: 1;  <i>// flag which denotes that the IP package has been received via subnet broadcast address</i>
} TEthPktFlags;
</pre>

              	</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul> 
	         	  <li><code>0</code> - there should not be a reply to the request.</li>
						  <li>Length of <acronym title="User Datagram Protocol">UDP</acronym> reply data field - otherwise.</li>
						</ul>  
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<p>This function is internally called by the library and should not be called by the user's code.</p>

          </td>
        </tr>  

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>The function source code is provided with appropriate example projects. The code should be adjusted by the user to achieve desired reply.</p>
          </td>
        </tr>  

      </tbody>

    </table>
  
    <!-- kraj tabele -->

		<!-- -->         
    
    <h3 id="spi_ethernet_getipaddress">SPI_Ethernet_getIpAddress</h3>


    <!-- tabela: SPI_Ethernet_getIpAddress -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> * SPI_Ethernet_getIpAddress();<p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This routine should be used when <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server is present on the network to fetch assigned <acronym title="Internet Protocol">IP</acronym> address.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Pointer to the global variable holding <acronym title="Internet Protocol">IP</acronym> address.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> ipAddr[4];  <i>// user IP address buffer</i>
...	
memcpy(ipAddr, SPI_Ethernet_getIpAddress(), 4); <i>// fetch IP address</i>
</pre>
          </td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>User should always copy the <acronym title="Internet Protocol">IP</acronym> address from the <acronym title="Random Access Memory">RAM</acronym> location returned by this routine into it's own <acronym title="Internet Protocol">IP</acronym> address buffer. These locations should not be altered by the user in any case!</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->  
    
		<!-- -->         
    
    <h3 id="spi_ethernet_getgwipaddress">SPI_Ethernet_getGwIpAddress</h3>


    <!-- tabela: SPI_Ethernet_getGwIpAddress -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> * SPI_Ethernet_getGwIpAddress();<p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This routine should be used when <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server is present on the network to fetch assigned gateway <acronym title="Internet Protocol">IP</acronym> address.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Pointer to the global variable holding gateway <acronym title="Internet Protocol">IP</acronym> address.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> gwIpAddr[4];  <i>// user gateway IP address buffer</i>
...	
memcpy(gwIpAddr, SPI_Ethernet_getGwIpAddress(), 4); <i>// fetch gateway IP address </i>
</pre>
          </td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>User should always copy the <acronym title="Internet Protocol">IP</acronym> address from the <acronym title="Random Access Memory">RAM</acronym> location returned by this routine into it's own gateway <acronym title="Internet Protocol">IP</acronym> address buffer. These locations should not be altered by the user in any case!</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->      
    
		<!-- -->         
    
    <h3 id="spi_ethernet_getdnsipaddress">SPI_Ethernet_getDnsIpAddress</h3>


    <!-- tabela: SPI_Ethernet_getDnsIpAddress -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> * SPI_Ethernet_getDnsIpAddress();<p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This routine should be used when <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server is present on the network to fetch assigned <acronym title="Domain Name Server">DNS</acronym> <acronym title="Internet Protocol">IP</acronym> address.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Pointer to the global variable holding <acronym title="Domain Name Server">DNS</acronym> <acronym title="Internet Protocol">IP</acronym> address.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> dnsIpAddr[4];  <i>// user DNS IP address buffer</i>
...	
memcpy(dnsIpAddr, SPI_Ethernet_getDnsIpAddress(), 4); <i>// fetch DNS server address </i>
</pre>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>User should always copy the <acronym title="Internet Protocol">IP</acronym> address from the <acronym title="Random Access Memory">RAM</acronym> location returned by this routine into it's own <acronym title="Domain Name Server">DNS</acronym> <acronym title="Internet Protocol">IP</acronym> address buffer. These locations should not be altered by the user in any case!</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->            

		<!-- -->         
    
    <h3 id="spi_ethernet_getipmask">SPI_Ethernet_getIpMask</h3>


    <!-- tabela: SPI_Ethernet_getIpMask -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> * SPI_Ethernet_getIpMask();<p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This routine should be used when <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server is present on the network to fetch assigned <acronym title="Internet Protocol">IP</acronym> subnet mask.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<p>Pointer to the global variable holding <acronym title="Internet Protocol">IP</acronym> subnet mask.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> IpMask[4];  <i>// user IP subnet mask buffer</i>
...	
memcpy(IpMask, SPI_Ethernet_getIpMask(), 4); <i>// fetch IP subnet mask</i>
</pre>
          </td>
        </tr>  


        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>User should always copy the <acronym title="Internet Protocol">IP</acronym> address from the <acronym title="Random Access Memory">RAM</acronym> location returned by this routine into it's own <acronym title="Internet Protocol">IP</acronym> subnet mask buffer. These locations should not be altered by the user in any case!</p>
          </td>
        </tr>  

      </tbody>

    </table>
  
    <!-- kraj tabele -->                
    
    <!-- -->         
    
    <h3 id="spi_ethernet_confnetwork">SPI_Ethernet_confNetwork</h3>


    <!-- tabela: SPI_Ethernet_confNetwork -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Ethernet_confNetwork(<b>char</b> *ipMask, <b>char</b> *gwIpAddr, <b>char</b> *dnsIpAddr);<p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures network parameters (<acronym title="Internet Protocol">IP</acronym> subnet mask, gateway <acronym title="Internet Protocol">IP</acronym> address, <acronym title="Domain Name Server">DNS</acronym> <acronym title="Internet Protocol">IP</acronym> address) when <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> is not used.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ipMask:</code>  <acronym title="Internet Protocol">IP</acronym> subnet mask.</li>
              <li><code>gwIpAddr</code> gateway <acronym title="Internet Protocol">IP</acronym> address.</li>
              <li><code>dnsIpAddr:</code> <acronym title="Domain Name Server">DNS</acronym> <acronym title="Internet Protocol">IP</acronym> address.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>char</b> ipMask[4]    = {255, 255, 255,  0 };  <i>// network mask (for example : 255.255.255.0)</i>
<b>char</b> gwIpAddr[4]  = {192, 168,   1,  1 };  <i>// gateway (router) IP address</i>
<b>char</b> dnsIpAddr[4] = {192, 168,   1,  1 };  <i>// DNS server IP address</i>
...	
SPI_Ethernet_confNetwork(ipMask, gwIpAddr, dnsIpAddr); <i>// set network configuration parameters</i>
</pre>
          </td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>The above mentioned network parameters should be set by this routine only if <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> module is not used. Otherwise <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> will override these settings.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->    

    <!-- -->         
    
    <h3 id="spi_ethernet_arpresolve">SPI_Ethernet_arpResolve</h3>


    <!-- tabela: SPI_Ethernet_arpResolve -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> *SPI_Ethernet_arpResolve(<b>unsigned char</b> *ip, <b>unsigned char</b> tmax);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Address Resolution Protocol">ARP</acronym> module routine. It sends an <acronym title="Address Resolution Protocol">ARP</acronym> request for given <acronym title="Internet Protocol">IP</acronym> address and waits for <acronym title="Address Resolution Protocol">ARP</acronym> reply. 
			If the requested <acronym title="Internet Protocol">IP</acronym> address was resolved, an <acronym title="Address Resolution Protocol">ARP</acronym> cash entry is used for storing the configuration.
			<acronym title="Address Resolution Protocol">ARP</acronym> cash can store up to 3 entries. For <acronym title="Address Resolution Protocol">ARP</acronym> cash structure refer to <code>"eth_enc28j60LibDef.h"</code> header file in the compiler's Uses folder.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>ip:</code>  <acronym title="Internet Protocol">IP</acronym> address to be resolved.</li>
              <li><code>tmax:</code> time in seconds to wait for an reply.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
          		<li><acronym title="Media Access Control">MAC</acronym> address behind the <acronym title="Internet Protocol">IP</acronym> address - the requested <acronym title="Internet Protocol">IP</acronym> address was resolved.</li>
          		<li><code>0</code> - otherwise.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> IpAddr[4]  = {192, 168,   1,  1 };  <i>// IP address</i>
...	
SPI_Ethernet_arpResolve(IpAddr, 5); <i>// get MAC address behind the above IP address, wait 5 secs for the response</i>
</pre>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
						<p>The Ethernet services are not stopped while this routine waits for <acronym title="Address Resolution Protocol">ARP</acronym> reply. The incoming packets will be processed normaly during this time.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->     
    
    <!-- -->         
    
    <h3 id="spi_ethernet_sendudp">SPI_Ethernet_sendUDP</h3>


    <!-- tabela: SPI_Ethernet_sendUDP -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned int</b> SPI_Ethernet_sendUDP(<b>unsigned char</b> *destIP, <b>unsigned int</b> sourcePort, <b>unsigned int</b> destPort, <b>unsigned char</b> *pkt, <b>unsigned int</b> pktLen); </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="User Datagram Protocol">UDP</acronym> module routine. It sends an <acronym title="User Datagram Protocol">UDP</acronym> packet on the network.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>destIP:</code>  remote host <acronym title="Internet Protocol">IP</acronym> address.</li>
              <li><code>sourcePort:</code> local <acronym title="User Datagram Protocol">UDP</acronym> source port number.</li>
              <li><code>destPort:</code>  destination <acronym title="User Datagram Protocol">UDP</acronym> port number.</li>
              <li><code>pkt:</code> packet to transmit.</li>
              <li><code>pktLen:</code> length in bytes of packet to transmit.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
          		<li><code>1</code> - <acronym title="User Datagram Protocol">UDP</acronym> packet was sent successfully.</li>
          		<li><code>0</code> - otherwise.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> IpAddr[4]  = {192, 168,   1,  1 };  <i>// remote IP address</i>
...	
SPI_Ethernet_sendUDP(IpAddr, 10001, 10001, "Hello", 5); <i>// send Hello message to the above IP address, from UDP port 10001 to UDP port 10001</i> 
</pre>
          </td>
        </tr>
        
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->        
    
    <!-- -->         
    
    <h3 id="spi_ethernet_dnsresolve">SPI_Ethernet_dnsResolve</h3>


    <!-- tabela: SPI_Ethernet_dnsResolve -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned char</b>	* SPI_Ethernet_dnsResolve(<b>unsigned char</b> *host, <b>unsigned char</b> tmax);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Domain Name Server">DNS</acronym> module routine. It sends an <acronym title="Domain Name Server">DNS</acronym> request for given host name and waits for <acronym title="Domain Name Server">DNS</acronym> reply.
			If the requested host name was resolved, it's <acronym title="Internet Protocol">IP</acronym> address is stored in library global variable 
            and a pointer containing this address is returned by the routine. <acronym title="User Datagram Protocol">UDP</acronym> port <code>53</code> is used as <acronym title="Domain Name Server">DNS</acronym> port.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>host:</code> host name to be resolved.</li>
              <li><code>tmax:</code> time in seconds to wait for an reply.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
          		<li>pointer to the location holding the <acronym title="Internet Protocol">IP</acronym> address - the requested host name was resolved.</li>
          		<li><code>0</code> - otherwise.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>unsigned char</b> * remoteHostIpAddr[4];	<i>// user host IP address buffer</i>
...
<i>// SNTP server:
// Zurich, Switzerland: Integrated Systems Lab, Swiss Fed. Inst. of Technology
// 129.132.2.21: swisstime.ethz.ch
// Service Area: Switzerland and Europe	</i>
memcpy(remoteHostIpAddr, SPI_Ethernet_dnsResolve("swisstime.ethz.ch", 5), 4);
</pre>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
						<p>The Ethernet services are not stopped while this routine waits for <acronym title="Domain Name Server">DNS</acronym> reply. The incoming packets will be processed normaly during this time.</p>      
						<p>User should always copy the <acronym title="Internet Protocol">IP</acronym> address from the <acronym title="Random Access Memory">RAM</acronym> location returned by this routine into it's own resolved host <acronym title="Internet Protocol">IP</acronym> address buffer. These locations should not be altered by the user in any case!</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->            
    
    <!-- -->         
    
    <h3 id="spi_ethernet_initdhcp">SPI_Ethernet_initDHCP</h3>


    <!-- tabela: SPI_Ethernet_initDHCP -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned int</b> SPI_Ethernet_initDHCP(<b>unsigned char</b> tmax);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> module routine. It sends an <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> 
							request for network parameters (<acronym title="Internet Protocol">IP</acronym>, gateway, <acronym title="Domain Name Server">DNS</acronym> addresses and <acronym title="Internet Protocol">IP</acronym> subnet mask) and waits for <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> reply.
						  If the requested parameters were obtained successfully, their values are stored into the library global variables.</p>
							<p>These parameters can be fetched by using appropriate library <acronym title="Internet Protocol">IP</acronym> get routines:</p>
							<ul>
								<li><a href="#spi_ethernet_getipaddress">SPI_Ethernet_getIpAddress</a> - fetch <acronym title="Internet Protocol">IP</acronym> address.</li> 
								<li><a href="#spi_ethernet_getgwipaddress">SPI_Ethernet_getGwIpAddress</a> - fetch gateway <acronym title="Internet Protocol">IP</acronym> address.</li> 
								<li><a href="#spi_ethernet_getdnsipaddress">SPI_Ethernet_getDnsIpAddress</a> - fetch <acronym title="Domain Name Server">DNS</acronym> <acronym title="Internet Protocol">IP</acronym> address.</li> 
								<li><a href="#spi_ethernet_getipmask">SPI_Ethernet_getIpMask</a> - fetch <acronym title="Internet Protocol">IP</acronym> subnet mask.</li> 
						  </ul>		
							<p><acronym title="User Datagram Protocol">UDP</acronym> port <code>68</code> is used as <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> client port and <acronym title="User Datagram Protocol">UDP</acronym> port <code>67</code> is used as <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server port.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>tmax:</code> time in seconds to wait for an reply.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
          		<li><code>1</code> - network parameters were obtained successfully.</li>
          		<li><code>0</code> - otherwise.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
...	
SPI_Ethernet_initDHCP(5); <i>// get network configuration from DHCP server, wait 5 sec for the response</i> 
...
</pre>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
						<p>The Ethernet services are not stopped while this routine waits for <acronym title="Domain Name Server">DNS</acronym> reply. The incoming packets will be processed normaly during this time.</p>            
						<p>When <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> module is used, global library variable <code>SPI_Ethernet_userTimerSec</code> is used to keep track of time. It is user responsibility to increment this variable each second in it's code.</p>
          </td>
        </tr>  

      </tbody>

    </table>
 
    <!-- kraj tabele -->                
    
    <!-- -->         
    
    <h3 id="spi_ethernet_dodhcpleasetime">SPI_Ethernet_doDHCPLeaseTime</h3>


    <!-- tabela: SPI_Ethernet_doDHCPLeaseTime -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned int</b> SPI_Ethernet_doDHCPLeaseTime();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> module routine. It takes care of <acronym title="Internet Protocol">IP</acronym> address lease time by decrementing the global lease time library counter. When this time expires, it's time to contact <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server and renew the lease.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
          		<li><code>0</code> - lease time has not expired yet.</li>
          		<li><code>1</code> - lease time has expired, it's time to renew it.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>while</b>(1) {	
  ...
  <b>if</b> (SPI_Ethernet_doDHCPLeaseTime())
    ... <i>// it's time to renew the IP address lease</i>                  
}
</pre>
          </td>
        </tr>  


        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->           
    
    <!-- -->         
    
    <h3 id="spi_ethernet_renewdhcp">SPI_Ethernet_renewDHCP</h3>


    <!-- tabela: SPI_Ethernet_renewDHCP -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
          	<p><b>unsigned int</b> SPI_Ethernet_renewDHCP(<b>unsigned char</b> tmax);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>This is <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> module routine. It sends <acronym title="Internet Protocol">IP</acronym> address lease time renewal request to <acronym title="Dynamic Host Configuration Protocol">DHCP</acronym> server.
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <ul>
              <li><code>tmax:</code> time in seconds to wait for an reply.</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
          	<ul>
          		<li><code>1</code> - upon success (lease time was renewed).</li>
          		<li><code>0</code> - otherwise (renewal request timed out).</li>
            </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Ethernet module has to be initialized. See <a href="#spi_ethernet_init">SPI_Ethernet_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<b>while</b>(1) {	
  ...
  <b>if</b> (SPI_Ethernet_doDHCPLeaseTime())
    SPI_Ethernet_renewDHCP(5);   <i>// it's time to renew the IP address lease, with 5 secs for a reply</i>                  
  ...  
}
</pre>
          </td>
        </tr>  
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->                  
    
    <!-- -->

    <h3>Library Example</h3>

    <p>This code shows how to use the Ethernet mini library :
    	<ul>
        <li>       the board will reply to ARP & ICMP echo requests</li>
        <li>       the board will reply to UDP requests on any port :</li>
                       <ul>
                       	 <li>returns the request in upper char with a header made of remote host IP & port number</li>
                       </ul>	 
        <li>       the board will reply to HTTP requests on port 80, GET method with pathnames :</li>
                       <ul>
                       	 <li>/               will return the HTML main page</li>
                         <li>/s              will return board status as text string</li>
                         <li>/t0 ... /t7     will toggle RD0 to RD7 bit and return HTML main page</li>
                         <li>all other requests return also HTML main page.</li>
                       </ul>
      </ul>
    </p>
    
<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<code><span class="cpp1-preprocessor">#include&nbsp;&quot;__EthEnc28j60.h&quot;&nbsp;

</span><span class="cpp1-comment">//&nbsp;duplex&nbsp;config&nbsp;flags
</span><span class="cpp1-preprocessor">#define&nbsp;Spi_Ethernet_HALFDUPLEX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x00&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;half&nbsp;duplex
</span><span class="cpp1-preprocessor">#define&nbsp;Spi_Ethernet_FULLDUPLEX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x01&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;full&nbsp;duplex

//&nbsp;mE&nbsp;ehternet&nbsp;NIC&nbsp;pinout
</span><span class="cpp1-identifier">sfr</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">sbit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_Rst</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">at</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">LATF0_bit;</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;for&nbsp;writing&nbsp;to&nbsp;output&nbsp;pin&nbsp;always&nbsp;use&nbsp;latch&nbsp;
</span><span class="cpp1-identifier">sfr</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">sbit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_CS</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">at</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">LATF1_bit;</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;for&nbsp;writing&nbsp;to&nbsp;output&nbsp;pin&nbsp;always&nbsp;use&nbsp;latch&nbsp;
</span><span class="cpp1-identifier">sfr</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">sbit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_Rst_Direction</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">at</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">TRISF0_bit;
sfr</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">sbit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_CS_Direction</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">at</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">TRISF1_bit;
</span><span class="cpp1-comment">//&nbsp;end&nbsp;ethernet&nbsp;NIC&nbsp;definitions


/************************************************************
&nbsp;*&nbsp;ROM&nbsp;constant&nbsp;strings
&nbsp;*/
</span><span class="cpp1-reservedword">const</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">code</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">httpHeader[]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-string">&quot;HTTP/1.1&nbsp;200&nbsp;OK\nContent-type:&nbsp;&quot;</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTTP&nbsp;header
</span><span class="cpp1-reservedword">const</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">code</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">httpMimeTypeHTML[]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-string">&quot;text/html\n\n&quot;</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTML&nbsp;MIME&nbsp;type
</span><span class="cpp1-reservedword">const</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">code</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">httpMimeTypeScript[]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-string">&quot;text/plain\n\n&quot;</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;TEXT&nbsp;MIME&nbsp;type
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">httpMethod[]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-string">&quot;GET&nbsp;/&quot;</span><span class="cpp1-symbol">;
</span><span class="cpp1-comment">/*
&nbsp;*&nbsp;web&nbsp;page,&nbsp;splited&nbsp;into&nbsp;2&nbsp;parts&nbsp;:
&nbsp;*&nbsp;when&nbsp;coming&nbsp;short&nbsp;of&nbsp;ROM,&nbsp;fragmented&nbsp;data&nbsp;is&nbsp;handled&nbsp;more&nbsp;efficiently&nbsp;by&nbsp;linker
&nbsp;*
&nbsp;*&nbsp;this&nbsp;HTML&nbsp;page&nbsp;calls&nbsp;the&nbsp;boards&nbsp;to&nbsp;get&nbsp;its&nbsp;status,&nbsp;and&nbsp;builds&nbsp;itself&nbsp;with&nbsp;javascript
&nbsp;*/
</span><span class="cpp1-reservedword">const</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">code</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">*indexPage</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Change&nbsp;the&nbsp;IP&nbsp;address&nbsp;of&nbsp;the&nbsp;page&nbsp;to&nbsp;be&nbsp;refreshed
</span><span class="cpp1-string">&quot;&lt;meta&nbsp;http-equiv=\&quot;refresh\&quot;&nbsp;content=\&quot;3;url=http://192.168.20.60\&quot;&gt;\
&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;&lt;BODY&gt;\
&lt;h1&gt;PIC32&nbsp;+&nbsp;ENC28J60&nbsp;Mini&nbsp;Web&nbsp;Server&lt;/h1&gt;\
&lt;a&nbsp;href=/&gt;Reload&lt;/a&gt;\
&lt;script&nbsp;src=/s&gt;&lt;/script&gt;\
&lt;table&gt;&lt;tr&gt;&lt;td&nbsp;valign=top&gt;&lt;table&nbsp;border=1&nbsp;style=\&quot;font-size:20px&nbsp;;font-family:&nbsp;terminal&nbsp;;\&quot;&gt;\
&lt;tr&gt;&lt;th&nbsp;colspan=2&gt;ADC&lt;/th&gt;&lt;/tr&gt;\
&lt;tr&gt;&lt;td&gt;AN0&lt;/td&gt;&lt;td&gt;&lt;script&gt;document.write(AN0)&lt;/script&gt;&lt;/td&gt;&lt;/tr&gt;\
&lt;tr&gt;&lt;td&gt;AN1&lt;/td&gt;&lt;td&gt;&lt;script&gt;document.write(AN1)&lt;/script&gt;&lt;/td&gt;&lt;/tr&gt;\
&lt;/table&gt;&lt;/td&gt;&lt;td&gt;&lt;table&nbsp;border=1&nbsp;style=\&quot;font-size:20px&nbsp;;font-family:&nbsp;terminal&nbsp;;\&quot;&gt;\
&lt;tr&gt;&lt;th&nbsp;colspan=2&gt;PORTB&lt;/th&gt;&lt;/tr&gt;\
&lt;script&gt;\
var&nbsp;str,i;\
str=\&quot;\&quot;;\
for(i=2;i&lt;10;i++)\
{str+=\&quot;&lt;tr&gt;&lt;td&nbsp;bgcolor=pink&gt;BUTTON&nbsp;#\&quot;+i+\&quot;&lt;/td&gt;\&quot;;\
if(PORTB&amp;(1&lt;&lt;i)){str+=\&quot;&lt;td&nbsp;bgcolor=red&gt;ON\&quot;;}\
else&nbsp;{str+=\&quot;&lt;td&nbsp;bgcolor=#cccccc&gt;OFF\&quot;;}\
str+=\&quot;&lt;/td&gt;&lt;/tr&gt;\&quot;;}\
document.write(str)&nbsp;;\
&lt;/script&gt;\
&quot;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;

</span><span class="cpp1-reservedword">const</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">code</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">*indexPage2</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-string">&quot;&lt;/table&gt;&lt;/td&gt;&lt;td&gt;\
&lt;table&nbsp;border=1&nbsp;style=\&quot;font-size:20px&nbsp;;font-family:&nbsp;terminal&nbsp;;\&quot;&gt;\
&lt;tr&gt;&lt;th&nbsp;colspan=3&gt;PORTD&lt;/th&gt;&lt;/tr&gt;\
&lt;script&gt;\
var&nbsp;str,i;\
str=\&quot;\&quot;;\
for(i=0;i&lt;8;i++)\
{str+=\&quot;&lt;tr&gt;&lt;td&nbsp;bgcolor=yellow&gt;LED&nbsp;#\&quot;+i+\&quot;&lt;/td&gt;\&quot;;\
if(PORTD&amp;(1&lt;&lt;i)){str+=\&quot;&lt;td&nbsp;bgcolor=red&gt;ON\&quot;;}\
else&nbsp;{str+=\&quot;&lt;td&nbsp;bgcolor=#cccccc&gt;OFF\&quot;;}\
str+=\&quot;&lt;/td&gt;&lt;td&gt;&lt;a&nbsp;href=/t\&quot;+i+\&quot;&gt;Toggle&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;\&quot;;}\
document.write(str)&nbsp;;\
&lt;/script&gt;\
&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\
This&nbsp;is&nbsp;HTTP&nbsp;request&nbsp;#&lt;script&gt;document.write(REQ)&lt;/script&gt;&lt;/BODY&gt;&lt;/HTML&gt;\
&quot;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;

</span><span class="cpp1-comment">/***********************************
&nbsp;*&nbsp;RAM&nbsp;variables
&nbsp;*/
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">myMacAddr[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-hexadecimal">0x00</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x14</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0xA5</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x76</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x19</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x3f</span><span class="cpp1-symbol">};</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;my&nbsp;MAC&nbsp;address
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">myIpAddr[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-number">192</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">168</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-number">20</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">60</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">};</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;my&nbsp;IP&nbsp;address
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">gwIpAddr[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-number">192</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">168</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-number">20</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-number">6</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">};</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;gateway&nbsp;(router)&nbsp;IP&nbsp;address
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">ipMask[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-number">255</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">255</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">255</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">};</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;network&nbsp;mask&nbsp;(for&nbsp;example&nbsp;:&nbsp;255.255.255.0)
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dnsIpAddr[</span><span class="cpp1-number">4</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-number">192</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">168</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-number">20</span><span class="cpp1-symbol">,</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-number">1</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">};</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;DNS&nbsp;server&nbsp;IP&nbsp;address

</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">getRequest[</span><span class="cpp1-number">15</span><span class="cpp1-symbol">];</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTTP&nbsp;request&nbsp;buffer
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">31</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;buffer&nbsp;for&nbsp;dynamic&nbsp;response
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">long</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">httpCounter</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;counter&nbsp;of&nbsp;HTTP&nbsp;requests

/*******************************************
&nbsp;*&nbsp;functions
&nbsp;*/

/*
&nbsp;*&nbsp;put&nbsp;the&nbsp;constant&nbsp;string&nbsp;pointed&nbsp;to&nbsp;by&nbsp;s&nbsp;to&nbsp;the&nbsp;ENC&nbsp;transmit&nbsp;buffer.
&nbsp;*/
/*unsigned&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;putConstString(const&nbsp;code&nbsp;char&nbsp;*s)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;ctr&nbsp;=&nbsp;0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(*s)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spi_Ethernet_putByte(*s++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctr++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(ctr);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}*/
/*
&nbsp;*&nbsp;it&nbsp;will&nbsp;be&nbsp;much&nbsp;faster&nbsp;to&nbsp;use&nbsp;library&nbsp;Spi_Ethernet_putConstString&nbsp;routine
&nbsp;*&nbsp;instead&nbsp;of&nbsp;putConstString&nbsp;routine&nbsp;above.&nbsp;However,&nbsp;the&nbsp;code&nbsp;will&nbsp;be&nbsp;a&nbsp;little
&nbsp;*&nbsp;bit&nbsp;bigger.&nbsp;User&nbsp;should&nbsp;choose&nbsp;between&nbsp;size&nbsp;and&nbsp;speed&nbsp;and&nbsp;pick&nbsp;the&nbsp;implementation&nbsp;that
&nbsp;*&nbsp;suites&nbsp;him&nbsp;best.&nbsp;If&nbsp;you&nbsp;choose&nbsp;to&nbsp;go&nbsp;with&nbsp;the&nbsp;putConstString&nbsp;definition&nbsp;above
&nbsp;*&nbsp;the&nbsp;#define&nbsp;line&nbsp;below&nbsp;should&nbsp;be&nbsp;commented&nbsp;out.
&nbsp;*
&nbsp;*/
</span><span class="cpp1-preprocessor">#define&nbsp;putConstString&nbsp;&nbsp;SPI_Ethernet_putConstString

</span><span class="cpp1-comment">/*
&nbsp;*&nbsp;put&nbsp;the&nbsp;string&nbsp;pointed&nbsp;to&nbsp;by&nbsp;s&nbsp;to&nbsp;the&nbsp;ENC&nbsp;transmit&nbsp;buffer
&nbsp;*/
/*unsigned&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;putString(char&nbsp;*s)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned&nbsp;int&nbsp;ctr&nbsp;=&nbsp;0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(*s)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Spi_Ethernet_putByte(*s++);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctr++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(ctr);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}*/
/*
&nbsp;*&nbsp;it&nbsp;will&nbsp;be&nbsp;much&nbsp;faster&nbsp;to&nbsp;use&nbsp;library&nbsp;Spi_Ethernet_putString&nbsp;routine
&nbsp;*&nbsp;instead&nbsp;of&nbsp;putString&nbsp;routine&nbsp;above.&nbsp;However,&nbsp;the&nbsp;code&nbsp;will&nbsp;be&nbsp;a&nbsp;little
&nbsp;*&nbsp;bit&nbsp;bigger.&nbsp;User&nbsp;should&nbsp;choose&nbsp;between&nbsp;size&nbsp;and&nbsp;speed&nbsp;and&nbsp;pick&nbsp;the&nbsp;implementation&nbsp;that
&nbsp;*&nbsp;suites&nbsp;him&nbsp;best.&nbsp;If&nbsp;you&nbsp;choose&nbsp;to&nbsp;go&nbsp;with&nbsp;the&nbsp;putString&nbsp;definition&nbsp;above
&nbsp;*&nbsp;the&nbsp;#define&nbsp;line&nbsp;below&nbsp;should&nbsp;be&nbsp;commented&nbsp;out.
&nbsp;*
&nbsp;*/
</span><span class="cpp1-preprocessor">#define&nbsp;putString&nbsp;&nbsp;SPI_Ethernet_putString

</span><span class="cpp1-comment">/*
&nbsp;*&nbsp;this&nbsp;function&nbsp;is&nbsp;called&nbsp;by&nbsp;the&nbsp;library
&nbsp;*&nbsp;the&nbsp;user&nbsp;accesses&nbsp;to&nbsp;the&nbsp;HTTP&nbsp;request&nbsp;by&nbsp;successive&nbsp;calls&nbsp;to&nbsp;Spi_Ethernet_getByte()
&nbsp;*&nbsp;the&nbsp;user&nbsp;puts&nbsp;data&nbsp;in&nbsp;the&nbsp;transmit&nbsp;buffer&nbsp;by&nbsp;successive&nbsp;calls&nbsp;to&nbsp;Spi_Ethernet_putByte()
&nbsp;*&nbsp;the&nbsp;function&nbsp;must&nbsp;return&nbsp;the&nbsp;length&nbsp;in&nbsp;bytes&nbsp;of&nbsp;the&nbsp;HTTP&nbsp;reply,&nbsp;or&nbsp;0&nbsp;if&nbsp;nothing&nbsp;to&nbsp;transmit
&nbsp;*
&nbsp;*&nbsp;if&nbsp;you&nbsp;don't&nbsp;need&nbsp;to&nbsp;reply&nbsp;to&nbsp;HTTP&nbsp;requests,
&nbsp;*&nbsp;just&nbsp;define&nbsp;this&nbsp;function&nbsp;with&nbsp;a&nbsp;return(0)&nbsp;as&nbsp;single&nbsp;statement
&nbsp;*
&nbsp;*/
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_UserTCP(</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">*remoteHost,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">remotePort,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">localPort,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">reqLength,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">TEthPktFlags</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">*flags)
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;my&nbsp;reply&nbsp;length

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;should&nbsp;we&nbsp;close&nbsp;tcp&nbsp;socket&nbsp;after&nbsp;response&nbsp;is&nbsp;sent?
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;library&nbsp;closes&nbsp;tcp&nbsp;socket&nbsp;by&nbsp;default&nbsp;if&nbsp;canCloseTCP&nbsp;flag&nbsp;is&nbsp;not&nbsp;reset&nbsp;here
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;flags-&gt;canCloseTCP&nbsp;=&nbsp;0;&nbsp;//&nbsp;0&nbsp;-&nbsp;do&nbsp;not&nbsp;close&nbsp;socket
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;otherwise&nbsp;-&nbsp;close&nbsp;socket

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(localPort</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">!=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">80</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;I&nbsp;listen&nbsp;only&nbsp;to&nbsp;web&nbsp;request&nbsp;on&nbsp;port&nbsp;80
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">return</span><span class="cpp1-symbol">(</span><span class="cpp1-number">0</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;get&nbsp;10&nbsp;first&nbsp;bytes&nbsp;only&nbsp;of&nbsp;the&nbsp;request,&nbsp;the&nbsp;rest&nbsp;does&nbsp;not&nbsp;matter&nbsp;here
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">for</span><span class="cpp1-symbol">(len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&lt;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">10</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">len++)
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">getRequest[len]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_getByte();
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">getRequest[len]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(memcmp(getRequest,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">httpMethod,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">5</span><span class="cpp1-symbol">))</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;only&nbsp;GET&nbsp;method&nbsp;is&nbsp;supported&nbsp;here
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">return</span><span class="cpp1-symbol">(</span><span class="cpp1-number">0</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">httpCounter++;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;one&nbsp;more&nbsp;request&nbsp;done

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(getRequest[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">==</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'s'</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;if&nbsp;request&nbsp;path&nbsp;name&nbsp;starts&nbsp;with&nbsp;s,&nbsp;store&nbsp;dynamic&nbsp;data&nbsp;in&nbsp;transmit&nbsp;buffer
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;the&nbsp;text&nbsp;string&nbsp;replied&nbsp;by&nbsp;this&nbsp;request&nbsp;can&nbsp;be&nbsp;interpreted&nbsp;as&nbsp;javascript&nbsp;statements
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;by&nbsp;browsers

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(httpHeader);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTTP&nbsp;header
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(httpMimeTypeScript);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;with&nbsp;text&nbsp;MIME&nbsp;type

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;add&nbsp;AN0&nbsp;value&nbsp;to&nbsp;reply
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(ADC1_Get_Sample(</span><span class="cpp1-number">0</span><span class="cpp1-symbol">),</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;var&nbsp;AN0=&quot;</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putString(dyna)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;;&quot;</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;add&nbsp;AN1&nbsp;value&nbsp;to&nbsp;reply
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(ADC1_Get_Sample(</span><span class="cpp1-number">1</span><span class="cpp1-symbol">),</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;var&nbsp;AN1=&quot;</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putString(dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;;&quot;</span><span class="cpp1-symbol">);

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;add&nbsp;PORTB&nbsp;value&nbsp;(buttons)&nbsp;to&nbsp;reply
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;var&nbsp;PORTB=&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(PORTB,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putString(dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;;&quot;</span><span class="cpp1-symbol">);

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;add&nbsp;PORTD&nbsp;value&nbsp;(LEDs)&nbsp;to&nbsp;reply
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;var&nbsp;PORTD=&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(PORTD,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putString(dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;;&quot;</span><span class="cpp1-symbol">);

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;add&nbsp;HTTP&nbsp;requests&nbsp;counter&nbsp;to&nbsp;reply
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(httpCounter,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;var&nbsp;REQ=&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putString(dyna);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(</span><span class="cpp1-string">&quot;;&quot;</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">else</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(getRequest[</span><span class="cpp1-number">5</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">==</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'t'</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;if&nbsp;request&nbsp;path&nbsp;name&nbsp;starts&nbsp;with&nbsp;t,&nbsp;toggle&nbsp;PORTD&nbsp;(LED)&nbsp;bit&nbsp;number&nbsp;that&nbsp;comes&nbsp;after
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">long</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">bitMask</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;for&nbsp;bit&nbsp;mask

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(isdigit(getRequest[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]))</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;if&nbsp;0&nbsp;&lt;=&nbsp;bit&nbsp;number&nbsp;&lt;=&nbsp;9,&nbsp;bits&nbsp;8&nbsp;&amp;&nbsp;9&nbsp;does&nbsp;not&nbsp;exist&nbsp;but&nbsp;does&nbsp;not&nbsp;matter
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">bitMask</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">getRequest[</span><span class="cpp1-number">6</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">-</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'0'</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;convert&nbsp;ASCII&nbsp;to&nbsp;integer
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">bitMask</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">1</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&lt;&lt;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">bitMask;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;create&nbsp;bit&nbsp;mask
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">LATD</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">PORTD</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">^</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">bitMask;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;toggle&nbsp;PORTD&nbsp;with&nbsp;xor&nbsp;operator
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-symbol">(len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">==</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;what&nbsp;do&nbsp;to&nbsp;by&nbsp;default
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">putConstString(httpHeader);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTTP&nbsp;header
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(httpMimeTypeHTML);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;with&nbsp;HTML&nbsp;MIME&nbsp;type
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(indexPage);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTML&nbsp;page&nbsp;first&nbsp;part
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">putConstString(indexPage2);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;HTML&nbsp;page&nbsp;second&nbsp;part
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">return</span><span class="cpp1-symbol">(len);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;return&nbsp;to&nbsp;the&nbsp;library&nbsp;with&nbsp;the&nbsp;number&nbsp;of&nbsp;bytes&nbsp;to&nbsp;transmit
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-comment">/*
&nbsp;*&nbsp;this&nbsp;function&nbsp;is&nbsp;called&nbsp;by&nbsp;the&nbsp;library
&nbsp;*&nbsp;the&nbsp;user&nbsp;accesses&nbsp;to&nbsp;the&nbsp;UDP&nbsp;request&nbsp;by&nbsp;successive&nbsp;calls&nbsp;to&nbsp;Spi_Ethernet_getByte()
&nbsp;*&nbsp;the&nbsp;user&nbsp;puts&nbsp;data&nbsp;in&nbsp;the&nbsp;transmit&nbsp;buffer&nbsp;by&nbsp;successive&nbsp;calls&nbsp;to&nbsp;Spi_Ethernet_putByte()
&nbsp;*&nbsp;the&nbsp;function&nbsp;must&nbsp;return&nbsp;the&nbsp;length&nbsp;in&nbsp;bytes&nbsp;of&nbsp;the&nbsp;UDP&nbsp;reply,&nbsp;or&nbsp;0&nbsp;if&nbsp;nothing&nbsp;to&nbsp;transmit
&nbsp;*
&nbsp;*&nbsp;if&nbsp;you&nbsp;don't&nbsp;need&nbsp;to&nbsp;reply&nbsp;to&nbsp;UDP&nbsp;requests,
&nbsp;*&nbsp;just&nbsp;define&nbsp;this&nbsp;function&nbsp;with&nbsp;a&nbsp;return(0)&nbsp;as&nbsp;single&nbsp;statement
&nbsp;*
&nbsp;*/
</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_UserUDP(</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">*remoteHost,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">remotePort,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">destPort,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">reqLength,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">TEthPktFlags</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">*flags)
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;my&nbsp;reply&nbsp;length

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;reply&nbsp;is&nbsp;made&nbsp;of&nbsp;the&nbsp;remote&nbsp;host&nbsp;IP&nbsp;address&nbsp;in&nbsp;human&nbsp;readable&nbsp;format
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">ByteToStr(remoteHost[</span><span class="cpp1-number">0</span><span class="cpp1-symbol">],</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;first&nbsp;IP&nbsp;address&nbsp;byte
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'.'</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">ByteToStr(remoteHost[</span><span class="cpp1-number">1</span><span class="cpp1-symbol">],</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">4</span><span class="cpp1-symbol">);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;second
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">7</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'.'</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">ByteToStr(remoteHost[</span><span class="cpp1-number">2</span><span class="cpp1-symbol">],</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">8</span><span class="cpp1-symbol">);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;third
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">11</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'.'</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">ByteToStr(remoteHost[</span><span class="cpp1-number">3</span><span class="cpp1-symbol">],</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">12</span><span class="cpp1-symbol">);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;fourth

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">15</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">':'</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;add&nbsp;separator

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;then&nbsp;remote&nbsp;host&nbsp;port&nbsp;number
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(remotePort,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">16</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">21</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">'['</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">WordToStr(destPort,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dyna</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">22</span><span class="cpp1-symbol">);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">27</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-character">']'</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">dyna[</span><span class="cpp1-number">28</span><span class="cpp1-symbol">]</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;the&nbsp;total&nbsp;length&nbsp;of&nbsp;the&nbsp;request&nbsp;is&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;dynamic&nbsp;string&nbsp;plus&nbsp;the&nbsp;text&nbsp;of&nbsp;the&nbsp;request
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">len</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">28</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">+</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">reqLength;

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;puts&nbsp;the&nbsp;dynamic&nbsp;string&nbsp;into&nbsp;the&nbsp;transmit&nbsp;buffer
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_putBytes(dyna,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">28</span><span class="cpp1-symbol">);

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;then&nbsp;puts&nbsp;the&nbsp;request&nbsp;string&nbsp;converted&nbsp;into&nbsp;upper&nbsp;char&nbsp;into&nbsp;the&nbsp;transmit&nbsp;buffer
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">while</span><span class="cpp1-symbol">(reqLength--)
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_putByte(toupper(SPI_Ethernet_getByte()));
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">return</span><span class="cpp1-symbol">(len);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;back&nbsp;to&nbsp;the&nbsp;library&nbsp;with&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;UDP&nbsp;reply
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-comment">/*
&nbsp;*&nbsp;main&nbsp;entry
&nbsp;*/
</span><span class="cpp1-reservedword">void</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">main()
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">CHECON</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x32</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">AD1PCFG</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">|=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0xFFFC</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;all&nbsp;digital&nbsp;but&nbsp;rb0(AN0)&nbsp;and&nbsp;rb1(AN1)

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">PORTB</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">TRISB</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0xFFFF</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;set&nbsp;PORTB&nbsp;as&nbsp;input&nbsp;for&nbsp;buttons&nbsp;and&nbsp;adc

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">PORTD</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">TRISD</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;set&nbsp;PORTD&nbsp;as&nbsp;output,

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">ADC1_Init();</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Enable&nbsp;ADC&nbsp;module
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">/*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;starts&nbsp;ENC28J60&nbsp;with&nbsp;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;reset&nbsp;bit&nbsp;on&nbsp;RC0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;CS&nbsp;bit&nbsp;on&nbsp;RC1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;my&nbsp;MAC&nbsp;&amp;&nbsp;IP&nbsp;address
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;full&nbsp;duplex
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SPI1_Init();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;init&nbsp;SPI&nbsp;communication&nbsp;with&nbsp;ethernet&nbsp;board
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI2_Init_Advanced(_SPI_MASTER,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">_SPI_8_BIT,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">16</span><span class="cpp1-symbol">,
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">_SPI_SS_DISABLE,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">_SPI_DATA_SAMPLE_MIDDLE,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">_SPI_CLK_IDLE_LOW,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">_SPI_IDLE_2_ACTIVE);
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_Init(myMacAddr,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">myIpAddr,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">Spi_Ethernet_FULLDUPLEX);</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-comment">//&nbsp;init&nbsp;ethernet&nbsp;board

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;dhcp&nbsp;will&nbsp;not&nbsp;be&nbsp;used&nbsp;here,&nbsp;so&nbsp;use&nbsp;preconfigured&nbsp;addresses
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_confNetwork(ipMask,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">gwIpAddr,</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">dnsIpAddr);

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">while</span><span class="cpp1-symbol">(</span><span class="cpp1-number">1</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;do&nbsp;forever
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">/*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;if&nbsp;necessary,&nbsp;test&nbsp;the&nbsp;return&nbsp;value&nbsp;to&nbsp;get&nbsp;error&nbsp;code
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI_Ethernet_doPacket();</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;process&nbsp;incoming&nbsp;Ethernet&nbsp;packets

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">/*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;add&nbsp;your&nbsp;stuff&nbsp;here&nbsp;if&nbsp;needed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Spi_Ethernet_doPacket()&nbsp;must&nbsp;be&nbsp;called&nbsp;as&nbsp;often&nbsp;as&nbsp;possible
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;otherwise&nbsp;packets&nbsp;could&nbsp;be&nbsp;lost
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span></code>
</pre>	    

    <h3>HW Connection</h3>

    <p class="center"><img src="img/schemes/scheme_spi_ethernet.gif" alt="SPI Ethernet Connection Scheme"></p>

    <div class="feedback">
            Copyright (c) 2002-2017 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="http://www.mikroe.com/en/support/">Send us feedback!</a>
    </div>

      <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
