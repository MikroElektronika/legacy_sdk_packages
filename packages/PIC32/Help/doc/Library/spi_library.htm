
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>

<title>SPI Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_pic32.css">

<script defer type="text/javascript" src="css/pngfix.js"></script>


	






<style type="text/css">
#top {
  background:transparent url(template/background_c_PIC32.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
                     PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
                     color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
    padding-left: 15px;
    padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">SPI Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_libraries.htm">mikroC PRO for PIC32 Libraries</A> &gt; <A href="mikroC_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="sound_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="spi_ethernet_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">


    <a name="top_of_page"><h2><acronym title="Serial Peripheral Interface">SPI</acronym> Library</h2></a>


    <p>The <acronym title="Serial Peripheral Interface">SPI</acronym> module is available with all PIC32 MCUs. 
    	mikroC PRO for PIC32 provides a library for initializing the Slave mode and initializing and comfortable work with the Master mode. 
    	The PIC32 can easily communicate with other devices via <acronym title="Serial Peripheral Interface">SPI</acronym>: 
    	A/D converters, D/A converters, MAX7219, LTC1290, etc. </p>
    
    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	    <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b> 
      <ul>
    	  <li><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</li>
    	  <li>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</li>
    	  <li>Switching between the <acronym title="Serial Peripheral Interface">SPI</acronym> modules in the <acronym title="Serial Peripheral Interface">SPI</acronym> library is done by the <a href="#spi_set_active">SPI_Set_Active</a> function (both <acronym title="Serial Peripheral Interface">SPI</acronym> modules have to be previously initialized).</li>
      </ul>
    </div> 
    <p></p>
          
    <!-- -->

    <h3>Library Routines</h3>

    <ul>
      <li><a href="#spi_init">SPIx_Init</a></li>
      <li><a href="#spi_init_advanced">SPIx_Init_Advanced</a></li>
      <li><a href="#spi_read">SPIx_Read</a></li>  
      <li><a href="#spi_write">SPIx_Write</a></li>    
      <li><a href="#spi_set_active">SPI_Set_Active</a></li>
    </ul>
    
    <h4>Generic Routines</h4>

    <ul>
      <li><a href="#spi_read_gen">SPI_Read</a></li>  
      <li><a href="#spi_write_gen">SPI_Write</a></li>    
    </ul>

    <!-- -->


    <h3 id="spi_init">SPIx_Init</h3>


    <!-- tabela: SPIx_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

     <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPIx_Init();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures and initializes the <acronym title="Serial Peripheral Interface">SPI</acronym> module with default settings.</p>
            <p>Default settings: 
            	<ul>
            		<li>Master mode.</li>
            		<li>8-bit data mode.</li>
            		<li>Serial clock set to System clock/64.</li>
           		  <li>Slave Select disabled.</li>
           	   	<li>Input data sampled in the middle of interval.</li>
           	   	<li>Clock idle state low.</li>
           	  	<li>Serial output data changes on transition from idle clock state to active clock state </li>
              </ul>
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have the <acronym title="Serial Peripheral Interface">SPI</acronym>1 module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// Initialize the SPI1 module with default settings</i>
SPI1_Init();</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
    	      <p>Switching between the <acronym title="Serial Peripheral Interface">SPI</acronym> modules in the <acronym title="Serial Peripheral Interface">SPI</acronym> library is done by the <a href="#spi_set_active">SPI_Set_Active</a> function (both <acronym title="Serial Peripheral Interface">SPI</acronym> modules have to be previously initialized).</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_init_advanced">SPIx_Init_Advanced </h3>


    <!-- tabela: SPIx_Init_Advanced -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPIx_Init_Advanced(<b>unsigned</b> master_mode, <b>unsigned</b> data_mode, <b>unsigned</b> clock_divider, <b>unsigned</b> slave_select, <b>unsigned</b> data_sample, <b>unsigned</b> clock_idle, <b>unsigned</b> edge);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Configures and initializes the <acronym title="Serial Peripheral Interface">SPI</acronym> module with user defined settings.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>Parameters <code>master_mode</code>, <code>data_mode</code>, <code>clock_divider</code>, <code>slave_select</code>, <code>data_sample</code>, <code>clock_idle</code> and determine the working mode for <acronym title="Serial Peripheral Interface">SPI</acronym>.</p>
               
                <p>The <code>master_mode</code> parameter determines the working mode for <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>

                <table>			
									<tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Master/Slave mode</b></td>
                  </tr>

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	
									
									<tr align="center">
										<td><code>Master mode</code></td>
										<td><code>_SPI_MASTER</code></td>
                  </tr>
									
									<tr align="center">
										<td><code>Slave mode</code></td>
										<td><code>_SPI_SLAVE</code></td>
                  </tr>
                </table>

								<p></p>
                <p>The parameter <code>data_mode</code> determines the data length mode, which can be 8-bits (per transmitions cycle), 16-bits or 32-bits.</p>
              
                <table>	
									<tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Data Length Mode</b></td>
                  </tr>

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>32-bit mode</code></td>
										<td><code>_SPI_32_BIT</code></td>
                  </tr>

									<tr align="center">
										<td><code>16-bit mode</code></td>
										<td><code>_SPI_16_BIT</code></td>
                  </tr>

									<tr align="center">
										<td><code>8-bit mode</code></td>
										<td><code>_SPI_8_BIT</code></td>
                  </tr>
                </table>
 
								<p></p>
                <p>The parameter <code>clock_divider</code> determines the value of the SPI clock speed. Used only in the Master Mode.</p>
                
                <table>                				
									<tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Clock Divider Value</b></td>
                  </tr>
									
									<tr align="center">
										<td colspan=2;>Valid values from <code>2</code> to <code>1024</code></td>
                  </tr>

                </table>

								<p></p>
                <p>The parameter <code>slave_select</code> determines whether the Slave Select (SS) pin is used in communication. Valid in the Slave Mode only.</p>

                <table> 				
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Slave Select Enable/Disable</b></td>
                  </tr>  

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>SS used for the Slave mode</code></td>
										<td><code>_SPI_SS_ENABLE</code></td>
                  </tr>    

									<tr align="center">
										<td><code>SS not used for the Slave mode</code></td>
										<td><code>_SPI_SS_DISABLE</code></td>
                  </tr>  
                </table> 

								<p></p>
                <p>The parameter <code>data_sample</code> determines the sample moment (phase) of input data.</p>
                
                <table> 				
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Data Sampling Moment</b></td>
                  </tr>                

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>Data sampled in the middle of data output time</code></td>
										<td><code>_SPI_DATA_SAMPLE_MIDDLE</code></td>
                  </tr>    

									<tr align="center">
										<td><code>Data sampled at end of data output time</code></td>
										<td><code>_SPI_DATA_SAMPLE_END</code></td>
                  </tr> 
                </table> 

								<p></p>
                <p>The parameter <code>clock_idle</code> determines the behaviour of the SPI clock (CLK) line in IDLE phase.</p>

                <table> 				
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Clock Polarity</b></td>
                  </tr>                

                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	

									<tr align="center">
										<td><code>IDLE state is Lo, ACTIVE state is Hi</code></td>
										<td><code>_SPI_CLK_IDLE_LOW</code></td>
                  </tr>    

									<tr align="center">
										<td><code>IDLE state is Hi, ACTIVE state is Lo</code></td>
										<td><code>_SPI_CLK_IDLE_HIGH</code></td>
                  </tr> 
                </table> 

								<p></p>
                <p>The parameter <code>edge</code> determines on which clock edge data is considered to be valid.</p>

                <table> 
                  <tr align="center">
										<td colspan=2; bgcolor=#f5f2ec><b>Clock Edge</b></td>
                  </tr>                
                
                  <tr align="center">
										<td bgcolor=#f5f2ec><b>Description</b></td>
										<td bgcolor=#f5f2ec><b>Predefined library const</b></td>
                  </tr>	
								
									<tr align="center">
										<td><code>Data is valid on ACTIVE-to-IDLE transition</code></td>
										<td><code>_SPI_ACTIVE_2_IDLE</code></td>
                  </tr>    

									<tr align="center">
										<td><code>Data is valid on IDLE-to-ACTIVE transition</code></td>
										<td><code>_SPI_IDLE_2_ACTIVE</code></td>
                  </tr> 
                </table> 
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p><acronym title="MicroController Unit">MCU</acronym> must have the <acronym title="Serial Peripheral Interface">SPI</acronym> module.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
<i>// Set SPI1 to the Master Mode, data length is 16-bit, clock = Fcy (no clock scaling), data sampled in the middle of interval, clock IDLE state high and data transmitted at low to high clock edge:</i>
SPI1_Init_Advanced(_SPI_MASTER, _SPI_16_BIT, 1, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);
</pre>										 
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr>

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_read">SPIx_Read</h3>


    <!-- tabela: SPIx_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned</b> SPIx_Read(<b>unsigned long</b> buffer);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one double word, word or byte (depending on mode set by init routines) from the SPI bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>buffer:</code> dummy data for clock generation (see device Datasheet for SPI modules implementation details)</li>
           	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Received data.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the 
            	<a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// read a byte from the SPI bus</i> 
<b>char</b> take, buffer;
...
take = SPI1_Read(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_write">SPIx_Write</h3>


    <!-- tabela: SPIx_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPIx_Write(<b>unsigned long</b> data_out);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Writes one double word, word or byte (depending on mode set by init routines) via the SPI bus.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>data_out:</code> data to be sent</li>
          	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the <a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// write a byte to the SPI bus</i>
<b>char</b> buffer;
...
SPI1_Write(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p><acronym title="Serial Peripheral Interface">SPI</acronym> library routines require you to specify the module you want to use. To select the desired <acronym title="Serial Peripheral Interface">SPI</acronym> module, simply change the letter <b>x</b> in the routine prototype for a number from <b>1</b> to <b>3</b>.</p>
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->


    <h3 id="spi_set_active">SPI_Set_Active</h3>


    <!-- tabela: SPI_Set_Active -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> SPI_Set_Active(<b>unsigned</b> (*read_ptr)(<b>unsigned</b>), <b>void</b>(*write_ptr)(<b>unsigned</b>));</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Sets the active SPI module which will be used by the <a href="#spi_read">SPIx_Read</a> and <a href="#spi_write">SPIx_Write</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>Parameters :</p> 
            	<ul>
            		<li><code>read_ptr:</code> <a href="#spi1_read">SPI1_Read</a> handler</li>
            		<li><code>write_ptr:</code> <a href="#spi1_write">SPI1_Write</a> handler</li>
            	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
          	<p>Routine is available only for MCUs with multiple SPI modules.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the  
            	<a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
SPI_Set_Active(SPI1_Read, SPI1_Write); <i>// Sets the SPI1 module active</i></pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p>Number of <acronym title="Serial Peripheral Interface">SPI</acronym> modules per MCU differs from chip to chip. Please, read the appropriate datasheet before utilizing this library.</p>    	      
          </td>
        </tr> 

      </tbody>

    </table>


    <!-- -->


    <h3 id="spi_read_gen">SPI_Read</h3>


    <!-- tabela: SPI_Read -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned</b> SPIx_Read(<b>unsigned long</b> buffer);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Reads one double word, word or byte (depending on mode set by init routines) from the SPI bus.</p>
            <p>This is a generic routine which uses the active SPI module previously activated by the <a href="#spi_set_active">SPI_Set_Active</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>buffer:</code> dummy data for clock generation (see device Datasheet for SPI modules implementation details)</li>
           	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Received data.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the 
            	<a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// read a byte from the SPI bus</i> 
<b>char</b> take, buffer;
...
take = SPI1_Read(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p>None.</p>
          </td>
        </tr> 

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="spi_write_gen">SPI_Write</h3>


    <!-- tabela: SPI_Write -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>procedure</b> SPI_Write(data_out : dword);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>Writes one double word, word or byte (depending on mode set by init routines) via the SPI bus.</p>
            <p>This is a generic routine which uses the active SPI module previously activated by the <a href="#spi_set_active">SPI_Set_Active</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
           		<li><code>data_out:</code> data to be sent</li>
          	</ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Routine requires at least one SPI module.</p>
            <p>Used <acronym title="Serial Peripheral Interface">SPI</acronym> module must be initialized before using this function. See the <a href="#spi_init">SPIx_Init</a> and <a href="#spi_init_advanced">SPIx_Init_Advanced</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<i>// write a byte to the SPI bus</i>
<b>char</b> buffer;
...
SPI1_Write(buffer);</pre>

          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
    	      <p>None.</p>
          </td>
        </tr> 

      </tbody>

    </table>


    <!-- kraj tabele -->    

    <!-- -->

    <h3>Library Example</h3>

    <p>The code demonstrates how to use <acronym title="Serial Peripheral Interface">SPI</acronym> library functions for communication between SPI2 module of the MCU and MCP4921 DAC chip.</p>

<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>

<pre class="program">
<code><span class="cpp1-comment">//&nbsp;DAC&nbsp;module&nbsp;connections
</span><span class="cpp1-identifier">sbit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">Chip_Select</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">at</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">LATF0_bit;
sbit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">Chip_Select_Direction</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">at</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">TRISF0_bit;
</span><span class="cpp1-comment">//&nbsp;End&nbsp;DAC&nbsp;module&nbsp;connections

</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">value;

</span><span class="cpp1-reservedword">void</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">InitMain()</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">TRISB0_bit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Set&nbsp;RB0&nbsp;pin&nbsp;as&nbsp;input
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">TRISB1_bit</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Set&nbsp;RB1&nbsp;pin&nbsp;as&nbsp;input
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">Chip_Select</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Deselect&nbsp;DAC
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">Chip_Select_Direction</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Set&nbsp;CS#&nbsp;pin&nbsp;as&nbsp;Output
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI2_Init();</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Initialize&nbsp;SPI2&nbsp;module
</span><span class="cpp1-symbol">}

</span><span class="cpp1-comment">//&nbsp;DAC&nbsp;increments&nbsp;(0..4095)&nbsp;--&gt;&nbsp;output&nbsp;voltage&nbsp;(0..Vref)
</span><span class="cpp1-reservedword">void</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">DAC_Output(</span><span class="cpp1-reservedword">unsigned</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-reservedword">int</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">valueDAC)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-reservedword">char</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">temp;

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">Chip_Select</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Select&nbsp;DAC&nbsp;chip

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Send&nbsp;High&nbsp;Byte
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">temp</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">(valueDAC</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&gt;&gt;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">8</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&amp;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x0F</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Store&nbsp;valueDAC[11..8]&nbsp;to&nbsp;temp[3..0]
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">temp</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">|=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x30</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Define&nbsp;DAC&nbsp;setting,&nbsp;see&nbsp;MCP4921&nbsp;datasheet
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI2_Write(temp);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Send&nbsp;high&nbsp;byte&nbsp;via&nbsp;SPI

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Send&nbsp;Low&nbsp;Byte
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">temp</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">valueDAC;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Store&nbsp;valueDAC[7..0]&nbsp;to&nbsp;temp[7..0]
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">SPI2_Write(temp);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Send&nbsp;low&nbsp;byte&nbsp;via&nbsp;SPI

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">Chip_Select</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">1</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Deselect&nbsp;DAC&nbsp;chip
</span><span class="cpp1-symbol">}

</span><span class="cpp1-reservedword">void</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-identifier">main()</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">CHECON</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0x32</span><span class="cpp1-symbol">;
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">AD1PCFG</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-hexadecimal">0xFFFF</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Configure&nbsp;AN&nbsp;pins&nbsp;as&nbsp;digital

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">InitMain();</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Perform&nbsp;main&nbsp;initialization

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-identifier">value</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">=</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">2048</span><span class="cpp1-symbol">;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;When&nbsp;program&nbsp;starts,&nbsp;DAC&nbsp;gives
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;&nbsp;&nbsp;the&nbsp;output&nbsp;in&nbsp;the&nbsp;mid-range

</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-reservedword">while</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">(</span><span class="cpp1-number">1</span><span class="cpp1-symbol">)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Endless&nbsp;loop

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">((RB0_bit)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&amp;&amp;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">(value</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&lt;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">4095</span><span class="cpp1-symbol">))</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;If&nbsp;RB0&nbsp;button&nbsp;is&nbsp;pressed
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">value++;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;&nbsp;&nbsp;increment&nbsp;value
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">else</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-reservedword">if</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">((RB1_bit)</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&amp;&amp;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">(value</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">&gt;</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-number">0</span><span class="cpp1-symbol">))</span><span class="cpp1-space">&nbsp;</span><span class="cpp1-symbol">{</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;If&nbsp;RB1&nbsp;button&nbsp;is&nbsp;pressed
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">value--;</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;&nbsp;&nbsp;decrement&nbsp;value
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-symbol">}

</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">DAC_Output(value);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Send&nbsp;value&nbsp;to&nbsp;DAC&nbsp;chip
</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-identifier">Delay_ms(</span><span class="cpp1-number">1</span><span class="cpp1-symbol">);</span><span class="cpp1-space">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="cpp1-comment">//&nbsp;Slow&nbsp;down&nbsp;key&nbsp;repeat&nbsp;pace
</span><span class="cpp1-space">&nbsp;&nbsp;</span><span class="cpp1-symbol">}
}
</span></code>
</pre>

    <h3>HW Connection</h3>

    <p class="center"><img alt="SPI connection" src="img/Schemes/scheme_spi.gif"></p>
    <p class="center small">SPI HW connection</p>

    <div class="feedback">
            Copyright (c) 2002-2017 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="http://www.mikroe.com/en/support/">Send us feedback!</a>
    </div>

      <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
