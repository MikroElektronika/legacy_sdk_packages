
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>

<head>

<title>Manchester Code Library</title>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="Copyright" content="mikroElektronika 2005.">
<meta name="Author" content="Nikola Topalovic. mailto:office@mikroe.com">

<link rel="stylesheet" type="text/css" href="css/help_c_ARM.css">
<link rel="stylesheet" type="text/css" href="css/example.css">
<script defer type="text/javascript" src="css/pngfix.js"></script>
<script type="text/javascript" src="css/tabber.js"></script>


	







<style type="text/css">
#top {
  background:transparent url(template/c_arm.png); 
}

.title{
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 70px; 
	FONT-WEIGHT: bold; 
	FONT-SIZE: 14px; 
	PADDING-BOTTOM: 3px; 
	PADDING-TOP: 0px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation{
  PADDING-TOP: -5px;
	PADDING-RIGHT: 2px; 
	PADDING-LEFT: 63px; 
	FONT-SIZE: 11px; 
	FONT-FAMILY: Verdana;
  color:white;
}

.navigation a:link {text-decoration: none; color: white;}
.navigation a:visited {text-decoration: none; color: white;}
.navigation a:active {text-decoration: none; color: white;}
.navigation a:hover {text-decoration: none; color: white; background:black;}

.nav_bar {
}

#top td p,td pre {
	margin:0 0 0 0;
}
</style>

<style type="text/css" media="screen">
#main{
	border-top: 1px solid #000000;
  padding-left: 15px;
  padding-right: 15px;
	position: absolute;
	top: 59px;
	right: 0px;
	bottom: 0px;
	left: 0px;

	width: expression(document.body.offsetWidth - 3);
	height: expression(document.body.offsetHeight -  65);
	overflow: auto;
}
</style>

</head>


<body>

<div id="top">
<table height="60" width="100%">
  <tbody>
	  <tr>
		  <td>
			  <pre class="nav_bar"><div class="title">Manchester Code Library</div><div class="navigation">&nbsp;&nbsp;<A href="mikroc_libraries.htm">mikroC PRO for ARM Libraries</A> &gt; <A href="mikroC_hardware_libraries.htm">Hardware Libraries</A> &gt; </div></pre>
			</td>
		  <td style="WIDTH: 120px" align="right">
			  <pre class="nav_bar"><A href="lcd_library.htm" title="Previous"><img src="template\btn_prev_n.png" border="0"></a>&nbsp;<A title="Top of the Page" href="#top_of_page" alt="Top of the Page"><IMG src="template/btn_up_n.png" border=0 ></a>&nbsp;<A href="memory_manager_library.htm" title="Next"><img src="template\btn_next_n.png" border="0"></a></pre>
			</td>
		</tr>
	</tbody>
</table>
</div>

	


  <div id="main">


    <a name="top_of_page"><h2>Manchester Code Library</h2></a>


    <p>The mikroC PRO for ARM provides a library for handling Manchester coded signals. The Manchester code is a code in which data and clock signals are combined to form a single self-synchronizing data stream; each encoded bit contains a transition at the midpoint of a bit period, the direction of transition determines whether the bit is 0 or 1; the second half is the true bit value and the first half is the complement of the true bit value (as shown in the figure below).</p>

    <p class="center"><img alt="Manchester signal format" src="img/Schemes/scheme_manchester0.gif"></p>

    <div style="border: 1.00pt solid #cccccc; padding: 5.00pt; background: #f5f2ec">
	    <img src="img/note.gif" align="absmiddle"><b>&nbsp;&nbsp;Important :</b>
      <ul>
      	<li>The Manchester receive routines are blocking calls (<code>Man_Receive_Init</code> and <code>Man_Synchro</code>). This means that MCU will wait until the task has been performed (e.g. byte is received, synchronization achieved, etc).</li>
      	<li>Manchester code library implements time-based activities, so interrupts need to be disabled when using it.</li>
      </ul>
    </div>

    <!-- -->

   <p></p>
   <h3>External dependencies of Manchester Code Library</h3>

  <div class="tabber">
    <div class="tabbertab">
    <h2>Stellaris</h2>
    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using Manchester Code Library:</th>
          <th width="30%">Description: </th>
          <th width="30%">Example: </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANRXPIN;</code></td>
          <td align="left">Receive line.</td>
          <td align="left"><code><b>sbit</b> MANRXPIN <b>at</b> GPIO_PORTE_DATA.B0;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANTXPIN;</code></td>
          <td align="left">Transmit line.</td>
          <td align="left"><code><b>sbit</b> MANTXPIN <b>at</b> GPIO_PORTE_DATA.B1;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANRXPIN_Direction;</code></td>
          <td align="left">Direction of the Receive pin.</td>
          <td align="left"><code><b>sbit</b> MANRXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B0;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANTXPIN_Direction;</code></td>
          <td align="left">Direction of the Transmit pin.</td>
          <td align="left"><code><b>sbit</b> MANTXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B1;</code></td>
        </tr>
        
      </tbody>
    </table>
    </div>

    <div class="tabbertab">
    <h2>MSP432</h2>
    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using Manchester Code Library:</th>
          <th width="30%">Description: </th>
          <th width="30%">Example: </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANRXPIN;</code></td>
          <td align="left">Receive line.</td>
          <td align="left"><code><b>sbit</b> MANRXPIN <b>at</b> DIO_P6IN.B0;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANTXPIN;</code></td>
          <td align="left">Transmit line.</td>
          <td align="left"><code><b>sbit</b> MANTXPIN <b>at</b> DIO_P6OUT.B1;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANRXPIN_Direction;</code></td>
          <td align="left">Direction of the Receive pin.</td>
          <td align="left"><code><b>sbit</b> MANRXPIN_Direction <b>at</b> DIO_P6DIR.B0;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANTXPIN_Direction;</code></td>
          <td align="left">Direction of the Transmit pin.</td>
          <td align="left"><code><b>sbit</b> MANTXPIN_Direction <b>at</b> DIO_P6DIR.B1;</code></td>
        </tr>
        
      </tbody>
    </table>
    </div>

    <div class="tabbertab">
    <h2>STM32</h2>
    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using Manchester Code Library:</th>
          <th width="30%">Description: </th>
          <th width="30%">Example: </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANRXPIN;</code></td>
          <td align="left">Receive line.</td>
          <td align="left"><code><b>sbit</b> MANRXPIN <b>at</b> GPIOE_IDR.B8;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANTXPIN;</code></td>
          <td align="left">Transmit line.</td>
          <td align="left"><code><b>sbit</b> MANTXPIN <b>at</b> GPIOE_ODR.B9;</code></td>
        </tr>
        
      </tbody>
    </table>
    </div>

    <div class="tabbertab">
    <h2>CEC1x02</h2>
    <table class="Dependencies" width="75%">

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="40%">The following variables must be defined in all projects using Manchester Code Library:</th>
          <th width="30%">Description: </th>
          <th width="30%">Example: </th>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANRXPIN;</code></td>
          <td align="left">Receive line.</td>
          <td align="left"><code><b>sbit</b> MANRXPIN <b>at</b> GPIO_INPUT_PIN_023_bit;</code></td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <td align="left"><code><b>extern sfr sbit</b> MANTXPIN;</code></td>
          <td align="left">Transmit line.</td>
          <td align="left"><code><b>sbit</b> MANTXPIN <b>at</b> GPIO_OUTPUT_PIN_023_bit;</code></td>
        </tr>
        
      </tbody>
    </table>
    </div>

  </div>

    <!-- kraj tabele -->


    <!-- -->
    

    <h3>Library Routines</h3>

    <ul>
      <li><a href="#man_receive_init">Man_Receive_Init</a></li>
      <li><a href="#man_receive">Man_Receive</a></li>
      <li><a href="#man_send_init">Man_Send_Init</a></li>
      <li><a href="#man_send">Man_Send</a></li>
      <li><a href="#man_synchro">Man_Synchro</a></li>
      <li><a href="#man_break">Man_Break</a></li>
    </ul>

    <p>The following routines are for the internal use by compiler only:</p>
    <ul>
      <li>Manchester_0</li>
      <li>Manchester_1</li>
      <li>Manchester_Out</li>
    </ul>


    <h3 id="man_receive_init">Man_Receive_Init</h3>


    <!-- tabela: Man_Receive_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> Man_Receive_Init();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>The function configures Receiver pin. After that, the function performs synchronization procedure in order to retrieve baud rate out of the incoming signal.</p>
          </td>
        </tr>
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>
            	<ul>
	            	<li><code>0</code> - if initialization and synchronization were successful.</li> 
	            	<li><code>1</code> - upon unsuccessful synchronization.</li> 
	            	<li><code>255</code> - upon user abort.</li>  
	            </ul>	
            </p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>External dependencies of the library from the top of the page must be defined before using this function.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
  <div class="tabber">
    <div class="tabbertab">
    <h2>Stellaris</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIO_PORTE_DATA.B0;
<b>sbit</b> MANRXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B0;
<b>sbit</b> MANTXPIN <b>at</b> GPIO_PORTE_DATA.B1;
<b>sbit</b> MANTXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B1;
...
if (Man_Receive_Init() == 0) {
...
}</pre>
    </div>

    <div class="tabbertab">
    <h2>Stellaris</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> DIO_P6IN.B0;
<b>sbit</b> MANRXPIN_Direction <b>at</b> DIO_P6DIR.B0;
<b>sbit</b> MANTXPIN <b>at</b> DIO_P6OUT.B1;
<b>sbit</b> MANTXPIN_Direction <b>at</b> DIO_P6DIR.B1;
...
if (Man_Receive_Init() == 0) {
...
}</pre>
    </div>

    <div class="tabbertab">
    <h2>STM32</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIOE_IDR.B8;
<b>sbit</b> MANTXPIN <b>at</b> GPIOE_IDR.B9;
...
if (Man_Receive_Init() == 0) {
...
}</pre>
    </div>

    <div class="tabbertab">
    <h2>CEC1x02</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIO_INPUT_PIN_023_bit;
<b>sbit</b> MANTXPIN <b>at</b> GPIO_OUTPUT_PIN_023_bit;
...
if (Man_Receive_Init() == 0) {
...
}</pre>
    </div>

  </div>


          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>In case of multiple persistent errors on reception, the user should call this routine once again or <a href="#man_synchro">Man_Synchro</a> routine to enable synchronization.</p>
          </td>
        </tr>  
       
      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="man_receive">Man_Receive</h3>


    <!-- tabela: Man_Receive -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned char</b> Man_Receive(<b>unsigned int</b> *error);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>The function extracts one byte from incoming signal.</p>
          </td>
        </tr>
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
             	<li><code>error:</code> error flag. If signal format does not match the expected, the <code>error</code> flag will be set to non-zero.</li>
            </ul>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>A byte read from the incoming signal.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>To use this function, the user must prepare the MCU for receiving. See <a href="#man_receive_init">Man_Receive_Init</a> routines.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>unsigned int</b> data = 0, error = 0;
...
data = Man_Receive(&#38;error);
<b>if</b> (error)
  { <i>/* error handling */</i> }</pre>

          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->

    <!-- -->


    <h3 id="man_send_init">Man_Send_Init</h3>


    <!-- tabela: Man_Send_Init -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Man_Send_Init();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p>The function configures Transmitter pin.</p>
          </td>
        </tr>
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>External dependencies of the library from the top of the page must be defined before using this function.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
  <div class="tabber">
    <div class="tabbertab">
    <h2>Stellaris</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIO_PORTE_DATA.B0;
<b>sbit</b> MANRXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B0;
<b>sbit</b> MANTXPIN <b>at</b> GPIO_PORTE_DATA.B1;
<b>sbit</b> MANTXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B1;
...
Man_Send_Init();
</pre>
    </div>

    <div class="tabbertab">
    <h2>MSP432</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> DIO_P6IN.B0;
<b>sbit</b> MANRXPIN_Direction <b>at</b> DIO_P6DIR.B0;
<b>sbit</b> MANTXPIN <b>at</b> DIO_P6OUT.B1;
<b>sbit</b> MANTXPIN_Direction <b>at</b> DIO_P6DIR.B1;
...
Man_Send_Init();
</pre>
    </div>

    <div class="tabbertab">
    <h2>STM32</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIOE_IDR.B8;
<b>sbit</b> MANTXPIN <b>at</b> GPIOE_IDR.B9;
...
Man_Send_Init();
</pre>
    </div>

    <div class="tabbertab">
    <h2>CEC1x02</h2>
<pre>
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIO_INPUT_PIN_023_bit;
<b>sbit</b> MANTXPIN <b>at</b> GPIO_OUTPUT_PIN_023_bit;
...
Man_Send_Init();
</pre>
    </div>
  </div>

          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="man_send">Man_Send</h3>


    <!-- tabela: Man_Send -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Man_Send(<b>unsigned char</b> tr_data);</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
         <th valign="top">Description</th>
          <td valign="top">
            <p>Sends one byte.</p>
          </td>
        </tr>
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
           	<ul>
             	<li><code>tr_data:</code> data to be sent</li>
            </ul>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>To use this function, the user must prepare the MCU for sending. See <a href="#man_send_init">Man_Send_Init</a> routine.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">

<pre>
<b>unsigned int</b> msg;
...
Man_Send(msg);</pre>

          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>Baud rate used is 500 bps.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->


    <h3 id="man_synchro">Man_Synchro</h3>


    <!-- tabela: Man_Synchro -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>unsigned int</b> Man_Synchro();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
         <th valign="top">Description</th>
          <td valign="top">
            <p>Measures half of the manchester bit length with 10us resolution.</p>
          </td>
        </tr>
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
         	  <ul>
	           	<li><code>0</code> - if synchronization was not successful.</li> 
	           	<li>Half of the manchester bit length, given in multiples of 10us - upon successful synchronization.</li> 
	          </ul>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>To use this function, you must first prepare the MCU for receiving. See <a href="#man_receive_init">Man_Receive_Init</a>.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">


<pre>
<b>unsigned int</b> man__half_bit_len;
...
man__half_bit_len = Man_Synchro();</pre>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- -->


    <h3 id="man_break">Man_Break</h3>


    <!-- tabela: Man_Break -->

    <table class="routine" width="100%">

      <!--
      <caption></caption>

      <thead></thead>
      -->

      <tbody>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th width="0" valign="top">Prototype</th>
          <td class="code" width="100%" valign="top">
            <p><b>void</b> Man_Break();</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Description</th>
          <td valign="top">
            <p><a href="#man_receive">Man_Receive</a> is blocking routine and it can block the program flow. Call this routine from interrupt to unblock the program execution. This mechanism is similar to <acronym title="Watch Dog Timer">WDT</acronym>.</p>
          </td>
        </tr>
     
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Parameters</th>
          <td valign="top">
            <p>None.</p>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Returns</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Requires</th>
          <td valign="top">
            <p>Nothing.</p>
          </td>
        </tr>

        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Example</th>
          <td valign="top">
<pre>
</pre>
          </td>
        </tr>
       
        <tr style="background:'white'" onmouseover="this.style.background='#f8f8f8';" onmouseout="this.style.background='white';">
          <th valign="top">Notes</th>
          <td valign="top">
            <p>Interrupts should be disabled before using Manchester routines again (see note at the top of this page).</p>
          </td>
        </tr>  

      </tbody>

    </table>

    <!-- kraj tabele -->


    <!-- 


    <h3>Library Example</h3>

    <p>The following code is code for the Manchester receiver, it shows how to use the Manchester Library for receiving data:</p>

  <div class="tabber">
    <div class="tabbertab">
    <h2>Stellaris</h2>
<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>    
<pre class="program">
<i>// LCD module connections</i>
<b>sbit</b> LCD_RS <b>at</b> GPIO_PORTD_DATA2_bit;
<b>sbit</b> LCD_EN <b>at</b> GPIO_PORTD_DATA3_bit;
<b>sbit</b> LCD_D4 <b>at</b> GPIO_PORTD_DATA4_bit;
<b>sbit</b> LCD_D5 <b>at</b> GPIO_PORTD_DATA5_bit;
<b>sbit</b> LCD_D6 <b>at</b> GPIO_PORTD_DATA6_bit;
<b>sbit</b> LCD_D7 <b>at</b> GPIO_PORTD_DATA7_bit;


<b>sbit</b> LCD_RS_Direction <b>at</b> GPIO_PORTD_DIR2_bit;
<b>sbit</b> LCD_EN_Direction <b>at</b> GPIO_PORTD_DIR3_bit;
<b>sbit</b> LCD_D4_Direction <b>at</b> GPIO_PORTD_DIR4_bit;
<b>sbit</b> LCD_D5_Direction <b>at</b> GPIO_PORTD_DIR5_bit;
<b>sbit</b> LCD_D6_Direction <b>at</b> GPIO_PORTD_DIR6_bit;
<b>sbit</b> LCD_D7_Direction <b>at</b> GPIO_PORTD_DIR7_bit;
<i>// End LCD module connections</i>


<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIO_PORTE_DATA.B0;
<b>sbit</b> MANRXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B0;
<b>sbit</b> MANTXPIN <b>at</b> GPIO_PORTE_DATA.B1;
<b>sbit</b> MANTXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B1;
<i>// End Manchester module connections</i>

<b>unsigned int</b> error;
<b>char</b> ErrorCount, chr_counter, byte_rcvd;

<b>void</b> main() {

  ErrorCount = 0;
  chr_counter = 0;

  Lcd_Init();                                     <i>// Initialize LCD</i>
  Lcd_Cmd(_LCD_CLEAR);                            <i>// Clear LCD display</i>

  Man_Receive_Init();                             <i>// Initialize Receiver</i>

  <b>while</b> (1) {                                     <i>// Endless loop</i>

      Lcd_Cmd(_LCD_FIRST_ROW);                    <i>// Move cursor to the 1st row</i>

      <b>while</b> (1) {                                 <i>// Wait for the &#34;start&#34; byte</i>
        byte_rcvd = Man_Receive(&#38;error);          <i>// Attempt byte receive</i>
        <b>if</b> (byte_rcvd == 0x0B)                    <i>// &#34;Start&#34; byte, see Transmitter example</i>
          <b>break</b>;                                  <i>// We got the starting sequence</i>
        <b>if</b> (error)                                <i>// Exit so we do not loop forever</i>
          <b>break</b>;
        }

      <b>do</b>
        {
          byte_rcvd = Man_Receive(&#38;error);        <i>// Attempt byte receive</i>
          <b>if</b> (error) {                            <i>// If error occured</i>
            Lcd_Chr_CP('?');                      <i>// Write question mark on LCD</i>
            ErrorCount++;                         <i>// Update error counter</i>
            <b>if</b> (ErrorCount &#62; 20) {                <i>// In case of multiple errors</i>
              Man_Synchro();                      <i>// Try to synchronize again</i>
              <i>//Man_Receive_Init();               // Alternative, try to Initialize Receiver again</i>
              ErrorCount = 0;                     <i>// Reset error counter</i>
              }
            }

          <b>else</b> {                                  <i>// No error occured</i>
            <b>if</b> (byte_rcvd != 0x0E) {              <i>// If &#34;End&#34; byte was received(see Transmitter example)</i>
                                                  <i>// do not write anymore received byte on LCD</i>
              Lcd_Chr_CP(byte_rcvd);              <i>// else write character on LCD</i>
              chr_counter++;                      <i>// Counts how many chars have been written on LCD</i>
              <b>if</b> (chr_counter == 25) {            <i>// If there were more then 25 characters</i>
                                                  <i>// synchronization is off</i>
                Lcd_Cmd(_LCD_CLEAR);              <i>// Clear the LCD of garbled communication</i>
                Man_Synchro();                    <i>// Try to synchronize again</i>
              }
            }
            <b>else</b>
              chr_counter = 0;                    <i>// reset chr_counter</i>
          }

          Delay_ms(25);
        }
      <b>while</b> (byte_rcvd != 0x0E);                  <i>// If &#34;End&#34; byte was received exit do loop</i>
   }
}
</pre>
    </div>

    <div class="tabbertab">
    <h2>STM32</h2>
<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>    
<pre class="program">
<i>// LCD module connections</i>
<b>sbit</b> LCD_RS <b>at</b> GPIOD_ODR.B2;
<b>sbit</b> LCD_EN <b>at</b> GPIOD_ODR.B3;
<b>sbit</b> LCD_D4 <b>at</b> GPIOD_ODR.B4;
<b>sbit</b> LCD_D5 <b>at</b> GPIOD_ODR.B5;
<b>sbit</b> LCD_D6 <b>at</b> GPIOD_ODR.B6;
<b>sbit</b> LCD_D7 <b>at</b> GPIOD_ODR.B7;
<i>// End LCD module connections</i>


<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIOE_IDR.B8;
<b>sbit</b> MANTXPIN <b>at</b> GPIOE_ODR.B9;
<i>// End Manchester module connections</i>

<b>unsigned int</b> error;
<b>char</b> ErrorCount, chr_counter, byte_rcvd;

<b>void</b> main() {

  ErrorCount = 0;
  chr_counter = 0;

  Lcd_Init();                                     <i>// Initialize LCD</i>
  Lcd_Cmd(_LCD_CLEAR);                            <i>// Clear LCD display</i>

  Man_Receive_Init();                             <i>// Initialize Receiver</i>

  <b>while</b> (1) {                                     <i>// Endless loop</i>

      Lcd_Cmd(_LCD_FIRST_ROW);                    <i>// Move cursor to the 1st row</i>

      <b>while</b> (1) {                                 <i>// Wait for the &#34;start&#34; byte</i>
        byte_rcvd = Man_Receive(&#38;error);          <i>// Attempt byte receive</i>
        <b>if</b> (byte_rcvd == 0x0B)                    <i>// &#34;Start&#34; byte, see Transmitter example</i>
          <b>break</b>;                                  <i>// We got the starting sequence</i>
        <b>if</b> (error)                                <i>// Exit so we do not loop forever</i>
          <b>break</b>;
        }

      <b>do</b>
        {
          byte_rcvd = Man_Receive(&#38;error);        <i>// Attempt byte receive</i>
          <b>if</b> (error) {                            <i>// If error occured</i>
            Lcd_Chr_CP('?');                      <i>// Write question mark on LCD</i>
            ErrorCount++;                         <i>// Update error counter</i>
            <b>if</b> (ErrorCount &#62; 20) {                <i>// In case of multiple errors</i>
              Man_Synchro();                      <i>// Try to synchronize again</i>
              <i>//Man_Receive_Init();               // Alternative, try to Initialize Receiver again</i>
              ErrorCount = 0;                     <i>// Reset error counter</i>
              }
            }

          <b>else</b> {                                  <i>// No error occured</i>
            <b>if</b> (byte_rcvd != 0x0E) {              <i>// If &#34;End&#34; byte was received(see Transmitter example)</i>
                                                  <i>// do not write anymore received byte on LCD</i>
              Lcd_Chr_CP(byte_rcvd);              <i>// else write character on LCD</i>
              chr_counter++;                      <i>// Counts how many chars have been written on LCD</i>
              <b>if</b> (chr_counter == 25) {            <i>// If there were more then 25 characters</i>
                                                  <i>// synchronization is off</i>
                Lcd_Cmd(_LCD_CLEAR);              <i>// Clear the LCD of garbled communication</i>
                Man_Synchro();                    <i>// Try to synchronize again</i>
              }
            }
            <b>else</b>
              chr_counter = 0;                    <i>// reset chr_counter</i>
          }

          Delay_ms(25);
        }
      <b>while</b> (byte_rcvd != 0x0E);                  <i>// If &#34;End&#34; byte was received exit do loop</i>
   }
}
</pre>
    </div>
  </div>

    <p>The following code is code for the Manchester transmitter, it shows how to use the Manchester Library for transmitting data:</p>

  <div class="tabber">
    <div class="tabbertab">
    <h2>Stellaris</h2>
<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>    
<pre class="program">
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIO_PORTE_DATA.B0;
<b>sbit</b> MANRXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B0;
<b>sbit</b> MANTXPIN <b>at</b> GPIO_PORTE_DATA.B1;
<b>sbit</b> MANTXPIN_Direction <b>at</b> GPIO_PORTE_DIR.B1;
<i>// End Manchester module connections</i>

<b>char</b> index, character;
<b>char</b> s1[] = &#34;mikroElektronika&#34;;

<b>void</b> main() {

  Man_Send_Init();                 <i>// Initialize transmitter</i>

  <b>while</b> (1) {                      <i>// Endless loop</i>
    Man_Send(0x0B);                <i>// Send &#34;start&#34; byte</i>
    Delay_ms(100);                 <i>// Wait for a while</i>

    character = s1[0];             <i>// Take first char from string</i>
    index = 0;                     <i>// Initialize index variable</i>
    <b>while</b> (character) {            <i>// String ends with zero</i>
      Man_Send(character);         <i>// Send character</i>
      Delay_ms(90);                <i>// Wait for a while</i>
      index++;                     <i>// Increment index variable</i>
      character = s1[index];       <i>// Take next char from string</i>
    }
    Man_Send(0x0E);                <i>// Send &#34;end&#34; byte</i>
    Delay_ms(1000);
  }
}
</pre>
    </div>

    <div class="tabbertab">
    <h2>STM32</h2>
<div class="example">
  <textarea style="display:none;"></textarea> 
  <span class="copytoclipboard"><a onclick="copyToClipboard(this); return false;" href="#"><img align="absmiddle" alt="Copy Code To Clipboard" src="img/copy_to_clipboard.gif" border="0" /><span class="clipboard_text">Copy Code To Clipboard</span></a></span>
</div>    
<pre class="program">
<i>// Manchester module connections</i>
<b>sbit</b> MANRXPIN <b>at</b> GPIOE_IDR.B8;
<b>sbit</b> MANTXPIN <b>at</b> GPIOE_ODR.B9;
<i>// End Manchester module connections</i>

<b>char</b> index, character;
<b>char</b> s1[] = &#34;mikroElektronika&#34;;

<b>void</b> main() {

  Man_Send_Init();                 <i>// Initialize transmitter</i>

  <b>while</b> (1) {                      <i>// Endless loop</i>
    Man_Send(0x0B);                <i>// Send &#34;start&#34; byte</i>
    Delay_ms(100);                 <i>// Wait for a while</i>

    character = s1[0];             <i>// Take first char from string</i>
    index = 0;                     <i>// Initialize index variable</i>
    <b>while</b> (character) {            <i>// String ends with zero</i>
      Man_Send(character);         <i>// Send character</i>
      Delay_ms(90);                <i>// Wait for a while</i>
      index++;                     <i>// Increment index variable</i>
      character = s1[index];       <i>// Take next char from string</i>
    }
    Man_Send(0x0E);                <i>// Send &#34;end&#34; byte</i>
    Delay_ms(1000);
  }
}
</pre>
    </div>
  </div>
  



    <h3>Connection Example</h3>

    <p class="center"><img alt="Simple Transmitter connection" src="img/Schemes/scheme_manchester1.gif"></p>
    <p class="center small">Simple Transmitter connection</p>
<br>
    <p class="center"><img alt="Simple Receiver connection" src="img/Schemes/scheme_manchester2.gif"></p>
    <p class="center small">Simple Receiver connection</p>
-->

    <div class="feedback">
            Copyright (c) 2002-2019 mikroElektronika. All rights reserved.
      <br>What do you think about this topic ?  <a href="https://helpdesk.mikroe.com/conversation/new/3" target="_blank">Send us feedback!</a>
    </div>

      <div class="libstock">Want more examples and libraries?&nbsp;
     <br>Find them on
     <a href="http://www.libstock.com/" target="_blank"><img alt="LibStock - A place for the code" src="img/libstock.gif" border="0" align="absmiddle"></a>
    </div>

  </div><!--/main-->




</body>

</html>
